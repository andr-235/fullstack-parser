#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, Any


async def test_comments_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

    # –ë–∞–∑–æ–≤—ã–π URL API
    base_url = "https://localhost/api/v1"

    async with httpx.AsyncClient(
        verify=False
    ) as client:  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        print("\n1. –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
        try:
            response = await client.get(
                f"{base_url}/parser/comments", params={"page": 1, "size": 10}
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(data['items'])} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                print(f"   –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {data['total']}")
                print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞: {data['page']}")
                print(f"   –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {data['size']}")

                if data["items"]:
                    first_comment = data["items"][0]
                    print(f"   –ü–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {first_comment.get('id')}")
                    print(f"   –¢–µ–∫—Å—Ç: {first_comment.get('text', '')[:50]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
        print("\n2. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ:")
        try:
            response = await client.get(
                f"{base_url}/parser/comments",
                params={
                    "page": 1,
                    "size": 5,
                    "group_id": 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                },
            )

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ: {len(data['items'])} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        print("\n3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:")
        try:
            response = await client.get(
                f"{base_url}/parser/comments",
                params={
                    "page": 1,
                    "size": 5,
                    "keyword_id": 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å ID 1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                },
            )

            if response.status_code == 200:
                data = response.json()
                print(
                    f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {len(data['items'])} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                )
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n4. –¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        try:
            response = await client.get(f"{base_url}/stats/global")

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {data.get('total_groups', 0)}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {data.get('active_groups', 0)}")
                print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {data.get('total_keywords', 0)}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {data.get('active_keywords', 0)}")
                print(f"   –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {data.get('total_comments', 0)}")
                print(
                    f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {data.get('comments_with_keywords', 0)}"
                )
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        print("\n5. –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞:")
        try:
            response = await client.get(f"{base_url}/parser/state")

            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞: {data.get('status', 'unknown')}")
                if data.get("task"):
                    task = data["task"]
                    print(f"   –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {task.get('task_id', 'N/A')}")
                    print(f"   –ì—Ä—É–ø–ø–∞: {task.get('group_id', 'N/A')}")
                    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {task.get('progress', 0)}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {response.status_code}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def test_arq_worker_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ arq_worker –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ arq_worker...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º docker logs –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        import subprocess

        result = subprocess.run(
            ["docker", "logs", "fullstack_prod_arq_worker", "--tail", "50"],
            capture_output=True,
            text=True,
        )

        if result.returncode == 0:
            logs = result.stdout

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            error_count = (
                logs.count("ERROR") + logs.count("error") + logs.count("Error")
            )
            sort_error_count = logs.count("sort should be asc, desc or smart")

            print(f"‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫)")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {error_count}")
            print(f"   –û—à–∏–±–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {sort_error_count}")

            if sort_error_count > 0:
                print("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ VK API")
            else:
                print("   ‚úÖ –û—à–∏–±–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            lines = logs.split("\n")
            error_lines = [
                line
                for line in lines
                if any(err in line.lower() for err in ["error", "exception"])
            ]

            if error_lines:
                print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
                for line in error_lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
                    print(f"   {line}")

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    await test_comments_api()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    await test_arq_worker_logs()

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
