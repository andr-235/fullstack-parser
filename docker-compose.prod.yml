version: "3.8"

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    compress: "true"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # Основное приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        BUILDKIT_INLINE_CACHE: 1
    image: myapp:${IMAGE_TAG:-latest}
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000" # Привязка только к localhost
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    env_file:
      - .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      nginx:
        condition: service_started
    networks:
      - app-network
      - frontend-network
    volumes:
      - app-data:/app/data:rw
      - app-logs:/app/logs:rw
      - /etc/localtime:/etc/localtime:ro # Синхронизация времени
    secrets:
      - source: db_password
        target: db_password
        uid: "1000"
        gid: "1000"
        mode: 0400
      - api_key
      - redis_password
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=100m
    user: "1000:1000"

  # База данных PostgreSQL
  db:
    image: postgres:15-alpine@sha256:1234567890abcdef
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    env_file:
      - .env.production
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - app-network
    secrets:
      - db_password
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "999:999"

  # Redis кеш
  redis:
    image: redis:7-alpine@sha256:abcdef1234567890
    restart: unless-stopped
    command: redis-server --requirepass /run/secrets/redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - app-network
    secrets:
      - redis_password
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    user: "999:999"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine@sha256:fedcba0987654321
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - frontend-network
      - app-network
    depends_on:
      - app
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/cache/nginx:noexec,nosuid,size=100m
    user: "101:101"

  # Мониторинг - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0@sha256:1234567890abcdef
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
      - /etc/localtime:/etc/localtime:ro
    networks:
      - monitoring-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: false
    user: "65534:65534"

  # Мониторинг - Grafana
  grafana:
    image: grafana/grafana:10.0.0@sha256:abcdef1234567890
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - monitoring-network
    secrets:
      - grafana_password
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: false
    user: "472:472"

networks:
  app-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  monitoring-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/data
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/logs
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/redis
  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/nginx/logs
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/prometheus
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/grafana

secrets:
  db_password:
    file: ./secrets/db_password.txt
  api_key:
    file: ./secrets/api_key.txt
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
