# =============================================================================
# Production Overrides for Docker Compose
# =============================================================================

services:
  # =============================================================================
  # Production FastAPI Backend
  # =============================================================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # Production settings
      DEBUG: "false"
      LOG_LEVEL: "WARNING"
      ENVIRONMENT: "production"
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: 15
      
      # Database connection pooling
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      
      # Redis settings
      REDIS_MAX_CONNECTIONS: 50
      
      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: "production"
      SENTRY_TRACES_SAMPLE_RATE: "0.1"
      
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network

  # =============================================================================
  # Production Celery Worker
  # =============================================================================
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # Production settings
      DEBUG: "false"
      LOG_LEVEL: "WARNING"
      ENVIRONMENT: "production"
      
      # Celery production settings
      CELERY_WORKER_CONCURRENCY: 4
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1
      CELERY_TASK_ACKS_LATE: "true"
      CELERY_WORKER_DISABLE_RATE_LIMITS: "true"
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network

  # =============================================================================
  # Production Celery Beat
  # =============================================================================
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # Production settings
      DEBUG: "false"
      LOG_LEVEL: "WARNING"
      ENVIRONMENT: "production"
      
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network

  # =============================================================================
  # Production Flower
  # =============================================================================
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    depends_on:
      redis:
        condition: service_started
    environment:
      # Production settings
      DEBUG: "false"
      LOG_LEVEL: "WARNING"
      ENVIRONMENT: "production"
      
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network

  # =============================================================================
  # Production PostgreSQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    environment:
      # Production PostgreSQL settings
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C --data-checksums"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vk_parser}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups

  # =============================================================================
  # Production Redis
  # =============================================================================
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --tcp-backlog 511
      --databases 16
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # =============================================================================
  # Production Next.js Frontend
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    environment:
      # Production settings
      NODE_ENV: "production"
      NEXT_TELEMETRY_DISABLED: "1"
      DOCKER: "true"
      CI: "true"
      
      # API URL
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost/api}
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # =============================================================================
  # Production Nginx
  # =============================================================================
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - api
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# =============================================================================
# Networks
# =============================================================================
networks:
  app-network:
    driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
