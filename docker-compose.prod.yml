services:
  api:
     build:
       context: ./backend
       dockerfile: Dockerfile
       target: runtime
     command: ["./main"]
     depends_on:
       postgres:
         condition: service_healthy
       redis:
         condition: service_started
     environment:
       # Database
       DATABASE_DSN: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-vk_parser}?sslmode=disable

       # JWT
       JWT_SECRET: ${SECRET_KEY}
       ACCESS_TTL: "15m"
       REFRESH_TTL: "24h"

       # Server
       PORT: "8080"
       GIN_MODE: "release"

       # Production settings
       LOG_LEVEL: "WARNING"
       ENVIRONMENT: "production"

     deploy:
       resources:
         limits:
           memory: 1G
           cpus: '1.0'
         reservations:
           memory: 512M
           cpus: '0.5'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network

  # =============================================================================
     # Production Asynq Worker
  # =============================================================================
  asynq-worker:
     build:
       context: ./backend
       dockerfile: Dockerfile.worker
       target: runtime
     depends_on:
       postgres:
         condition: service_healthy
       redis:
         condition: service_started
     environment:
       # Database
       DATABASE_DSN: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-vk_parser}?sslmode=disable

       # Redis
       REDIS_ADDR: redis:6379
       REDIS_DB: 1

       # Production settings
       LOG_LEVEL: "WARNING"
       ENVIRONMENT: "production"

       # Security
       JWT_SECRET: ${SECRET_KEY}

     deploy:
       resources:
         limits:
           memory: 512M
           cpus: '0.5'
         reservations:
           memory: 256M
           cpus: '0.25'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network



  # =============================================================================
     # Production PostgreSQL
  # =============================================================================
  postgres:
     image: postgres:15-alpine
     environment:
       # Database credentials
       POSTGRES_DB: ${POSTGRES_DB:-vk_parser}
       POSTGRES_USER: ${POSTGRES_USER:-postgres}
       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

       # Production PostgreSQL settings
       POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C --data-checksums"
     command: >
       postgres
       -c shared_preload_libraries=pg_stat_statements
       -c pg_stat_statements.track=all
       -c max_connections=200
       -c shared_buffers=256MB
       -c effective_cache_size=1GB
       -c maintenance_work_mem=64MB
       -c checkpoint_completion_target=0.9
       -c wal_buffers=16MB
       -c default_statistics_target=100
       -c random_page_cost=1.1
       -c effective_io_concurrency=200
       -c work_mem=4MB
       -c min_wal_size=1GB
       -c max_wal_size=4GB
     deploy:
       resources:
         limits:
           memory: 1G
           cpus: '1.0'
         reservations:
           memory: 512M
           cpus: '0.5'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network
     healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vk_parser}"]
       interval: 10s
       timeout: 5s
       retries: 5
       start_period: 30s
     volumes:
       - postgres_data:/var/lib/postgresql/data
       - postgres_backups:/backups

  # =============================================================================
     # Production Redis
  # =============================================================================
  redis:
     image: redis:7-alpine
     command: >
       redis-server
       --appendonly yes
       --maxmemory 512mb
       --maxmemory-policy allkeys-lru
       --tcp-keepalive 60
       --timeout 300
       --tcp-backlog 511
       --databases 16
     deploy:
       resources:
         limits:
           memory: 512M
           cpus: '0.5'
         reservations:
           memory: 256M
           cpus: '0.25'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network
     volumes:
       - redis_data:/data
     healthcheck:
       test: ["CMD", "redis-cli", "ping"]
       interval: 10s
       timeout: 5s
       retries: 5
       start_period: 30s


  # =============================================================================
     # Production Frontend
  # =============================================================================
  frontend:
     build:
       context: .
       dockerfile: frontend/Dockerfile
     ports:
       - "3003:3000"
     deploy:
       resources:
         limits:
           memory: 256M
           cpus: '0.25'
         reservations:
           memory: 128M
           cpus: '0.1'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network
     healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost:3000/"]
       interval: 30s
       timeout: 10s
       retries: 3
       start_period: 40s

  # =============================================================================
     # Production Nginx (Reverse Proxy)
  # =============================================================================
  nginx:
     build:
       context: .
       dockerfile: nginx/Dockerfile
     ports:
       - "8080:80"
     depends_on:
       - api
       - frontend
     deploy:
       resources:
         limits:
           memory: 256M
           cpus: '0.25'
         reservations:
           memory: 128M
           cpus: '0.1'
     restart: always
     logging:
       driver: "json-file"
       options:
         max-size: "50m"
         max-file: "5"
     networks:
       - app-network
     healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost/health"]
       interval: 30s
       timeout: 10s
       retries: 3
       start_period: 40s

# =============================================================================
# Networks
# =============================================================================
networks:
   app-network:
     driver: bridge

# =============================================================================
# Volumes
# =============================================================================
volumes:
   postgres_data:
     driver: local
   postgres_backups:
     driver: local
   redis_data:
     driver: local