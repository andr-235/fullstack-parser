# =============================================================================
# NGINX PRODUCTION CONFIGURATION FOR DOMAIN parser.mysite.ru
# =============================================================================
# Оптимизированная конфигурация для домена с HTTPS

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Оптимизация для production
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # =============================================================================
    # BASIC SETTINGS
    # =============================================================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Добавляем MIME типы для файлов
    types {
        text/csv csv;
        application/wasm wasm;
    }

    # Hide nginx version
    server_tokens off;

    # =============================================================================
    # LOGGING
    # =============================================================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # =============================================================================
    # PERFORMANCE SETTINGS
    # =============================================================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/wasm;

    # =============================================================================
    # UPSTREAM BACKENDS
    # =============================================================================
    upstream fastapi_backend {
        server backend:8000;
        keepalive 32;
    }

    upstream nextjs_frontend {
        server frontend:3000;
        keepalive 32;
    }

    # =============================================================================
    # RATE LIMITING
    # =============================================================================
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;

    # =============================================================================
    # HTTP SERVER (REDIRECT TO HTTPS)
    # =============================================================================
    server {
        listen 80;
        server_name parser.mysite.ru 192.168.88.12;
        
        # Security headers for HTTP
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # =============================================================================
    # HTTPS SERVER
    # =============================================================================
    server {
        listen 443 ssl http2;
        server_name parser.mysite.ru 192.168.88.12;
        
        # =============================================================================
        # SSL CONFIGURATION (Self-Signed Certificate)
        # =============================================================================
        # Пути к self-signed сертификатам
        ssl_certificate /etc/nginx/ssl/selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
        
        # Fallback на Let's Encrypt сертификат (если доступен)
        # ssl_certificate /etc/letsencrypt/live/parser.mysite.ru/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/parser.mysite.ru/privkey.pem;
        
        # Современные SSL настройки
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # OCSP Stapling (отключено для self-signed сертификата)
        # ssl_stapling on;
        # ssl_stapling_verify on;
        # ssl_trusted_certificate /etc/letsencrypt/live/parser.mysite.ru/chain.pem;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # HSTS (HTTP Strict Transport Security)
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Security headers
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;

        # =============================================================================
        # HEALTH CHECK
        # =============================================================================
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # =============================================================================
        # API ROUTES (FASTAPI BACKEND)
        # =============================================================================
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;

            # Proxy settings
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # Authentication endpoints with stricter rate limiting
        location /api/v1/auth/ {
            limit_req zone=auth burst=10 nodelay;

            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;
        }

        # WebSocket support for FastAPI
        location /ws/ {
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # =============================================================================
        # STATIC FILES (NEXTJS)
        # =============================================================================
        location /_next/static/ {
            limit_req zone=static burst=50 nodelay;
            
            proxy_pass http://nextjs_frontend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;

            # Cache static files aggressively
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }

        # =============================================================================
        # NEXTJS RSC REQUESTS (Server-Side Rendering)
        # =============================================================================
        # Обработка запросов Next.js RSC (React Server Components)
        location ~ ^/(groups|keywords|comments|parser|monitoring|settings)\?rsc= {
            # Rate limiting for frontend
            limit_req zone=api burst=30 nodelay;

            # Disable caching for RSC requests
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";

            # Proxy to Next.js frontend
            proxy_pass http://nextjs_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # =============================================================================
        # FRONTEND ROUTES (NEXTJS)
        # =============================================================================
        location / {
            # Rate limiting for frontend
            limit_req zone=api burst=30 nodelay;

            # Disable caching for main pages to prevent white screen issues
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";

            # Proxy to Next.js frontend
            proxy_pass http://nextjs_frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-Port 443;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
        }

        # =============================================================================
        # ERROR PAGES
        # =============================================================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # =============================================================================
    # HTTP SERVER FOR IP ACCESS (REDIRECT TO DOMAIN)
    # =============================================================================
    server {
        listen 80;
        server_name 192.168.88.12;
        
        # Redirect IP access to domain
        return 301 https://parser.mysite.ru$request_uri;
    }

    # =============================================================================
    # HTTPS SERVER FOR IP ACCESS (REDIRECT TO DOMAIN)
    # =============================================================================
    server {
        listen 443 ssl http2;
        server_name 192.168.88.12;
        
        # SSL Configuration for IP (self-signed)
        ssl_certificate /etc/nginx/ssl/selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Redirect IP access to domain
        return 301 https://parser.mysite.ru$request_uri;
    }
}
