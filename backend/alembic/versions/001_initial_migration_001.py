"""initial migration

Revision ID: 001_initial_migration_001
Revises:
Create Date: 2025-07-24 11:47:00.000000

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "001_initial_migration_001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=False)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "vk_groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("vk_id", sa.Integer(), nullable=False),
        sa.Column("screen_name", sa.String(length=100), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("max_posts_to_check", sa.Integer(), nullable=False),
        sa.Column("auto_monitoring_enabled", sa.Boolean(), nullable=False),
        sa.Column("monitoring_interval_minutes", sa.Integer(), nullable=False),
        sa.Column("next_monitoring_at", sa.DateTime(), nullable=True),
        sa.Column("monitoring_priority", sa.Integer(), nullable=False),
        sa.Column("last_parsed_at", sa.DateTime(), nullable=True),
        sa.Column("total_posts_parsed", sa.Integer(), nullable=False),
        sa.Column("total_comments_found", sa.Integer(), nullable=False),
        sa.Column("monitoring_runs_count", sa.Integer(), nullable=False),
        sa.Column("last_monitoring_success", sa.DateTime(), nullable=True),
        sa.Column("last_monitoring_error", sa.Text(), nullable=True),
        sa.Column("members_count", sa.Integer(), nullable=True),
        sa.Column("is_closed", sa.Boolean(), nullable=False),
        sa.Column("photo_url", sa.String(length=500), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("vk_id"),
    )
    op.create_index(op.f("ix_vk_groups_id"), "vk_groups", ["id"], unique=False)
    op.create_index(
        op.f("ix_vk_groups_vk_id"), "vk_groups", ["vk_id"], unique=False
    )
    op.create_table(
        "keywords",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("word", sa.String(length=100), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("word"),
    )
    op.create_index(op.f("ix_keywords_id"), "keywords", ["id"], unique=False)
    op.create_index(
        op.f("ix_keywords_word"), "keywords", ["word"], unique=False
    )
    op.create_table(
        "vk_posts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("vk_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=True),
        sa.Column("likes_count", sa.Integer(), nullable=False),
        sa.Column("reposts_count", sa.Integer(), nullable=False),
        sa.Column("comments_count", sa.Integer(), nullable=False),
        sa.Column("views_count", sa.Integer(), nullable=False),
        sa.Column("published_at", sa.DateTime(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["vk_groups.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("vk_id", "group_id"),
    )
    op.create_index(op.f("ix_vk_posts_id"), "vk_posts", ["id"], unique=False)
    op.create_index(
        op.f("ix_vk_posts_vk_id"), "vk_posts", ["vk_id"], unique=False
    )
    op.create_table(
        "vk_comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("vk_id", sa.Integer(), nullable=False),
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("likes_count", sa.Integer(), nullable=False),
        sa.Column("published_at", sa.DateTime(), nullable=False),
        sa.Column("is_viewed", sa.Boolean(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["post_id"],
            ["vk_posts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("vk_id", "post_id"),
    )
    op.create_index(
        op.f("ix_vk_comments_id"), "vk_comments", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_vk_comments_vk_id"), "vk_comments", ["vk_id"], unique=False
    )
    op.create_table(
        "comment_keyword_matches",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("comment_id", sa.Integer(), nullable=False),
        sa.Column("keyword_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["vk_comments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["keyword_id"],
            ["keywords.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("comment_id", "keyword_id"),
    )
    op.create_index(
        op.f("ix_comment_keyword_matches_id"),
        "comment_keyword_matches",
        ["id"],
        unique=False,
    )
    op.create_table(
        "error_reports",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("error_type", sa.String(length=100), nullable=False),
        sa.Column("severity", sa.String(length=20), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("resolved_at", sa.DateTime(), nullable=True),
        sa.Column("resolved_by", sa.String(length=100), nullable=True),
        sa.Column("resolution_notes", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_error_reports_id"), "error_reports", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_error_reports_report_id"),
        "error_reports",
        ["id"],
        unique=False,
    )
    op.create_table(
        "error_entries",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("report_id", sa.Integer(), nullable=False),
        sa.Column("error_message", sa.Text(), nullable=False),
        sa.Column("stack_trace", sa.Text(), nullable=True),
        sa.Column("context_data", sa.JSON(), nullable=True),
        sa.Column("occurred_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["error_reports.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_error_entries_id"), "error_entries", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_error_entries_id"), table_name="error_entries")
    op.drop_table("error_entries")
    op.drop_index(
        op.f("ix_error_reports_report_id"), table_name="error_reports"
    )
    op.drop_index(op.f("ix_error_reports_id"), table_name="error_reports")
    op.drop_table("error_reports")
    op.drop_index(
        op.f("ix_comment_keyword_matches_id"),
        table_name="comment_keyword_matches",
    )
    op.drop_table("comment_keyword_matches")
    op.drop_index(op.f("ix_vk_comments_vk_id"), table_name="vk_comments")
    op.drop_index(op.f("ix_vk_comments_id"), table_name="vk_comments")
    op.drop_table("vk_comments")
    op.drop_index(op.f("ix_vk_posts_vk_id"), table_name="vk_posts")
    op.drop_index(op.f("ix_vk_posts_id"), table_name="vk_posts")
    op.drop_table("vk_posts")
    op.drop_index(op.f("ix_keywords_word"), table_name="keywords")
    op.drop_index(op.f("ix_keywords_id"), table_name="keywords")
    op.drop_table("keywords")
    op.drop_index(op.f("ix_vk_groups_vk_id"), table_name="vk_groups")
    op.drop_index(op.f("ix_vk_groups_id"), table_name="vk_groups")
    op.drop_table("vk_groups")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
