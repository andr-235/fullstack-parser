#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å "–≥–∏–≤–∏"
"""

import asyncio

from app.core.database import AsyncSessionLocal
from app.services.parser_service import ParserService


async def test_check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å "–≥–∏–≤–∏" """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–≥–∏–≤–∏'...")

    async with AsyncSessionLocal() as db:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å–µ—Ä–≤–∏—Å
        parser_service = ParserService(
            db=db, vk_service=None
        )  # –ù–µ –Ω—É–∂–µ–Ω VK —Å–µ—Ä–≤–∏—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–î

        print("\nüìã –ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–≥–∏–≤–∏'")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            from app.schemas.base import PaginationParams
            from app.schemas.vk_comment import CommentSearchParams

            search_params = CommentSearchParams(keywords=["–≥–∏–≤–∏"])
            pagination = PaginationParams(page=1, size=10)

            comments = await parser_service.filter_comments(
                search_params=search_params, pagination=pagination
            )

            if comments.items:
                print(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–≥–∏–≤–∏': {len(comments.items)}"
                )
                for i, comment in enumerate(comments.items, 1):
                    print(f"\n   {i}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment.id}")
                    print(f"      VK ID: {comment.vk_id}")
                    print(f"      –ê–≤—Ç–æ—Ä: {comment.author_id}")
                    print(f"      –¢–µ–∫—Å—Ç: {comment.text}")
                    print(f"      –î–∞—Ç–∞: {comment.created_at}")
                    print(f"      –ü–æ—Å—Ç ID: {comment.post_id}")
                    print(
                        f"      –ì—Ä—É–ø–ø–∞: {comment.group.name if comment.group else 'N/A'}"
                    )

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                    try:
                        comment_with_keywords = (
                            await parser_service.get_comment_with_keywords(
                                comment.id
                            )
                        )
                        if (
                            comment_with_keywords
                            and comment_with_keywords.keyword_matches
                        ):
                            print("      –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
                            for match in comment_with_keywords.keyword_matches:
                                print(
                                    f"        - {match.keyword.word} (–ø–æ–∑–∏—Ü–∏—è: {match.position})"
                                )
                    except Exception as e:
                        print(
                            f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}"
                        )
            else:
                print("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å '–≥–∏–≤–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            import traceback

            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_check_database())
