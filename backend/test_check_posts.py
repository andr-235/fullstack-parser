#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
"""

import asyncio
from app.services.vk_api_service import VKAPIService
from app.core.config import settings


async def test_check_posts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ...")

    async with VKAPIService(
        token=settings.vk.access_token, api_version=settings.vk.api_version
    ) as vk_service:

        group_id = 43377172  # –†–ò–ê –ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω
        target_post_id = 126563  # –ü–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "–≥–∏–≤–∏"

        print(f"\nüìã –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–æ—Å—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {group_id}")
        try:
            posts = await vk_service.get_group_posts(
                group_id=group_id, count=20
            )
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

            # –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –ø–æ—Å—Ç
            target_post = None
            for i, post in enumerate(posts, 1):
                post_id = post.get("id")
                comments_count = post.get("comments", {}).get("count", 0)
                print(
                    f"{i:2d}. –ü–æ—Å—Ç ID: {post_id}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}"
                )

                if post_id == target_post_id:
                    target_post = post
                    print(f"    ‚≠ê –ù–ê–ô–î–ï–ù –¶–ï–õ–ï–í–û–ô –ü–û–°–¢!")
                    print(f"    –¢–µ–∫—Å—Ç: {post.get('text', '')[:100]}...")

            if target_post:
                print(
                    f"\n‚úÖ –ü–æ—Å—Ç {target_post_id} –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö {len(posts)} –ø–æ—Å—Ç–∞—Ö!"
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É
                print(f"\nüí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É {target_post_id}")
                try:
                    comments = await vk_service.get_post_comments(
                        owner_id=group_id,  # –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
                        post_id=target_post_id,
                        count=10,
                    )
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")

                    for i, comment in enumerate(comments, 1):
                        print(f"   {i}. ID: {comment.get('id')}")
                        print(f"      –ê–≤—Ç–æ—Ä: {comment.get('from_id')}")
                        print(
                            f"      –¢–µ–∫—Å—Ç: {comment.get('text', '')[:50]}..."
                        )
                        print(f"      –î–∞—Ç–∞: {comment.get('date')}")
                        print()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            else:
                print(
                    f"\n‚ùå –ü–æ—Å—Ç {target_post_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–≤—ã—Ö {len(posts)} –ø–æ—Å—Ç–∞—Ö"
                )
                print(
                    f"   –î–∏–∞–ø–∞–∑–æ–Ω ID –ø–æ—Å—Ç–æ–≤: {posts[-1].get('id')} - {posts[0].get('id')}"
                )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            import traceback

            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_check_posts())
