#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ Domain Events
–ë–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ–≥–æ API
"""

import asyncio
import sys
import os
from datetime import datetime
from typing import Dict, Any
from uuid import uuid4

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


class DomainEvent:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Domain Event –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, aggregate_id: Any, event_version: int = 1):
        self.aggregate_id = aggregate_id
        self.event_id = str(uuid4())
        self.occurred_at = datetime.utcnow()
        self.event_version = event_version
        self._frozen = False

    @property
    def event_type(self) -> str:
        return self.__class__.__name__

    def to_dict(self) -> Dict[str, Any]:
        return {
            "event_id": self.event_id,
            "event_type": self.event_type,
            "aggregate_id": str(self.aggregate_id),
            "occurred_at": self.occurred_at.isoformat(),
            "event_version": self.event_version,
            "event_data": self._get_event_data(),
        }

    def _get_event_data(self) -> Dict[str, Any]:
        data = {}
        for attr_name in dir(self):
            if not attr_name.startswith("_") and attr_name not in [
                "event_type",
                "to_dict",
                "aggregate_id",
                "event_id",
                "occurred_at",
                "event_version",
                "_frozen",
            ]:
                value = getattr(self, attr_name)
                if not callable(value):
                    data[attr_name] = value
        return data

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "DomainEvent":
        event = cls.__new__(cls)
        event.event_id = data["event_id"]
        event.aggregate_id = data["aggregate_id"]
        event.occurred_at = datetime.fromisoformat(data["occurred_at"])
        event.event_version = data.get("event_version", 1)
        event._frozen = True

        event_data = data.get("event_data", {})
        for key, value in event_data.items():
            setattr(event, key, value)

        return event


class DomainEventPublisher:
    """Publisher –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self._handlers: Dict[str, list] = {}
        self._is_processing = False

    def subscribe(self, event_type: str, handler):
        if event_type not in self._handlers:
            self._handlers[event_type] = []
        self._handlers[event_type].append(handler)

    async def publish(self, event: DomainEvent):
        if self._is_processing:
            return

        try:
            self._is_processing = True
            handlers = self._handlers.get(event.event_type, [])

            if not handlers:
                return

            for handler in handlers:
                try:
                    await handler(event)
                except Exception as e:
                    print(f"Error in handler: {e}")

        finally:
            self._is_processing = False

    async def health_check(self) -> Dict[str, Any]:
        return {
            "status": "healthy",
            "subscribed_event_types": len(self._handlers),
            "total_handlers": sum(
                len(handlers) for handlers in self._handlers.values()
            ),
            "is_processing": self._is_processing,
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
domain_event_publisher = DomainEventPublisher()


class TestUserEvent(DomainEvent):
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, user_id: int, email: str, action: str):
        super().__init__(user_id)
        self.email = email
        self.action = action

    def _get_event_data(self) -> Dict[str, Any]:
        return {"email": self.email, "action": self.action}


class TestSettingsEvent(DomainEvent):
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def __init__(self, section: str, changes: Dict[str, Any]):
        super().__init__(section)
        self.section = section
        self.changes = changes

    def _get_event_data(self) -> Dict[str, Any]:
        return {"section": self.section, "changes": self.changes}


class TestHandler:
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""

    def __init__(self):
        self.events = []

    async def handle_user_event(self, event):
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.email}: {event.action}")
        self.events.append(event)
        await asyncio.sleep(0.001)

    async def handle_settings_event(self, event):
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {event.section}: {len(event.changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        self.events.append(event)
        await asyncio.sleep(0.001)


async def test_basic_events():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –°–û–ë–´–¢–ò–ô...")

    handler = TestHandler()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    domain_event_publisher.subscribe(
        "TestUserEvent", handler.handle_user_event
    )
    domain_event_publisher.subscribe(
        "TestSettingsEvent", handler.handle_settings_event
    )

    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    user_event = TestUserEvent(1, "test@example.com", "created")
    settings_event = TestSettingsEvent("vk_api", {"token": "new_token"})

    # –ü—É–±–ª–∏–∫—É–µ–º
    await domain_event_publisher.publish(user_event)
    await domain_event_publisher.publish(settings_event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º
    if len(handler.events) == 2:
        print("‚úÖ –û–±–∞ —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return True
    else:
        print(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(handler.events)}")
        return False


async def test_serialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò...")

    original = TestUserEvent(123, "serialize@test.com", "test")
    event_dict = original.to_dict()
    restored = TestUserEvent.from_dict(event_dict)

    if (
        restored.aggregate_id == original.aggregate_id
        and restored.email == original.email
        and restored.action == original.action
    ):
        print("‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ùå –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return False


async def test_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´...")

    health = await domain_event_publisher.health_check()
    if health["status"] == "healthy":
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
        return True
    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞!")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DOMAIN EVENTS")
    print("=" * 50)

    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è", test_basic_events),
        ("–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_serialization),
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", test_health),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\n{'='*5} {test_name.upper()} {'='*5}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False))

    # –û—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")

    passed = sum(1 for _, result in results if result)
    failed = sum(1 for _, result in results if not result)

    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test_name}")

    print(f"\nüìä –ü—Ä–æ—à–ª–æ: {passed}/{passed + failed}")

    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Domain Events –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        return 0
    else:
        print(f"\n‚ùå {failed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
