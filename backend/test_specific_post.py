#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "–≥–∏–≤–∏"
"""

import asyncio
from app.services.vk_api_service import VKAPIService
from app.core.config import settings


async def test_specific_post():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º '–≥–∏–≤–∏'"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º '–≥–∏–≤–∏'...")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL: https://vk.com/wall-43377172_126563
    group_id = 43377172
    post_id = 126563

    async with VKAPIService(
        token=settings.vk.access_token, api_version=settings.vk.api_version
    ) as vk_service:

        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        print(f"\nüìã –¢–µ—Å—Ç 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ {group_id}")
        try:
            group_info = await vk_service.get_group_info(group_id)
            if group_info:
                print(f"‚úÖ –ì—Ä—É–ø–ø–∞: {group_info.get('name', 'N/A')}")
                print(f"   ID: {group_info.get('id', 'N/A')}")
                print(
                    f"   Screen name: {group_info.get('screen_name', 'N/A')}"
                )
            else:
                print("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        print(f"\nüìù –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ {post_id}")
        try:
            posts = await vk_service.get_group_posts(
                group_id=group_id, count=100
            )

            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
            target_post = None
            for post in posts:
                if post.get("id") == post_id:
                    target_post = post
                    break

            if target_post:
                print(f"‚úÖ –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω!")
                print(f"   ID: {target_post.get('id')}")
                print(f"   –î–∞—Ç–∞: {target_post.get('date')}")
                print(f"   –¢–µ–∫—Å—Ç: {target_post.get('text', '')[:200]}...")
                print(
                    f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {target_post.get('comments', {}).get('count', 0)}"
                )
                print(
                    f"   –õ–∞–π–∫–æ–≤: {target_post.get('likes', {}).get('count', 0)}"
                )
            else:
                print(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –ø–æ—Å—Ç–∞—Ö")
                print(
                    f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—ã: {[p.get('id') for p in posts[:10]]}"
                )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É
        print(f"\nüí¨ –¢–µ—Å—Ç 3: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É {post_id}")
        try:
            comments = await vk_service.get_all_post_comments(
                owner_id=-group_id,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø
                post_id=post_id,
            )

            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")

            if comments:
                print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
                for i, comment in enumerate(comments[:5], 1):
                    print(f"   {i}. ID: {comment.get('id')}")
                    print(f"      –ê–≤—Ç–æ—Ä: {comment.get('from_id')}")
                    print(f"      –î–∞—Ç–∞: {comment.get('date')}")
                    print(f"      –¢–µ–∫—Å—Ç: {comment.get('text', '')[:100]}...")
                    print(
                        f"      –õ–∞–π–∫–æ–≤: {comment.get('likes', {}).get('count', 0)}"
                    )
                    print()

                # –ü–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å "–≥–∏–≤–∏"
                keyword = "–≥–∏–≤–∏"
                matching_comments = [
                    c for c in comments if keyword in c.get("text", "").lower()
                ]

                if matching_comments:
                    print(
                        f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '{keyword}': {len(matching_comments)}"
                    )
                    for i, comment in enumerate(matching_comments, 1):
                        print(f"   {i}. ID: {comment.get('id')}")
                        print(f"      –ê–≤—Ç–æ—Ä: {comment.get('from_id')}")
                        print(f"      –¢–µ–∫—Å—Ç: {comment.get('text', '')}")
                        print()
                else:
                    print(f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback

            traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_specific_post())
