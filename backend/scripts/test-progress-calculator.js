#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ProgressCalculator
 * –ó–∞–ø—É—Å–∫: node scripts/test-progress-calculator.js
 */

const { ProgressCalculator } = require('../dist/services/progressCalculator.js');

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProgressCalculator\n');

// –¢–µ—Å—Ç 1: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
console.log('1Ô∏è‚É£ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã processed > total');
console.log('‚îÅ'.repeat(50));

const postsCount = 100;
const commentsCount = 1500;

// –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
const oldTotal = Math.max(postsCount * 10, commentsCount);
const oldPercentage = Math.round((commentsCount / oldTotal) * 100);
console.log(`‚ùå –°—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${oldPercentage}% (${commentsCount}/${oldTotal})`);

if (commentsCount > postsCount * 10) {
  console.log('   –ü—Ä–æ–±–ª–µ–º–∞: –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ 100%');
}

// –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
const newMetrics = {
  groupsTotal: 10,
  groupsProcessed: 10,
  postsTotal: postsCount,
  postsProcessed: postsCount,
  commentsTotal: commentsCount,
  commentsProcessed: commentsCount,
  estimatedCommentsPerPost: 15
};

const newResult = ProgressCalculator.calculateProgress(newMetrics);
console.log(`‚úÖ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${newResult.percentage}% (${newResult.processed}/${newResult.total})`);
console.log(`   –§–∞–∑–∞: ${newResult.phase}, –≤—Å–µ —Ñ–∞–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n`);

// –¢–µ—Å—Ç 2: –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
console.log('2Ô∏è‚É£ –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
console.log('‚îÅ'.repeat(50));

const steps = [
  { desc: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã', groups: 0, posts: 0, comments: 0 },
  { desc: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø...', groups: 3, posts: 0, comments: 0 },
  { desc: '–ì—Ä—É–ø–ø—ã –≥–æ—Ç–æ–≤—ã', groups: 10, posts: 0, comments: 0 },
  { desc: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...', groups: 10, posts: 50, comments: 0 },
  { desc: '–ü–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã', groups: 10, posts: 100, comments: 0 },
  { desc: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...', groups: 10, posts: 100, comments: 750 },
  { desc: '–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', groups: 10, posts: 100, comments: 1500 }
];

steps.forEach((step, index) => {
  const metrics = {
    groupsTotal: 10,
    groupsProcessed: step.groups,
    postsTotal: 100,
    postsProcessed: step.posts,
    commentsTotal: 1500,
    commentsProcessed: step.comments,
    estimatedCommentsPerPost: 15
  };

  const result = ProgressCalculator.calculateProgress(metrics);
  const progressBar = '‚ñà'.repeat(Math.floor(result.percentage / 5)) +
                      '‚ñë'.repeat(20 - Math.floor(result.percentage / 5));

  console.log(`${index + 1}. ${step.desc}`);
  console.log(`   ${progressBar} ${result.percentage}% (${result.phase})`);
});

console.log();

// –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
console.log('3Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
console.log('‚îÅ'.repeat(50));

const badMetrics = {
  groupsTotal: 5,
  groupsProcessed: 10,  // –±–æ–ª—å—à–µ total
  postsTotal: 100,
  postsProcessed: 150,  // –±–æ–ª—å—à–µ total
  commentsTotal: 1500,
  commentsProcessed: 2000,  // –±–æ–ª—å—à–µ total
  estimatedCommentsPerPost: 15
};

const errors = ProgressCalculator.validateMetrics(badMetrics);
console.log(`–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫:`);
errors.forEach(error => console.log(`  ‚ùå ${error}`));

const badResult = ProgressCalculator.calculateProgress(badMetrics);
console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å —Å –æ—à–∏–±–∫–∞–º–∏: ${badResult.percentage}% (–Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%)\n`);

// –¢–µ—Å—Ç 4: –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç—ã
console.log('4Ô∏è‚É£ –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç—ã');
console.log('‚îÅ'.repeat(50));

const estimates = [
  { desc: '2 –≥—Ä—É–ø–ø—ã', data: { groups: [{}, {}] } },
  { desc: '5 –≥—Ä—É–ø–ø', data: { groupIds: [1, 2, 3, 4, 5] } },
  { desc: '10 –≥—Ä—É–ø–ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º', data: { groupIds: [1,2,3,4,5,6,7,8,9,10], maxComments: 3000 } },
  { desc: '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ', data: { groups: [] } }
];

estimates.forEach(test => {
  const estimate = ProgressCalculator.estimateTotal(test.data);
  console.log(`${test.desc}: ~${estimate.toLocaleString()} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
});

console.log();

// –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
console.log('5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
console.log('‚îÅ'.repeat(50));

const iterations = 10000;
const testMetrics = {
  groupsTotal: 50,
  groupsProcessed: 25,
  postsTotal: 2500,
  postsProcessed: 1250,
  commentsTotal: 37500,
  commentsProcessed: 18750,
  estimatedCommentsPerPost: 15
};

console.time('ProgressCalculator.calculateProgress');
for (let i = 0; i < iterations; i++) {
  ProgressCalculator.calculateProgress(testMetrics);
}
console.timeEnd('ProgressCalculator.calculateProgress');
console.log(`${iterations.toLocaleString()} –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n`);

// –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
console.log('‚îÅ'.repeat(50));
console.log('üéØ –ü—Ä–æ–±–ª–µ–º–∞ processed > total —Ä–µ—à–µ–Ω–∞');
console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ–≥–¥–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100%');
console.log('‚öñÔ∏è –í–µ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å');
console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
console.log('‚ö° –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π');