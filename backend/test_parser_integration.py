#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–æ–≤—ã–º VK API —Å–µ—Ä–≤–∏—Å–æ–º
"""

import asyncio
from app.services.vk_api_service import VKAPIService
from app.services.parser_service import ParserService
from app.core.database import AsyncSessionLocal
from app.core.config import settings


async def test_parser_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–æ–≤—ã–º VK API —Å–µ—Ä–≤–∏—Å–æ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω–æ–≤—ã–º VK API —Å–µ—Ä–≤–∏—Å–æ–º...")

    async with AsyncSessionLocal() as db:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π VK API —Å–µ—Ä–≤–∏—Å
        vk_service = VKAPIService(
            token=settings.vk.access_token, api_version=settings.vk.api_version
        )

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å–µ—Ä–≤–∏—Å
        parser_service = ParserService(db=db, vk_service=vk_service)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        group_id = 43377172  # –†–ò–ê –ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω
        keywords = ["–≥–∏–≤–∏"]  # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        print(
            f"\nüìã –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group_id} —Å –ø–æ–∏—Å–∫–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ {keywords}"
        )
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
            result = await parser_service.parse_group_posts(
                group_id=group_id,
                max_posts_count=5,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
                force_reparse=False,
            )

            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {result.posts_processed}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result.comments_found}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result.keyword_matches}")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds:.2f} —Å–µ–∫")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "–≥–∏–≤–∏"
            if result.keyword_matches > 0:
                print(f"\nüîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–≥–∏–≤–∏'!")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                comments = await parser_service.filter_comments(
                    search_params={"keywords": ["–≥–∏–≤–∏"]},
                    pagination={"page": 1, "size": 10},
                )

                if comments.items:
                    print(
                        f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–≥–∏–≤–∏': {len(comments.items)}"
                    )
                    for i, comment in enumerate(comments.items[:3], 1):
                        print(f"   {i}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment.id}")
                        print(f"      –ê–≤—Ç–æ—Ä: {comment.author_id}")
                        print(f"      –¢–µ–∫—Å—Ç: {comment.text[:100]}...")
                        print(f"      –î–∞—Ç–∞: {comment.date}")
                        print()
                else:
                    print(
                        "   ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å '–≥–∏–≤–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
            else:
                print("   ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–≥–∏–≤–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback

            traceback.print_exc()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º VK —Å–µ—Ä–≤–∏—Å
        await vk_service.close()


if __name__ == "__main__":
    asyncio.run(test_parser_integration())
