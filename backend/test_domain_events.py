#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Domain Events —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.api.v1.infrastructure.events.domain_event_publisher import (
    DomainEventPublisher,
    domain_event_publisher,
    subscribe_to,
)


class TestEventHandler:
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self):
        self.received_events = []

    async def handle_user_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"üìß –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {event.event_type}")
        print(f"   ID: {event.aggregate_id}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {event.to_dict()}")
        self.received_events.append(event)
        await asyncio.sleep(0.01)  # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    async def handle_settings_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print(f"‚öôÔ∏è –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï –ù–ê–°–¢–†–û–ï–ö: {event.event_type}")
        print(f"   –°–µ–∫—Ü–∏—è: {getattr(event, 'section', 'N/A')}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {event.to_dict()}")
        self.received_events.append(event)
        await asyncio.sleep(0.01)

    async def handle_vk_api_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π VK API"""
        print(f"üîó –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï VK API: {event.event_type}")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {getattr(event, 'data_type', 'N/A')}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {event.to_dict()}")
        self.received_events.append(event)
        await asyncio.sleep(0.01)


async def test_domain_events():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø DOMAIN EVENTS –°–ò–°–¢–ï–ú–´")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = TestEventHandler()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    print("üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô...")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    try:
        from app.api.v1.infrastructure.events.user_events import (
            UserCreatedEvent,
            UserUpdatedEvent,
            UserDeletedEvent,
            UserAuthenticatedEvent,
        )
        from app.api.v1.infrastructure.events.settings_events import (
            SettingsUpdatedEvent,
            SettingsResetEvent,
        )
        from app.api.v1.infrastructure.events.vk_api_events import (
            VKAPIDataFetchedEvent,
            VKAPITokenValidationEvent,
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        domain_event_publisher.subscribe(
            "UserCreatedEvent", handler.handle_user_event
        )
        domain_event_publisher.subscribe(
            "UserUpdatedEvent", handler.handle_user_event
        )
        domain_event_publisher.subscribe(
            "UserDeletedEvent", handler.handle_user_event
        )
        domain_event_publisher.subscribe(
            "UserAuthenticatedEvent", handler.handle_user_event
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        domain_event_publisher.subscribe(
            "SettingsUpdatedEvent", handler.handle_settings_event
        )
        domain_event_publisher.subscribe(
            "SettingsResetEvent", handler.handle_settings_event
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è VK API
        domain_event_publisher.subscribe(
            "VKAPIDataFetchedEvent", handler.handle_vk_api_event
        )
        domain_event_publisher.subscribe(
            "VKAPITokenValidationEvent", handler.handle_vk_api_event
        )

        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π
    print("\nüì§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –°–û–ë–´–¢–ò–ô...")

    test_events = []

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_created = UserCreatedEvent(
        user_id=1,
        email="test@example.com",
        full_name="Test User",
        is_superuser=False,
    )
    test_events.append(("UserCreatedEvent", user_created))

    user_updated = UserUpdatedEvent(
        user_id=1,
        updated_fields=["email", "full_name"],
        old_values={"email": "old@example.com"},
        new_values={"email": "test@example.com"},
        updated_by="admin",
    )
    test_events.append(("UserUpdatedEvent", user_updated))

    user_authenticated = UserAuthenticatedEvent(
        user_id=1,
        email="test@example.com",
        login_method="password",
        ip_address="127.0.0.1",
    )
    test_events.append(("UserAuthenticatedEvent", user_authenticated))

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_updated = SettingsUpdatedEvent(
        section="vk_api",
        updated_keys=["access_token", "api_version"],
        old_values={"api_version": "5.130"},
        new_values={"api_version": "5.131"},
        updated_by="admin",
    )
    test_events.append(("SettingsUpdatedEvent", settings_updated))

    settings_reset = SettingsResetEvent(
        reset_sections=["vk_api", "monitoring"],
        reset_by="admin",
        reason="manual",
    )
    test_events.append(("SettingsResetEvent", settings_reset))

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è VK API
    data_fetched = VKAPIDataFetchedEvent(
        data_type="posts",
        object_id=12345,
        items_count=20,
        total_count=100,
        fetch_time=0.5,
    )
    test_events.append(("VKAPIDataFetchedEvent", data_fetched))

    token_validation = VKAPITokenValidationEvent(
        token_valid=True,
        user_id=123456,
        permissions=["wall", "groups"],
        validation_error=None,
    )
    test_events.append(("VKAPITokenValidationEvent", token_validation))

    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏—è
    print("\nüì° –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –°–û–ë–´–¢–ò–ô...")

    for event_name, event in test_events:
        try:
            print(f"\nüîÑ –ü—É–±–ª–∏–∫—É–µ–º: {event_name}")
            await domain_event_publisher.publish(event)
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {event_name}: {e}")
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(test_events)}")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: {len(handler.received_events)}")
    print(
        f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(len(handler.received_events) / len(test_events)) * 100:.1f}%"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    print("\nüè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø DOMAIN EVENTS –°–ò–°–¢–ï–ú–´...")
    health = await domain_event_publisher.health_check()
    print(f"   –°—Ç–∞—Ç—É—Å: {health.get('status', 'unknown')}")
    print(
        f"   –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π: {health.get('subscribed_event_types', 0)}"
    )
    print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {health.get('total_handlers', 0)}")
    print(f"   Middleware: {health.get('middleware_count', 0)}")
    print(f"   –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {health.get('is_processing', False)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã DDD —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í DDD –°–ï–†–í–ò–°–û–í...")
    try:
        from app.api.v1.application.user_service import UserService
        from app.api.v1.application.settings_service import SettingsService
        from app.api.v1.application.vk_api_service import VKAPIService
        from app.api.v1.application.comment_service import CommentService
        from app.api.v1.application.group_service import GroupService
        from app.api.v1.application.keyword_service_migration import (
            KeywordService,
        )

        print("‚úÖ –í—Å–µ DDD —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        services_ok = True
    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ DDD —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        services_ok = False

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

    all_tests_passed = (
        len(handler.received_events) == len(test_events)
        and health.get("status") == "healthy"
        and services_ok
    )

    if all_tests_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Domain Events —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ DDD —Å–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = await test_domain_events()
        if success:
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            print("üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
            return 0
        else:
            print("\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
            return 1
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
