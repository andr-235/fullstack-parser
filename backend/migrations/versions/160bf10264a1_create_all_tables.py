"""create all tables

Revision ID: 160bf10264a1
Revises: 
Create Date: 2025-07-08 10:58:23.251958

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '160bf10264a1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('keywords',
    sa.Column('word', sa.String(length=200), nullable=False, comment='Ключевое слово'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='Категория ключевого слова'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание ключевого слова'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Активно ли ключевое слово'),
    sa.Column('is_case_sensitive', sa.Boolean(), nullable=False, comment='Учитывать регистр'),
    sa.Column('is_whole_word', sa.Boolean(), nullable=False, comment='Искать только целые слова'),
    sa.Column('total_matches', sa.Integer(), nullable=False, comment='Общее количество совпадений'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_keywords_id'), 'keywords', ['id'], unique=False)
    op.create_index(op.f('ix_keywords_word'), 'keywords', ['word'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('vk_groups',
    sa.Column('vk_id', sa.Integer(), nullable=False, comment='ID группы в ВК'),
    sa.Column('screen_name', sa.String(length=100), nullable=False, comment='Короткое имя группы (@group_name)'),
    sa.Column('name', sa.String(length=200), nullable=False, comment='Название группы'),
    sa.Column('description', sa.Text(), nullable=True, comment='Описание группы'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Активен ли мониторинг группы'),
    sa.Column('max_posts_to_check', sa.Integer(), nullable=False, comment='Максимум постов для проверки'),
    sa.Column('last_parsed_at', sa.DateTime(), nullable=True, comment='Когда последний раз парсили группу'),
    sa.Column('total_posts_parsed', sa.Integer(), nullable=False, comment='Общее количество обработанных постов'),
    sa.Column('total_comments_found', sa.Integer(), nullable=False, comment='Общее количество найденных комментариев'),
    sa.Column('members_count', sa.Integer(), nullable=True, comment='Количество участников'),
    sa.Column('is_closed', sa.Boolean(), nullable=False, comment='Закрытая ли группа'),
    sa.Column('photo_url', sa.String(length=500), nullable=True, comment='URL аватара группы'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vk_groups_id'), 'vk_groups', ['id'], unique=False)
    op.create_index(op.f('ix_vk_groups_vk_id'), 'vk_groups', ['vk_id'], unique=True)
    op.create_table('vk_posts',
    sa.Column('vk_id', sa.Integer(), nullable=False, comment='ID поста в ВК'),
    sa.Column('vk_owner_id', sa.Integer(), nullable=False, comment='ID владельца поста'),
    sa.Column('text', sa.Text(), nullable=True, comment='Текст поста'),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('published_at', sa.DateTime(), nullable=False, comment='Дата публикации поста'),
    sa.Column('likes_count', sa.Integer(), nullable=True, comment='Количество лайков'),
    sa.Column('reposts_count', sa.Integer(), nullable=True, comment='Количество репостов'),
    sa.Column('comments_count', sa.Integer(), nullable=True, comment='Количество комментариев'),
    sa.Column('views_count', sa.Integer(), nullable=True, comment='Количество просмотров'),
    sa.Column('is_parsed', sa.Boolean(), nullable=True, comment='Обработан ли пост'),
    sa.Column('parsed_at', sa.DateTime(), nullable=True, comment='Когда был обработан'),
    sa.Column('has_attachments', sa.Boolean(), nullable=True, comment='Есть ли вложения'),
    sa.Column('attachments_info', sa.Text(), nullable=True, comment='JSON с информацией о вложениях'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.ForeignKeyConstraint(['group_id'], ['vk_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vk_posts_id'), 'vk_posts', ['id'], unique=False)
    op.create_index(op.f('ix_vk_posts_vk_id'), 'vk_posts', ['vk_id'], unique=False)
    op.create_table('vk_comments',
    sa.Column('vk_id', sa.Integer(), nullable=False, comment='ID комментария в ВК'),
    sa.Column('text', sa.Text(), nullable=False, comment='Текст комментария'),
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=False, comment='ID автора комментария'),
    sa.Column('author_name', sa.String(length=200), nullable=True, comment='Имя автора'),
    sa.Column('author_screen_name', sa.String(length=100), nullable=True, comment='Короткое имя автора'),
    sa.Column('author_photo_url', sa.String(length=500), nullable=True, comment='URL фото автора'),
    sa.Column('published_at', sa.DateTime(), nullable=False, comment='Дата публикации комментария'),
    sa.Column('likes_count', sa.Integer(), nullable=True, comment='Количество лайков'),
    sa.Column('parent_comment_id', sa.Integer(), nullable=True, comment='ID родительского комментария'),
    sa.Column('has_attachments', sa.Boolean(), nullable=True, comment='Есть ли вложения'),
    sa.Column('attachments_info', sa.Text(), nullable=True, comment='JSON с информацией о вложениях'),
    sa.Column('is_processed', sa.Boolean(), nullable=True, comment='Обработан ли комментарий'),
    sa.Column('processed_at', sa.DateTime(), nullable=True, comment='Когда был обработан'),
    sa.Column('matched_keywords_count', sa.Integer(), nullable=True, comment='Количество найденных ключевых слов'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['vk_comments.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['vk_posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vk_comments_id'), 'vk_comments', ['id'], unique=False)
    op.create_index(op.f('ix_vk_comments_vk_id'), 'vk_comments', ['vk_id'], unique=False)
    op.create_table('comment_keyword_matches',
    sa.Column('comment_id', sa.Integer(), nullable=False),
    sa.Column('keyword_id', sa.Integer(), nullable=False),
    sa.Column('matched_text', sa.String(length=500), nullable=True, comment='Найденный текст'),
    sa.Column('match_position', sa.Integer(), nullable=True, comment='Позиция совпадения в тексте'),
    sa.Column('match_context', sa.String(length=1000), nullable=True, comment='Контекст вокруг совпадения'),
    sa.Column('found_at', sa.DateTime(timezone=True), nullable=False, comment='Когда найдено совпадение'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.ForeignKeyConstraint(['comment_id'], ['vk_comments.id'], ),
    sa.ForeignKeyConstraint(['keyword_id'], ['keywords.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comment_keyword_matches_id'), 'comment_keyword_matches', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_comment_keyword_matches_id'), table_name='comment_keyword_matches')
    op.drop_table('comment_keyword_matches')
    op.drop_index(op.f('ix_vk_comments_vk_id'), table_name='vk_comments')
    op.drop_index(op.f('ix_vk_comments_id'), table_name='vk_comments')
    op.drop_table('vk_comments')
    op.drop_index(op.f('ix_vk_posts_vk_id'), table_name='vk_posts')
    op.drop_index(op.f('ix_vk_posts_id'), table_name='vk_posts')
    op.drop_table('vk_posts')
    op.drop_index(op.f('ix_vk_groups_vk_id'), table_name='vk_groups')
    op.drop_index(op.f('ix_vk_groups_id'), table_name='vk_groups')
    op.drop_table('vk_groups')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_keywords_word'), table_name='keywords')
    op.drop_index(op.f('ix_keywords_id'), table_name='keywords')
    op.drop_table('keywords')
    # ### end Alembic commands ###
