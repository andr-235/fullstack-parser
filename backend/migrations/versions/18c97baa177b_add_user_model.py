"""Add User model

Revision ID: 18c97baa177b
Revises: 9078ccbec2e7
Create Date: 2025-07-07 13:52:46.047175

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '18c97baa177b'
down_revision: Union[str, None] = '9078ccbec2e7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время создания записи'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Время последнего обновления записи'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)

    with op.batch_alter_table('comment_keyword_matches', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('keywords', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('vk_comments', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('vk_groups', schema=None) as batch_op:
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_comment='Активен ли мониторинг группы')
        batch_op.alter_column('max_posts_to_check',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_comment='Максимум постов для проверки')
        batch_op.alter_column('total_posts_parsed',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_comment='Общее количество обработанных постов')
        batch_op.alter_column('total_comments_found',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_comment='Общее количество найденных комментариев')
        batch_op.alter_column('is_closed',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_comment='Закрытая ли группа')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('vk_posts', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vk_posts', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('vk_groups', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('is_closed',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_comment='Закрытая ли группа')
        batch_op.alter_column('total_comments_found',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_comment='Общее количество найденных комментариев')
        batch_op.alter_column('total_posts_parsed',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_comment='Общее количество обработанных постов')
        batch_op.alter_column('max_posts_to_check',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_comment='Максимум постов для проверки')
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_comment='Активен ли мониторинг группы')

    with op.batch_alter_table('vk_comments', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('keywords', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('comment_keyword_matches', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время последнего обновления записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Время создания записи',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ### 