"""Modernize SQLAlchemy models and add Keyword

Revision ID: 9078ccbec2e7
Revises: 
Create Date: 2025-07-06 10:46:23.049901

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9078ccbec2e7"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("comment_keyword_matches", schema=None) as batch_op:
        batch_op.alter_column(
            "found_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            nullable=False,
            existing_comment="Когда найдено совпадение",
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        )

    with op.batch_alter_table("keywords", schema=None) as batch_op:
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_comment="Активно ли ключевое слово",
        )
        batch_op.alter_column(
            "is_case_sensitive",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_comment="Учитывать регистр",
        )
        batch_op.alter_column(
            "is_whole_word",
            existing_type=sa.BOOLEAN(),
            nullable=False,
            existing_comment="Искать только целые слова",
        )
        batch_op.alter_column(
            "total_matches",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_comment="Общее количество совпадений",
        )
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        )

    with op.batch_alter_table("vk_comments", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        )

    with op.batch_alter_table("vk_groups", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        )

    with op.batch_alter_table("vk_posts", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=postgresql.TIMESTAMP(),
            type_=sa.DateTime(timezone=True),
            existing_nullable=False,
            server_default=sa.func.now(),
            onupdate=sa.func.now(),
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("vk_posts", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
            onupdate=None,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
        )

    with op.batch_alter_table("vk_groups", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
            onupdate=None,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
        )

    with op.batch_alter_table("vk_comments", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
            onupdate=None,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
        )

    with op.batch_alter_table("keywords", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
            onupdate=None,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
        )
        batch_op.alter_column(
            "total_matches",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_comment="Общее количество совпадений",
        )
        batch_op.alter_column(
            "is_whole_word",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_comment="Искать только целые слова",
        )
        batch_op.alter_column(
            "is_case_sensitive",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_comment="Учитывать регистр",
        )
        batch_op.alter_column(
            "is_active",
            existing_type=sa.BOOLEAN(),
            nullable=True,
            existing_comment="Активно ли ключевое слово",
        )

    with op.batch_alter_table("comment_keyword_matches", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
            onupdate=None,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            existing_nullable=False,
            server_default=None,
        )
        batch_op.alter_column(
            "found_at",
            existing_type=sa.DateTime(timezone=True),
            type_=postgresql.TIMESTAMP(),
            nullable=True,
            existing_comment="Когда найдено совпадение",
        )

    # ### end Alembic commands ###
