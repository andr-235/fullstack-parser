/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è constraints –¥–æ allowNull: false
 * –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –º–æ–¥–µ–ª—è–º–∏
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º NOT NULL constraints
 */
module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ constraints –¥–æ NOT NULL...');

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ POSTS ===

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö posts
      console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã posts...');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è NULL –ø–æ–ª–µ–π
      await queryInterface.sequelize.query(`
        UPDATE posts
        SET
          vk_post_id = COALESCE(vk_post_id, 0),
          owner_id = COALESCE(owner_id, 0),
          group_id = COALESCE(group_id, 0),
          date = COALESCE(date, NOW()),
          text = COALESCE(text, ''),
          likes = COALESCE(likes, 0),
          "taskId" = COALESCE("taskId", 1)
        WHERE
          vk_post_id IS NULL OR
          owner_id IS NULL OR
          group_id IS NULL OR
          date IS NULL OR
          text IS NULL OR
          likes IS NULL OR
          "taskId" IS NULL;
      `, { transaction });

      // 2. –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraints –∫ posts
      const postConstraints = [
        { column: 'vk_post_id', type: Sequelize.INTEGER },
        { column: 'owner_id', type: Sequelize.INTEGER },
        { column: 'group_id', type: Sequelize.INTEGER },
        { column: 'date', type: Sequelize.DATE },
        { column: 'taskId', type: Sequelize.INTEGER }
      ];

      for (const constraint of postConstraints) {
        try {
          await queryInterface.changeColumn('posts', constraint.column, {
            type: constraint.type,
            allowNull: false
          }, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Constraint –¥–ª—è posts.${constraint.column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:`, error.message);
        }
      }

      // === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ COMMENTS ===

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—è—Ö comments
      console.log('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã comments...');

      await queryInterface.sequelize.query(`
        UPDATE comments
        SET
          vk_comment_id = COALESCE(vk_comment_id, 0),
          post_vk_id = COALESCE(post_vk_id, 0),
          owner_id = COALESCE(owner_id, 0),
          author_id = COALESCE(author_id, 0),
          author_name = COALESCE(author_name, 'Unknown'),
          date = COALESCE(date, NOW()),
          text = COALESCE(text, ''),
          likes = COALESCE(likes, 0)
        WHERE
          vk_comment_id IS NULL OR
          post_vk_id IS NULL OR
          owner_id IS NULL OR
          author_id IS NULL OR
          author_name IS NULL OR
          date IS NULL OR
          text IS NULL OR
          likes IS NULL;
      `, { transaction });

      // 4. –î–æ–±–∞–≤–ª—è–µ–º NOT NULL constraints –∫ comments
      const commentConstraints = [
        { column: 'vk_comment_id', type: Sequelize.INTEGER },
        { column: 'post_vk_id', type: Sequelize.INTEGER },
        { column: 'owner_id', type: Sequelize.INTEGER },
        { column: 'author_id', type: Sequelize.INTEGER },
        { column: 'author_name', type: Sequelize.STRING(255) },
        { column: 'date', type: Sequelize.DATE }
      ];

      for (const constraint of commentConstraints) {
        try {
          await queryInterface.changeColumn('comments', constraint.column, {
            type: constraint.type,
            allowNull: false
          }, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Constraint –¥–ª—è comments.${constraint.column} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:`, error.message);
        }
      }

      // === –î–û–ë–ê–í–õ–ï–ù–ò–ï FOREIGN KEY CONSTRAINTS ===

      // 5. –°–æ–∑–¥–∞–µ–º foreign key constraint –º–µ–∂–¥—É posts –∏ tasks (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        await queryInterface.addConstraint('posts', {
          fields: ['taskId'],
          type: 'foreign key',
          name: 'fk_posts_task_id',
          references: {
            table: 'tasks',
            field: 'id'
          },
          onDelete: 'CASCADE',
          onUpdate: 'CASCADE'
        }, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Foreign key constraint posts -> tasks —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      // === –î–û–ë–ê–í–õ–ï–ù–ò–ï CHECK CONSTRAINTS –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–• ===

      // 6. –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è posts
      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE posts
          ADD CONSTRAINT check_posts_vk_post_id_positive
          CHECK (vk_post_id >= 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è posts.vk_post_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE posts
          ADD CONSTRAINT check_posts_likes_non_negative
          CHECK (likes >= 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è posts.likes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      // 7. –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è comments
      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE comments
          ADD CONSTRAINT check_comments_vk_comment_id_positive
          CHECK (vk_comment_id >= 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è comments.vk_comment_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE comments
          ADD CONSTRAINT check_comments_likes_non_negative
          CHECK (likes >= 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è comments.likes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE comments
          ADD CONSTRAINT check_comments_author_name_not_empty
          CHECK (length(trim(author_name)) > 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è comments.author_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      // === –î–û–ë–ê–í–õ–ï–ù–ò–ï CHECK CONSTRAINTS –î–õ–Ø TASKS ===

      // 8. –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è tasks (–¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–æ–≤—ã–º –ø–æ–ª—è–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏)
      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE tasks
          ADD CONSTRAINT check_tasks_progress_range
          CHECK (progress >= 0 AND progress <= 100);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è tasks.progress —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE tasks
          ADD CONSTRAINT check_tasks_priority_range
          CHECK (priority >= 0 AND priority <= 10);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è tasks.priority —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      try {
        await queryInterface.sequelize.query(`
          ALTER TABLE tasks
          ADD CONSTRAINT check_tasks_execution_time_positive
          CHECK (execution_time IS NULL OR execution_time >= 0);
        `, { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  Check constraint –¥–ª—è tasks.executionTime —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', error.message);
      }

      // === –°–û–ó–î–ê–ù–ò–ï TRIGGERS –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø TIMESTAMP ===

      // 9. Trigger –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updatedAt
      await queryInterface.sequelize.query(`
        CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
          NEW."updatedAt" = CURRENT_TIMESTAMP;
          RETURN NEW;
        END;
        $$ language 'plpgsql';
      `, { transaction });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º trigger –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º
      const tablesForTrigger = ['tasks', 'posts', 'comments'];
      for (const tableName of tablesForTrigger) {
        try {
          await queryInterface.sequelize.query(`
            DROP TRIGGER IF EXISTS update_${tableName}_updated_at ON ${tableName};
            CREATE TRIGGER update_${tableName}_updated_at
              BEFORE UPDATE ON ${tableName}
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();
          `, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Trigger –¥–ª—è ${tableName} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω:`, error.message);
        }
      }

      await transaction.commit();
      console.log('‚úÖ –í—Å–µ constraints —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ NOT NULL');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ constraints:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('üîÑ –û—Ç–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è constraints...');

      // 1. –£–¥–∞–ª—è–µ–º triggers
      const tablesForTrigger = ['tasks', 'posts', 'comments'];
      for (const tableName of tablesForTrigger) {
        try {
          await queryInterface.sequelize.query(`
            DROP TRIGGER IF EXISTS update_${tableName}_updated_at ON ${tableName};
          `, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å trigger –¥–ª—è ${tableName}:`, error.message);
        }
      }

      // –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é trigger
      await queryInterface.sequelize.query(`
        DROP FUNCTION IF EXISTS update_updated_at_column();
      `, { transaction });

      // 2. –£–¥–∞–ª—è–µ–º check constraints
      const constraintsToRemove = [
        { table: 'posts', name: 'check_posts_vk_post_id_positive' },
        { table: 'posts', name: 'check_posts_likes_non_negative' },
        { table: 'comments', name: 'check_comments_vk_comment_id_positive' },
        { table: 'comments', name: 'check_comments_likes_non_negative' },
        { table: 'comments', name: 'check_comments_author_name_not_empty' },
        { table: 'tasks', name: 'check_tasks_progress_range' },
        { table: 'tasks', name: 'check_tasks_priority_range' },
        { table: 'tasks', name: 'check_tasks_execution_time_positive' }
      ];

      for (const constraint of constraintsToRemove) {
        try {
          await queryInterface.removeConstraint(constraint.table, constraint.name, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å constraint ${constraint.name}:`, error.message);
        }
      }

      // 3. –£–¥–∞–ª—è–µ–º foreign key constraint
      try {
        await queryInterface.removeConstraint('posts', 'fk_posts_task_id', { transaction });
      } catch (error) {
        console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å foreign key constraint:', error.message);
      }

      // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º allowNull: true –¥–ª—è –ø–æ–ª–µ–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é - –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ)
      console.log('‚ÑπÔ∏è  NOT NULL constraints –æ—Å—Ç–∞—é—Ç—Å—è - –æ—Ç–∫–∞—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö');

      await transaction.commit();
      console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ constraints –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ constraints:', error);
      throw error;
    }
  }
};