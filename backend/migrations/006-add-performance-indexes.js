/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö VK –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');

      // === –ò–ù–î–ï–ö–°–´ –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ TASKS ===

      // 1. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å—É (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
      await queryInterface.addIndex('tasks', {
        fields: ['status'],
        name: 'idx_tasks_status',
        using: 'btree'
      }, { transaction });

      // 2. –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á (status + priority + createdAt)
      await queryInterface.addIndex('tasks', {
        fields: ['status', 'priority', 'createdAt'],
        name: 'idx_tasks_priority_queue',
        using: 'btree'
      }, { transaction });

      // 3. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á
      await queryInterface.addIndex('tasks', {
        fields: ['type'],
        name: 'idx_tasks_type',
        using: 'btree'
      }, { transaction });

      // 4. –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (type + status)
      await queryInterface.addIndex('tasks', {
        fields: ['type', 'status'],
        name: 'idx_tasks_type_status',
        using: 'btree'
      }, { transaction });

      // 5. –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç–æ –Ω—É–∂–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è)
      await queryInterface.addIndex('tasks', {
        fields: ['createdAt'],
        name: 'idx_tasks_created_at',
        using: 'btree'
      }, { transaction });

      // 6. –ß–∞—Å—Ç–∏—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (—ç–∫–æ–Ω–æ–º–∏—Ç –º–µ—Å—Ç–æ)
      await queryInterface.sequelize.query(`
        CREATE INDEX CONCURRENTLY idx_tasks_active
        ON tasks (id, "createdAt")
        WHERE status IN ('pending', 'processing');
      `, { transaction });

      // === –ò–ù–î–ï–ö–°–´ –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ POSTS ===

      // 7. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è VK post ID (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã)
      await queryInterface.addIndex('posts', {
        fields: ['vk_post_id'],
        name: 'idx_posts_vk_id_unique',
        unique: true,
        using: 'btree'
      }, { transaction });

      // 8. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ
      await queryInterface.addIndex('posts', {
        fields: ['group_id'],
        name: 'idx_posts_group_id',
        using: 'btree'
      }, { transaction });

      // 9. –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–µ + –¥–∞—Ç–µ
      await queryInterface.addIndex('posts', {
        fields: ['taskId', 'date'],
        name: 'idx_posts_task_date',
        using: 'btree'
      }, { transaction });

      // 10. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
      await queryInterface.addIndex('posts', {
        fields: ['owner_id'],
        name: 'idx_posts_owner_id',
        using: 'btree'
      }, { transaction });

      // === –ò–ù–î–ï–ö–°–´ –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ COMMENTS ===

      // 11. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è VK comment ID
      await queryInterface.addIndex('comments', {
        fields: ['vk_comment_id'],
        name: 'idx_comments_vk_id_unique',
        unique: true,
        using: 'btree'
      }, { transaction });

      // 12. –ò–Ω–¥–µ–∫—Å –¥–ª—è —Å–≤—è–∑–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –ø–æ—Å—Ç–∞–º–∏
      await queryInterface.addIndex('comments', {
        fields: ['post_vk_id'],
        name: 'idx_comments_post_vk_id',
        using: 'btree'
      }, { transaction });

      // 13. –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
      await queryInterface.addIndex('comments', {
        fields: ['author_id'],
        name: 'idx_comments_author_id',
        using: 'btree'
      }, { transaction });

      // 14. –ò–Ω–¥–µ–∫—Å –ø–æ –¥–∞—Ç–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      await queryInterface.addIndex('comments', {
        fields: ['date'],
        name: 'idx_comments_date',
        using: 'btree'
      }, { transaction });

      // 15. –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (post + date)
      await queryInterface.addIndex('comments', {
        fields: ['post_vk_id', 'date'],
        name: 'idx_comments_post_date',
        using: 'btree'
      }, { transaction });

      // 16. –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (PostgreSQL GIN)
      await queryInterface.sequelize.query(`
        CREATE INDEX CONCURRENTLY idx_comments_fulltext
        ON comments USING gin(to_tsvector('russian', text));
      `, { transaction });

      // === –ò–ù–î–ï–ö–°–´ –î–õ–Ø –¢–ê–ë–õ–ò–¶–´ GROUPS ===

      // 17. –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups)
      const tablesResult = await queryInterface.sequelize.query(`
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public' AND table_name = 'groups';
      `, { transaction });

      if (tablesResult[0].length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ groups
        const columnsResult = await queryInterface.sequelize.query(`
          SELECT column_name
          FROM information_schema.columns
          WHERE table_name = 'groups' AND table_schema = 'public';
        `, { transaction });

        const columnNames = columnsResult[0].map(row => row.column_name);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (columnNames.includes('vk_group_id')) {
          await queryInterface.addIndex('groups', {
            fields: ['vk_group_id'],
            name: 'idx_groups_vk_id',
            unique: true,
            using: 'btree'
          }, { transaction });
        }

        if (columnNames.includes('name')) {
          await queryInterface.addIndex('groups', {
            fields: ['name'],
            name: 'idx_groups_name',
            using: 'btree'
          }, { transaction });
        }

        if (columnNames.includes('is_active')) {
          // –ß–∞—Å—Ç–∏—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
          await queryInterface.sequelize.query(`
            CREATE INDEX CONCURRENTLY idx_groups_active
            ON groups (id, name)
            WHERE is_active = true;
          `, { transaction });
        }
      }

      // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–î–ï–ö–°–û–í ===

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É PostgreSQL –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
      await queryInterface.sequelize.query('ANALYZE;', { transaction });

      await transaction.commit();
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');

      // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const indexesToDrop = [
        'idx_tasks_status',
        'idx_tasks_priority_queue',
        'idx_tasks_type',
        'idx_tasks_type_status',
        'idx_tasks_created_at',
        'idx_tasks_active',
        'idx_posts_vk_id_unique',
        'idx_posts_group_id',
        'idx_posts_task_date',
        'idx_posts_owner_id',
        'idx_comments_vk_id_unique',
        'idx_comments_post_vk_id',
        'idx_comments_author_id',
        'idx_comments_date',
        'idx_comments_post_date',
        'idx_comments_fulltext',
        'idx_groups_vk_id',
        'idx_groups_name',
        'idx_groups_active'
      ];

      // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      for (const indexName of indexesToDrop) {
        try {
          await queryInterface.sequelize.query(`DROP INDEX IF EXISTS ${indexName};`, { transaction });
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–µ–∫—Å ${indexName}:`, error.message);
        }
      }

      await transaction.commit();
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error);
      throw error;
    }
  }
};