/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Task
 * - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ JSON –ø–æ–ª–µ–π –≤ JSONB –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL
 * - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * - –°–æ–∑–¥–∞–Ω–∏–µ ENUM —Ç–∏–ø–æ–≤ –¥–ª—è status –∏ type
 * - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
module.exports = {
  up: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      // 1. –°–æ–∑–¥–∞–µ–º ENUM —Ç–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
      await queryInterface.sequelize.query(`
        DO $$
        BEGIN
          -- –°–æ–∑–¥–∞–µ–º ENUM –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'enum_tasks_status') THEN
            CREATE TYPE enum_tasks_status AS ENUM ('pending', 'processing', 'completed', 'failed');
          END IF;

          -- –°–æ–∑–¥–∞–µ–º ENUM –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'enum_tasks_type') THEN
            CREATE TYPE enum_tasks_type AS ENUM ('fetch_comments', 'process_groups', 'analyze_posts');
          END IF;
        END
        $$;
      `, { transaction });

      // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
      await queryInterface.addColumn('tasks', 'type', {
        type: Sequelize.ENUM('fetch_comments', 'process_groups', 'analyze_posts'),
        allowNull: false,
        defaultValue: 'fetch_comments'
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      await queryInterface.addColumn('tasks', 'priority', {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 0
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await queryInterface.addColumn('tasks', 'progress', {
        type: Sequelize.INTEGER,
        allowNull: false,
        defaultValue: 0
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await queryInterface.addColumn('tasks', 'parameters', {
        type: Sequelize.JSONB,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await queryInterface.addColumn('tasks', 'result', {
        type: Sequelize.JSONB,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
      await queryInterface.addColumn('tasks', 'error', {
        type: Sequelize.TEXT,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await queryInterface.addColumn('tasks', 'executionTime', {
        type: Sequelize.INTEGER,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏
      await queryInterface.addColumn('tasks', 'createdBy', {
        type: Sequelize.STRING(100),
        allowNull: true,
        defaultValue: 'system'
      }, { transaction });

      // 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ JSONB –∫–æ–ª–æ–Ω–∫–∏
      await queryInterface.addColumn('tasks', 'groups_temp', {
        type: Sequelize.JSONB,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      await queryInterface.addColumn('tasks', 'metrics_temp', {
        type: Sequelize.JSONB,
        allowNull: true,
        defaultValue: null
      }, { transaction });

      // 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ JSON –¥–∞–Ω–Ω—ã–µ –≤ JSONB
      // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä—ã—Ö JSON –∫–æ–ª–æ–Ω–æ–∫ –≤ –Ω–æ–≤—ã–µ JSONB –∫–æ–ª–æ–Ω–∫–∏
      await queryInterface.sequelize.query(`
        UPDATE tasks
        SET
          groups_temp = CASE
            WHEN groups IS NOT NULL THEN groups::jsonb
            ELSE NULL
          END,
          metrics_temp = CASE
            WHEN metrics IS NOT NULL THEN metrics::jsonb
            ELSE NULL
          END
        WHERE groups IS NOT NULL OR metrics IS NOT NULL;
      `, { transaction });

      // 5. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ JSON –∫–æ–ª–æ–Ω–∫–∏
      await queryInterface.removeColumn('tasks', 'groups', { transaction });
      await queryInterface.removeColumn('tasks', 'metrics', { transaction });

      // 6. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      await queryInterface.renameColumn('tasks', 'groups_temp', 'groups', { transaction });
      await queryInterface.renameColumn('tasks', 'metrics_temp', 'metrics', { transaction });

      // 7. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é ENUM –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
      await queryInterface.addColumn('tasks', 'status_temp', {
        type: Sequelize.ENUM('pending', 'processing', 'completed', 'failed'),
        allowNull: false,
        defaultValue: 'pending'
      }, { transaction });

      // 8. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ ENUM
      await queryInterface.sequelize.query(`
        UPDATE tasks
        SET status_temp = CASE
          WHEN status IN ('pending', 'processing', 'completed', 'failed') THEN status::enum_tasks_status
          ELSE 'pending'::enum_tasks_status
        END;
      `, { transaction });

      // 9. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é STRING –∫–æ–ª–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
      await queryInterface.removeColumn('tasks', 'status', { transaction });

      // 10. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      await queryInterface.renameColumn('tasks', 'status_temp', 'status', { transaction });

      await transaction.commit();
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error);
      throw error;
    }
  },

  down: async (queryInterface, Sequelize) => {
    const transaction = await queryInterface.sequelize.transaction();

    try {
      console.log('üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á...');

      // 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
      await queryInterface.addColumn('tasks', 'status_temp', {
        type: Sequelize.STRING,
        allowNull: false,
        defaultValue: 'pending'
      }, { transaction });

      await queryInterface.addColumn('tasks', 'groups_temp', {
        type: Sequelize.JSON,
        allowNull: true
      }, { transaction });

      await queryInterface.addColumn('tasks', 'metrics_temp', {
        type: Sequelize.JSON,
        allowNull: true
      }, { transaction });

      // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
      await queryInterface.sequelize.query(`
        UPDATE tasks
        SET
          status_temp = status::text,
          groups_temp = groups::json,
          metrics_temp = metrics::json;
      `, { transaction });

      // 3. –£–¥–∞–ª—è–µ–º ENUM –∫–æ–ª–æ–Ω–∫–∏ –∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è
      await queryInterface.removeColumn('tasks', 'status', { transaction });
      await queryInterface.removeColumn('tasks', 'groups', { transaction });
      await queryInterface.removeColumn('tasks', 'metrics', { transaction });
      await queryInterface.removeColumn('tasks', 'type', { transaction });
      await queryInterface.removeColumn('tasks', 'priority', { transaction });
      await queryInterface.removeColumn('tasks', 'progress', { transaction });
      await queryInterface.removeColumn('tasks', 'parameters', { transaction });
      await queryInterface.removeColumn('tasks', 'result', { transaction });
      await queryInterface.removeColumn('tasks', 'error', { transaction });
      await queryInterface.removeColumn('tasks', 'executionTime', { transaction });
      await queryInterface.removeColumn('tasks', 'createdBy', { transaction });

      // 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
      await queryInterface.renameColumn('tasks', 'status_temp', 'status', { transaction });
      await queryInterface.renameColumn('tasks', 'groups_temp', 'groups', { transaction });
      await queryInterface.renameColumn('tasks', 'metrics_temp', 'metrics', { transaction });

      // 5. –£–¥–∞–ª—è–µ–º ENUM —Ç–∏–ø—ã
      await queryInterface.sequelize.query(`
        DROP TYPE IF EXISTS enum_tasks_status CASCADE;
        DROP TYPE IF EXISTS enum_tasks_type CASCADE;
      `, { transaction });

      await transaction.commit();
      console.log('‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');

    } catch (error) {
      await transaction.rollback();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á:', error);
      throw error;
    }
  }
};