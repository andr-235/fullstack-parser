#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥—É–ª—è Auth

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Clean Architecture
"""

import sys
import os
sys.path.append('src')

from auth.domain.entities.user import User
from auth.domain.value_objects.email import Email
from auth.domain.value_objects.password import Password
from auth.domain.value_objects.user_id import UserId
from auth.application.dto.user_dto import UserDTO
from auth.application.dto.register_user_dto import RegisterUserDTO
from auth.shared.exceptions import ValidationError, EmailAlreadyExistsError

def test_domain_entities():
    """–¢–µ—Å—Ç –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Value Objects
    email = Email("test@example.com")
    password = Password.create_from_plain("TestPassword123")
    user_id = UserId(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        id=user_id,
        email=email,
        full_name="Test User",
        hashed_password=password,
    )
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.email.value}")
    print(f"‚úÖ Email –≤–∞–ª–∏–¥–µ–Ω: {email.value}")
    print(f"‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω: {len(password.hashed_value)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return True

def test_dto():
    """–¢–µ—Å—Ç DTO"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTO...")
    
    # –¢–µ—Å—Ç RegisterUserDTO
    register_dto = RegisterUserDTO(
        email="test@example.com",
        full_name="Test User",
        password="TestPassword123"
    )
    
    print(f"‚úÖ RegisterUserDTO —Å–æ–∑–¥–∞–Ω: {register_dto.email}")
    
    # –¢–µ—Å—Ç UserDTO
    user_dto = UserDTO(
        id=1,
        email="test@example.com",
        full_name="Test User",
        is_active=True,
        is_superuser=False
    )
    
    print(f"‚úÖ UserDTO —Å–æ–∑–¥–∞–Ω: {user_dto.email}")
    print(f"‚úÖ UserDTO to_dict: {len(user_dto.to_dict())} –ø–æ–ª–µ–π")
    
    return True

def test_exceptions():
    """–¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")
    
    try:
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        invalid_email = Email("invalid-email")
    except Exception as e:
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç: {type(e).__name__}")
    
    try:
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
        weak_password = Password.create_from_plain("123")
    except Exception as e:
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {type(e).__name__}")
    
    # –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    try:
        raise ValidationError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "test_field")
    except ValidationError as e:
        print(f"‚úÖ ValidationError —Ä–∞–±–æ—Ç–∞–µ—Ç: {e.detail}")
    
    try:
        raise EmailAlreadyExistsError("test@example.com")
    except EmailAlreadyExistsError as e:
        print(f"‚úÖ EmailAlreadyExistsError —Ä–∞–±–æ—Ç–∞–µ—Ç: {e.detail}")
    
    return True

def test_architecture_layers():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Å–ª–æ–µ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Å–ª–æ–µ–≤...")
    
    # Domain Layer
    from auth.domain.entities import User
    from auth.domain.value_objects import Email, Password, UserId
    from auth.domain.repositories import UserRepository
    from auth.domain.services import PasswordService, TokenService
    
    print("‚úÖ Domain Layer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    # Application Layer
    from auth.application.use_cases import RegisterUserUseCase
    from auth.application.dto import UserDTO, RegisterUserDTO
    from auth.application.interfaces import UserRepositoryInterface, PasswordServiceInterface
    
    print("‚úÖ Application Layer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    # Infrastructure Layer
    from auth.infrastructure.repositories import SQLAlchemyUserRepository
    from auth.infrastructure.adapters import SecurityServicePasswordAdapter, SecurityServiceTokenAdapter
    
    print("‚úÖ Infrastructure Layer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    # Presentation Layer
    from auth.presentation.schemas import UserResponse, RegisterRequest
    from auth.presentation.dependencies import get_user_repository, get_password_service
    
    print("‚úÖ Presentation Layer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    # Shared Layer
    from auth.shared.exceptions import ValidationError, AuthenticationError
    from auth.shared.constants import ROLE_USER, ERROR_INVALID_CREDENTIALS
    
    print("‚úÖ Shared Layer –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–¥—É–ª—è Auth")
    print("=" * 50)
    
    try:
        test_domain_entities()
        test_dto()
        test_exceptions()
        test_architecture_layers()
        
        print("\n" + "=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Clean Architecture —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        print("‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID —Å–æ–±–ª—é–¥–µ–Ω—ã")
        print("‚úÖ –°–ª–æ–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
