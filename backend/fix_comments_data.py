#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
–°–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç post_vk_id
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), "backend"))

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import selectinload, sessionmaker

from app.core.config import settings
from app.models.vk_comment import VKComment
from app.models.vk_post import VKPost


async def fix_comments_data():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = (
        str(settings.database.url) if settings.database.url else None
    )
    if not database_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return

    engine = create_async_engine(database_url)
    async_session = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )

    async with async_session() as session:
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        result = await session.execute(select(VKComment))
        comments = result.scalars().all()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
        posts_result = await session.execute(
            select(VKPost).options(selectinload(VKPost.group))
        )
        posts = posts_result.scalars().all()

        print(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        posts_dict = {post.id: post for post in posts}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments_without_post = 0
        comments_without_group = 0
        comments_fixed = 0

        for comment in comments:
            post = posts_dict.get(comment.post_id)

            if not post:
                comments_without_post += 1
                print(
                    f"‚ö†Ô∏è  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç {comment.post_id}"
                )
                continue

            if not post.group:
                comments_without_group += 1
                print(f"‚ö†Ô∏è  –ü–æ—Å—Ç {post.id} –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å post_vk_id
            if (
                not hasattr(comment, "post_vk_id")
                or comment.post_vk_id is None
            ):
                comment.post_vk_id = post.vk_id
                comments_fixed += 1
                print(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω post_vk_id –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}: {post.vk_id}"
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if comments_fixed > 0:
            await session.commit()
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {comments_fixed}")

        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–µ–∑ –ø–æ—Å—Ç–∞: {comments_without_post}")
        print(f"   - –ü–æ—Å—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã: {comments_without_group}")
        print(f"   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_fixed}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_result = await session.execute(
            select(VKComment)
            .options(selectinload(VKComment.post).selectinload(VKPost.group))
            .limit(5)
        )
        test_comments = test_result.scalars().all()

        for comment in test_comments:
            group_name = (
                comment.post.group.name
                if comment.post and comment.post.group
                else "N/A"
            )
            post_vk_id = getattr(comment, "post_vk_id", None)
            print(
                f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id}: –≥—Ä—É–ø–ø–∞='{group_name}', post_vk_id={post_vk_id}"
            )

    await engine.dispose()
    print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    asyncio.run(fix_comments_data())
