#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –≥—Ä—É–ø–ø —Å –ø–æ–∏—Å–∫–æ–º
"""

import asyncio
import httpx
import json


async def test_groups_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –≥—Ä—É–ø–ø —Å –ø–æ–∏—Å–∫–æ–º"""
    base_url = "http://localhost:8000/api/v1"

    async with httpx.AsyncClient() as client:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        print("üîç –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø...")
        response = await client.get(f"{base_url}/groups/")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {data.get('total', 0)}")
            print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get('items', []))}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")

        print()

        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø
        print("üîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø...")
        response = await client.get(f"{base_url}/groups/?search=test")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {data.get('total', 0)}")
            print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get('items', []))}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")

        print()

        # –¢–µ—Å—Ç 3: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        print("üîç –¢–µ—Å—Ç 3: –ü–∞–≥–∏–Ω–∞—Ü–∏—è...")
        response = await client.get(f"{base_url}/groups/?page=1&size=5")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {data.get('total', 0)}")
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {data.get('page', 0)}")
            print(f"–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {data.get('size', 0)}")
            print(f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get('items', []))}")
        else:
            print(f"–û—à–∏–±–∫–∞: {response.text}")


if __name__ == "__main__":
    asyncio.run(test_groups_api())
