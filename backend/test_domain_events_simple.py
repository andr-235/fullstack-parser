#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Domain Events —Å–∏—Å—Ç–µ–º—ã
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç FastAPI –∏ –¥—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
"""

import asyncio
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Domain Events
try:
    from app.api.v1.infrastructure.events.domain_event_publisher import (
        DomainEvent,
        DomainEventPublisher,
        domain_event_publisher,
    )

    print("‚úÖ Domain Events –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ Domain Events: {e}")
    sys.exit(1)


class TestEventHandler:
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self):
        self.received_events = []

    async def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
        print(f"üìß –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï: {event.event_type}")
        print(f"   ID: {event.aggregate_id}")
        print(f"   –í—Ä–µ–º—è: {event.occurred_at}")
        self.received_events.append(event)
        await asyncio.sleep(0.001)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏


class TestEvent(DomainEvent):
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"""

    def __init__(self, event_id: int, message: str):
        super().__init__(event_id)
        self.message = message

    def _get_event_data(self) -> Dict[str, Any]:
        return {"message": self.message}


async def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler = TestEventHandler()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    domain_event_publisher.subscribe("TestEvent", handler.handle_event)
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ TestEvent")

    # –°–æ–∑–¥–∞–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    test_event = TestEvent(event_id=123, message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("üì§ –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...")

    await domain_event_publisher.publish(test_event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if len(handler.received_events) == 1:
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return True
    else:
        print(
            f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 1 —Å–æ–±—ã—Ç–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ {len(handler.received_events)}"
        )
        return False


async def test_multiple_events():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –°–û–ë–´–¢–ò–ô...")

    handler = TestEventHandler()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    domain_event_publisher.subscribe("Event1", handler.handle_event)
    domain_event_publisher.subscribe("Event2", handler.handle_event)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
    events = [
        TestEvent(1, "–°–æ–æ–±—â–µ–Ω–∏–µ 1"),
        TestEvent(2, "–°–æ–æ–±—â–µ–Ω–∏–µ 2"),
        TestEvent(3, "–°–æ–æ–±—â–µ–Ω–∏–µ 3"),
    ]

    # –ú–µ–Ω—è–µ–º —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    events[0].__class__.__name__ = "Event1"
    events[1].__class__.__name__ = "Event2"
    events[2].__class__.__name__ = "Event1"

    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏—è
    for event in events:
        await domain_event_publisher.publish(event)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_count = 3
    actual_count = len(handler.received_events)

    if actual_count == expected_count:
        print(f"‚úÖ –í—Å–µ {expected_count} —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        return True
    else:
        print(
            f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å {expected_count} —Å–æ–±—ã—Ç–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}"
        )
        return False


async def test_health_check():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´...")

    try:
        health = await domain_event_publisher.health_check()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –°—Ç–∞—Ç—É—Å: {health.get('status', 'unknown')}")
        print(
            f"   –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤: {health.get('subscribed_event_types', 0)}"
        )
        print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {health.get('total_handlers', 0)}")

        if health.get("status") == "healthy":
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            return True
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!")
            return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False


async def test_event_serialization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–û–ë–´–¢–ò–ô...")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        original_event = TestEvent(999, "–¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
        event_dict = original_event.to_dict()
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        restored_event = TestEvent.from_dict(event_dict)
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (
            restored_event.aggregate_id == original_event.aggregate_id
            and restored_event.message == original_event.message
        ):
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return True
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
            return False

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Domain Events"""
    print("\nüìö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í DOMAIN EVENTS...")

    import_tests = [
        ("User Events", "app.api.v1.infrastructure.events.user_events"),
        (
            "Settings Events",
            "app.api.v1.infrastructure.events.settings_events",
        ),
        ("VK API Events", "app.api.v1.infrastructure.events.vk_api_events"),
        ("Comment Events", "app.api.v1.infrastructure.events.comment_events"),
    ]

    success_count = 0

    for test_name, module_path in import_tests:
        try:
            module = __import__(module_path, fromlist=[""])
            print(f"‚úÖ {test_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –∏–º–ø–æ—Ä—Ç–∞ {test_name}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê —Å {test_name}: {e}")

    if success_count == len(import_tests):
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã Domain Events —É—Å–ø–µ—à–Ω—ã!")
        return True
    else:
        print(f"‚ùå {len(import_tests) - success_count} –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ—É–¥–∞—á–Ω—ã—Ö")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø DOMAIN EVENTS")
    print("=" * 60)

    tests = [
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
        ("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", test_multiple_events),
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", test_health_check),
        ("–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π", test_event_serialization),
        ("–ò–º–ø–æ—Ä—Ç—ã Domain Events", test_imports),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\n{'='*10} {test_name.upper()} {'='*10}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ {test_name}: {e}")
            results.append((test_name, False))

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")

    passed = 0
    failed = 0

    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ò–õ"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1

    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"   –ü—Ä–æ—à–ª–æ: {passed}")
    print(f"   –ü—Ä–æ–≤–∞–ª–∏–ª–æ: {failed}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed / (passed + failed) * 100):.1f}%")
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Domain Events —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        return 0
    else:
        print(f"\n‚ùå {failed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
