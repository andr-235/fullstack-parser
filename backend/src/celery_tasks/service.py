"""
Celery Tasks Service

–°–µ—Ä–≤–∏—Å —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è Celery.
–ü–µ—Ä–µ—Ö–æ–¥ —Å ARQ –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π.
"""

import logging
from typing import Any, Dict, List, Optional
from datetime import datetime

from ..celery_app import app

logger = logging.getLogger(__name__)


# –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ VK
async def parse_vk_comments(
    ctx: Dict[str, Any],
    group_id: int,
    post_id: Optional[int] = None,
    limit: int = 100,
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ VK"""
    logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..parser.service import ParserService
        from ..vk_api.dependencies import create_vk_api_service_sync
        from ..comments.dependencies import get_comment_repository
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º VK API —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–π
        vk_api_service = create_vk_api_service_sync()

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å–µ—Ä–≤–∏—Å
            parser_service = ParserService(vk_api_service=vk_api_service)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã
            result = await parser_service.parse_group(
                group_id=group_id,
                max_posts=10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                max_comments_per_post=limit,
            )
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏–∏
            await vk_api_service.close_sessions()

        logger.info(
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('comments_saved', 0)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        )

        return {
            "status": "success",
            "group_id": group_id,
            "post_id": post_id,
            "comments_parsed": result.get("comments_found", 0),
            "comments_saved": result.get("comments_saved", 0),
            "errors": result.get("errors", []),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group_id}: {str(e)}")
        return {
            "status": "error",
            "group_id": group_id,
            "post_id": post_id,
            "comments_parsed": 0,
            "comments_saved": 0,
            "errors": [str(e)],
            "timestamp": datetime.now().isoformat(),
        }


async def analyze_text_morphology(
    ctx: Dict[str, Any], text: str, analysis_type: str = "full"
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    logger.info(
        f"üîç –ù–∞—á–∞–ª–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..nlp.morphology import MorphologyAnalyzer
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏
        analyzer = MorphologyAnalyzer()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        result = await analyzer.analyze_text(text, analysis_type)

        logger.info(
            f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('words_count', 0)} —Å–ª–æ–≤"
        )

        return {
            "status": "success",
            "words_count": result.get("words_count", 0),
            "analysis_type": analysis_type,
            "morphology_data": result.get("morphology_data", {}),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return {
            "status": "error",
            "words_count": 0,
            "analysis_type": analysis_type,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def extract_keywords(
    ctx: Dict[str, Any],
    text: str,
    min_frequency: int = 2,
    max_keywords: int = 20,
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    logger.info(
        f"üîë –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..nlp.keywords import KeywordExtractor
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        extractor = KeywordExtractor()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = await extractor.extract_keywords(
            text=text, min_frequency=min_frequency, max_keywords=max_keywords
        )

        logger.info(
            f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(keywords)} —Å–ª–æ–≤"
        )

        return {
            "status": "success",
            "keyword_count": len(keywords),
            "keywords": keywords,
            "min_frequency": min_frequency,
            "max_keywords": max_keywords,
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {str(e)}")
        return {
            "status": "error",
            "keyword_count": 0,
            "keywords": [],
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def send_notification(
    ctx: Dict[str, Any],
    recipient: str,
    message: str,
    notification_type: str = "email",
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info(
        f"üìß –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ {notification_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {recipient}"
    )

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..notifications.service import NotificationService
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_service = NotificationService()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        result = await notification_service.send_notification(
            recipient=recipient,
            message=message,
            notification_type=notification_type,
        )

        logger.info(
            f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('message_id', 'unknown')}"
        )

        return {
            "status": "success",
            "sent": result.get("sent", False),
            "recipient": recipient,
            "notification_type": notification_type,
            "message_id": result.get("message_id"),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        return {
            "status": "error",
            "sent": False,
            "recipient": recipient,
            "notification_type": notification_type,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def generate_report(
    ctx: Dict[str, Any],
    report_type: str,
    date_from: str,
    date_to: str,
    filters: Optional[Dict] = None,
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    logger.info(
        f"üìä –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ '{report_type}' —Å {date_from} –ø–æ {date_to}"
    )

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..reports.service import ReportService
        from ..database import get_db_session
        from datetime import datetime

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤
        report_service = ReportService()

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        date_from_dt = datetime.fromisoformat(date_from)
        date_to_dt = datetime.fromisoformat(date_to)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        result = await report_service.generate_report(
            report_type=report_type,
            date_from=date_from_dt,
            date_to=date_to_dt,
            filters=filters or {},
        )

        logger.info(
            f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result.get('file_path', 'unknown')}"
        )

        return {
            "status": "success",
            "generated": True,
            "report_type": report_type,
            "record_count": result.get("record_count", 0),
            "file_path": result.get("file_path"),
            "file_size": result.get("file_size"),
            "date_from": date_from,
            "date_to": date_to,
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return {
            "status": "error",
            "generated": False,
            "report_type": report_type,
            "record_count": 0,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def cleanup_old_data(
    ctx: Dict[str, Any],
    days_old: int = 30,
    data_types: Optional[List[str]] = None,
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..cleanup.service import CleanupService
        from ..database import get_db_session
        from datetime import datetime, timedelta

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—á–∏—Å—Ç–∫–∏
        cleanup_service = CleanupService()

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—Å–µ—á–µ–Ω–∏—è
        cutoff_date = datetime.now() - timedelta(days=days_old)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        result = await cleanup_service.cleanup_old_data(
            cutoff_date=cutoff_date,
            data_types=data_types or ["comments", "logs", "reports"],
        )

        logger.info(
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.get('total_deleted', 0)} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ"
        )

        return {
            "status": "success",
            "total_deleted": result.get("total_deleted", 0),
            "data_types": data_types or ["all"],
            "cutoff_date": cutoff_date.isoformat(),
            "deleted_by_type": result.get("deleted_by_type", {}),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return {
            "status": "error",
            "total_deleted": 0,
            "data_types": data_types or ["all"],
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def process_batch_comments(
    ctx: Dict[str, Any], comment_ids: List[int], operation: str = "analyze"
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    logger.info(
        f"üì¶ –ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(comment_ids)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ–ø–µ—Ä–∞—Ü–∏—è: {operation})"
    )

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..comments.service import CommentService
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        async with get_db_session() as db:
            comment_service = CommentService(db)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            result = await comment_service.process_batch_comments(
                comment_ids=comment_ids, operation=operation
            )

        logger.info(
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.get('successful', 0)}/{len(comment_ids)} —É—Å–ø–µ—à–Ω–æ"
        )

        return {
            "status": "success",
            "total_comments": len(comment_ids),
            "successful": result.get("successful", 0),
            "failed": result.get("failed", 0),
            "operation": operation,
            "errors": result.get("errors", []),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")
        return {
            "status": "error",
            "total_comments": len(comment_ids),
            "successful": 0,
            "failed": len(comment_ids),
            "operation": operation,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def update_statistics(
    ctx: Dict[str, Any], stat_type: str = "daily"
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger.info(f"üìà –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {stat_type} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..statistics.service import StatisticsService
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async with get_db_session() as db:
            stats_service = StatisticsService(db)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result = await stats_service.update_statistics(stat_type=stat_type)

        logger.info(
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {result.get('records_updated', 0)} –∑–∞–ø–∏—Å–µ–π"
        )

        return {
            "status": "success",
            "updated": True,
            "stat_type": stat_type,
            "records_updated": result.get("records_updated", 0),
            "statistics_data": result.get("statistics_data", {}),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return {
            "status": "error",
            "updated": False,
            "stat_type": stat_type,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


async def backup_database(
    ctx: Dict[str, Any], backup_type: str = "full"
) -> Dict[str, Any]:
    """–†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info(f"üíæ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è {backup_type} –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        from ..backup.service import BackupService
        from ..database import get_db_session

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        backup_service = BackupService()

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        result = await backup_service.create_backup(backup_type=backup_type)

        logger.info(
            f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result.get('file_path', 'unknown')}"
        )

        return {
            "status": "success",
            "created": True,
            "backup_type": backup_type,
            "file_path": result.get("file_path"),
            "file_size": result.get("file_size"),
            "compression_ratio": result.get("compression_ratio"),
            "timestamp": datetime.now().isoformat(),
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
        return {
            "status": "error",
            "created": False,
            "backup_type": backup_type,
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
        }


# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery
async def parse_vk_comments_celery(
    ctx: Dict[str, Any],
    group_id: int,
    post_id: Optional[int] = None,
    limit: int = 100,
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await parse_vk_comments(ctx, group_id, post_id, limit)


async def analyze_text_morphology_celery(
    ctx: Dict[str, Any], text: str, analysis_type: str = "full"
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await analyze_text_morphology(ctx, text, analysis_type)


async def extract_keywords_celery(
    ctx: Dict[str, Any],
    text: str,
    min_frequency: int = 2,
    max_keywords: int = 20,
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await extract_keywords(ctx, text, min_frequency, max_keywords)


async def send_notification_celery(
    ctx: Dict[str, Any],
    recipient: str,
    message: str,
    notification_type: str = "email",
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await send_notification(ctx, recipient, message, notification_type)


async def generate_report_celery(
    ctx: Dict[str, Any],
    report_type: str,
    date_from: str,
    date_to: str,
    filters: Optional[Dict] = None,
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await generate_report(ctx, report_type, date_from, date_to, filters)


async def cleanup_old_data_celery(
    ctx: Dict[str, Any],
    days_old: int = 30,
    data_types: Optional[List[str]] = None,
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await cleanup_old_data(ctx, days_old, data_types)


async def process_batch_comments_celery(
    ctx: Dict[str, Any], comment_ids: List[int], operation: str = "analyze"
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await process_batch_comments(ctx, comment_ids, operation)


async def update_statistics_celery(
    ctx: Dict[str, Any], stat_type: str = "daily"
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await update_statistics(ctx, stat_type)


async def backup_database_celery(
    ctx: Dict[str, Any], backup_type: str = "full"
) -> Dict[str, Any]:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery"""
    return await backup_database(ctx, backup_type)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º Celery –∑–∞–¥–∞—á–∏
@app.task(bind=True, name="celery_tasks.parse_vk_comments")
def parse_vk_comments_task(
    self, group_id: int, post_id: Optional[int] = None, limit: int = 100
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ VK

    Args:
        group_id: ID –≥—Ä—É–ø–ø—ã VK
        post_id: ID –ø–æ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    import asyncio

    try:
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ARQ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        ctx: Dict[str, Any] = {}

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        result = asyncio.run(
            parse_vk_comments_celery(ctx, group_id, post_id, limit)
        )

        logger.info(
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('comments_parsed', 0)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        raise self.retry(countdown=60, exc=e)


@app.task(bind=True, name="celery_tasks.analyze_text_morphology")
def analyze_text_morphology_task(
    self, text: str, analysis_type: str = "full"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    """
    import asyncio

    try:
        logger.info(
            f"üîç –ù–∞—á–∞–ª–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
        )

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            analyze_text_morphology_celery(ctx, text, analysis_type)
        )

        logger.info(
            f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {result.get('words_count', 0)} —Å–ª–æ–≤"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise self.retry(countdown=30, exc=e)


@app.task(bind=True, name="celery_tasks.extract_keywords")
def extract_keywords_task(
    self, text: str, min_frequency: int = 2, max_keywords: int = 20
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    """
    import asyncio

    try:
        logger.info(
            f"üîë –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–∏–Ω. —á–∞—Å—Ç–æ—Ç–∞: {min_frequency})"
        )

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            extract_keywords_celery(ctx, text, min_frequency, max_keywords)
        )

        logger.info(
            f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {result.get('keyword_count', 0)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        raise self.retry(countdown=30, exc=e)


@app.task(bind=True, name="celery_tasks.send_notification")
def send_notification_task(
    self, recipient: str, message: str, notification_type: str = "email"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    import asyncio

    try:
        logger.info(
            f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ {notification_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {recipient}"
        )

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            send_notification_celery(
                ctx, recipient, message, notification_type
            )
        )

        if result.get("sent"):
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {recipient}")
        else:
            logger.warning(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {recipient}: {result.get('error')}"
            )

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise self.retry(countdown=60, exc=e)


@app.task(bind=True, name="celery_tasks.generate_report")
def generate_report_task(
    self,
    report_type: str,
    date_from: str,
    date_to: str,
    filters: Optional[Dict] = None,
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
    """
    import asyncio

    try:
        logger.info(
            f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ '{report_type}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}"
        )

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            generate_report_celery(
                ctx, report_type, date_from, date_to, filters
            )
        )

        if result.get("generated"):
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç '{report_type}' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è –û—Ç—á–µ—Ç '{report_type}' –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ '{report_type}': {e}")
        raise self.retry(countdown=120, exc=e)


@app.task(bind=True, name="celery_tasks.cleanup_old_data")
def cleanup_old_data_task(
    self, days_old: int = 30, data_types: Optional[List[str]] = None
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    import asyncio

    try:
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π")

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            cleanup_old_data_celery(ctx, days_old, data_types)
        )

        logger.info(
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {result.get('total_deleted', 0)} –∑–∞–ø–∏—Å–µ–π"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise self.retry(countdown=300, exc=e)


@app.task(bind=True, name="celery_tasks.process_batch_comments")
def process_batch_comments_task(
    self, comment_ids: List[int], operation: str = "analyze"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    """
    import asyncio

    try:
        logger.info(
            f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(comment_ids)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ–ø–µ—Ä–∞—Ü–∏—è: {operation})"
        )

        ctx: Dict[str, Any] = {}
        result = asyncio.run(
            process_batch_comments_celery(ctx, comment_ids, operation)
        )

        logger.info(
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.get('successful', 0)}/{result.get('total_comments', 0)} —É—Å–ø–µ—à–Ω–æ"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        raise self.retry(countdown=60, exc=e)


@app.task(bind=True, name="celery_tasks.update_statistics")
def update_statistics_task(self, stat_type: str = "daily") -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    import asyncio

    try:
        logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {stat_type} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        ctx: Dict[str, Any] = {}
        result = asyncio.run(update_statistics_celery(ctx, stat_type))

        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '{stat_type}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ '{stat_type}': {e}")
        raise self.retry(countdown=120, exc=e)


@app.task(bind=True, name="celery_tasks.backup_database")
def backup_database_task(self, backup_type: str = "full") -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ Celery –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    import asyncio

    try:
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ {backup_type} –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        ctx: Dict[str, Any] = {}
        result = asyncio.run(backup_database_celery(ctx, backup_type))

        if result.get("created"):
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è –ë—ç–∫–∞–ø –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        raise self.retry(countdown=600, exc=e)


# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
__all__ = [
    "parse_vk_comments_task",
    "analyze_text_morphology_task",
    "extract_keywords_task",
    "send_notification_task",
    "generate_report_task",
    "cleanup_old_data_task",
    "process_batch_comments_task",
    "update_statistics_task",
    "backup_database_task",
]
