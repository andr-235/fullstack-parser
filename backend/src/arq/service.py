"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ARQ

–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ VK Comments Parser.
–í—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤–æ—Ä–∫–µ—Ä–æ–º ARQ.
"""

import asyncio
import logging
from typing import Any, Dict, List, Optional
from datetime import datetime, timedelta

# Removed circular import - arq_service will be imported where needed
from ..config import config_service
from ..database import database_service

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# from .vk_api.service import vk_api_service
# from .morphological.service import morphological_service
# from .keywords.service import keywords_service

logger = logging.getLogger(__name__)


async def parse_vk_comments(
    ctx: Dict[str, Any],
    group_id: int,
    post_id: Optional[int] = None,
    limit: int = 100,
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ VK

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        group_id: ID –≥—Ä—É–ø–ø—ã VK
        post_id: ID –ø–æ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ None - –ø–∞—Ä—Å–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    logger.info(
        f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}, –ø–æ—Å—Ç {post_id or '–≤—Å–µ –ø–æ—Å—Ç—ã'}"
    )

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ VK
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "group_id": group_id,
            "post_id": post_id,
            "comments_parsed": 0,
            "comments_saved": 0,
            "errors": [],
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(2)

        # –ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result["comments_parsed"] = limit
        result["comments_saved"] = (
            limit - 5
        )  # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        logger.info(
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['comments_parsed']} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        raise


async def analyze_text_morphology(
    ctx: Dict[str, Any], text: str, analysis_type: str = "full"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ ("full", "lemmas", "pos")

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """
    logger.info(
        f"üîç –ù–∞—á–∞–ª–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "text_length": len(text),
            "analysis_type": analysis_type,
            "words_count": len(text.split()),
            "lemmas": [],
            "pos_tags": [],
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(1)

        # –ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if analysis_type in ["full", "lemmas"]:
            result["lemmas"] = ["—Ç–µ—Å—Ç", "–∞–Ω–∞–ª–∏–∑", "—Ç–µ–∫—Å—Ç"]  # –ü—Ä–∏–º–µ—Ä –ª–µ–º–º

        if analysis_type in ["full", "pos"]:
            result["pos_tags"] = ["NOUN", "VERB", "NOUN"]  # –ü—Ä–∏–º–µ—Ä POS-—Ç–µ–≥–æ–≤

        logger.info(
            f"‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {result['words_count']} —Å–ª–æ–≤"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise


async def extract_keywords(
    ctx: Dict[str, Any],
    text: str,
    min_frequency: int = 2,
    max_keywords: int = 20,
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        min_frequency: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤–∞
        max_keywords: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

    Returns:
        Dict —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    """
    logger.info(
        f"üîë –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–∏–Ω. —á–∞—Å—Ç–æ—Ç–∞: {min_frequency})"
    )

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "text_length": len(text),
            "min_frequency": min_frequency,
            "max_keywords": max_keywords,
            "keywords": [],
            "keyword_count": 0,
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(1.5)

        # –ú–æ–∫–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        mock_keywords = [
            {"word": "—Ç–µ—Å—Ç", "frequency": 5, "weight": 0.8},
            {"word": "–∞–Ω–∞–ª–∏–∑", "frequency": 3, "weight": 0.6},
            {"word": "–∫–ª—é—á–µ–≤—ã–µ", "frequency": 4, "weight": 0.7},
            {"word": "—Å–ª–æ–≤–∞", "frequency": 3, "weight": 0.5},
        ]

        result["keywords"] = mock_keywords[:max_keywords]
        result["keyword_count"] = len(result["keywords"])

        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {result['keyword_count']} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        raise


async def send_notification(
    ctx: Dict[str, Any],
    recipient: str,
    message: str,
    notification_type: str = "email",
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        recipient: –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ("email", "sms", "push")

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ {notification_type} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {recipient}")

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

        result = {
            "recipient": recipient,
            "notification_type": notification_type,
            "message_length": len(message),
            "sent": False,
            "timestamp": datetime.now().isoformat(),
            "error": None,
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(0.5)

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É (–≤ 90% —Å–ª—É—á–∞–µ–≤)
        import random

        if random.random() < 0.9:
            result["sent"] = True
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {recipient}")
        else:
            result["error"] = "–°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"
            logger.warning(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {recipient}: {result['error']}"
            )

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        raise


async def generate_report(
    ctx: Dict[str, Any],
    report_type: str,
    date_from: str,
    date_to: str,
    filters: Optional[Dict] = None,
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        report_type: –¢–∏–ø –æ—Ç—á–µ—Ç–∞ ("comments", "keywords", "groups")
        date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (ISO format)
        date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (ISO format)
        filters: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    """
    logger.info(
        f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ '{report_type}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from} - {date_to}"
    )

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "report_type": report_type,
            "date_from": date_from,
            "date_to": date_to,
            "filters": filters or {},
            "generated": False,
            "file_path": None,
            "record_count": 0,
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(3)

        # –ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result["generated"] = True
        result["record_count"] = 150
        result["file_path"] = (
            f"/reports/{report_type}_{date_from}_{date_to}.json"
        )

        logger.info(
            f"‚úÖ –û—Ç—á–µ—Ç '{report_type}' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({result['record_count']} –∑–∞–ø–∏—Å–µ–π)"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ '{report_type}': {e}")
        raise


async def cleanup_old_data(
    ctx: Dict[str, Any],
    days_old: int = 30,
    data_types: Optional[List[str]] = None,
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        days_old: –í–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ –¥–Ω—è—Ö)
        data_types: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏
    """
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π")

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        data_types = data_types or ["comments", "logs", "temp_files"]

        # –¢–∏–ø–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å object –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è—Ö
        result: Dict[str, Any] = {
            "days_old": days_old,
            "data_types": data_types,
            "cleanup_results": {},
            "total_deleted": 0,
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(2)

        # –ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
        for data_type in data_types:
            deleted_count = 25  # –ò–º–∏—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ 25 –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            result["cleanup_results"][data_type] = {
                "deleted": deleted_count,
                "errors": 0,
            }
            result["total_deleted"] += deleted_count

        logger.info(
            f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {result['total_deleted']} –∑–∞–ø–∏—Å–µ–π"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def process_batch_comments(
    ctx: Dict[str, Any], comment_ids: List[int], operation: str = "analyze"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        comment_ids: –°–ø–∏—Å–æ–∫ ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ("analyze", "moderate", "export")

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    logger.info(
        f"üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(comment_ids)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ–ø–µ—Ä–∞—Ü–∏—è: {operation})"
    )

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        # –¢–∏–ø–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏
        result: Dict[str, Any] = {
            "operation": operation,
            "total_comments": len(comment_ids),
            "processed": 0,
            "successful": 0,
            "failed": 0,
            "results": [],
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        batch_size = 10
        for i in range(0, len(comment_ids), batch_size):
            batch = comment_ids[i : i + batch_size]
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É 90% –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            successful = int(len(batch) * 0.9)
            failed = len(batch) - successful

            result["processed"] += len(batch)
            result["successful"] += successful
            result["failed"] += failed

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
            result["results"].append(
                {
                    "batch_start": i,
                    "batch_end": min(i + batch_size, len(comment_ids)),
                    "successful": successful,
                    "failed": failed,
                }
            )

        logger.info(
            f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['successful']}/{result['total_comments']} —É—Å–ø–µ—à–Ω–æ"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
        raise


async def update_statistics(
    ctx: Dict[str, Any], stat_type: str = "daily"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        stat_type: –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ("daily", "weekly", "monthly")

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {stat_type} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "stat_type": stat_type,
            "updated_metrics": [],
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(1.5)

        # –ú–æ–∫–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        mock_metrics = [
            {"name": "total_comments", "value": 15420, "change": 125},
            {"name": "active_groups", "value": 45, "change": 2},
            {"name": "processed_keywords", "value": 1250, "change": 85},
            {"name": "error_rate", "value": 0.02, "change": -0.005},
        ]

        result["updated_metrics"] = mock_metrics

        logger.info(
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '{stat_type}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({len(mock_metrics)} –º–µ—Ç—Ä–∏–∫)"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ '{stat_type}': {e}")
        raise


async def backup_database(
    ctx: Dict[str, Any], backup_type: str = "full"
) -> Dict[str, Any]:
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Args:
        ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ARQ
        backup_type: –¢–∏–ø –±—ç–∫–∞–ø–∞ ("full", "incremental")

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
    """
    logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ {backup_type} –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

        result = {
            "backup_type": backup_type,
            "created": False,
            "file_path": None,
            "file_size": 0,
            "duration": 0,
            "timestamp": datetime.now().isoformat(),
        }

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        start_time = datetime.now()
        await asyncio.sleep(5)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
        end_time = datetime.now()

        # –ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result["created"] = True
        result["file_path"] = (
            f"/backups/{backup_type}_backup_{start_time.strftime('%Y%m%d_%H%M%S')}.sql"
        )
        result["file_size"] = 104857600  # 100 MB
        result["duration"] = (end_time - start_time).total_seconds()

        logger.info(
            f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {result['file_path']} ({result['file_size']} bytes)"
        )
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        raise


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è ARQ Worker
ALL_TASKS = [
    parse_vk_comments,
    analyze_text_morphology,
    extract_keywords,
    send_notification,
    generate_report,
    cleanup_old_data,
    process_batch_comments,
    update_statistics,
    backup_database,
]
