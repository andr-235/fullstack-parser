"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Celery (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏)

–ó–∞–º–µ–Ω–∞ ARQ - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–¥–∞—á.
"""

import logging
from typing import Any, Dict, Optional, Union
from datetime import datetime, timedelta

from celery.result import AsyncResult
from celery import Celery

from ..config import config_service

logger = logging.getLogger(__name__)


class CeleryService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ Celery

    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ Redis
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    """

    def __init__(self):
        self._celery_app: Optional[Celery] = None
        self._is_initialized = False

    async def initialize(self, celery_app: Celery) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        Args:
            celery_app: –≠–∫–∑–µ–º–ø–ª—è—Ä Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if self._is_initialized:
            logger.warning("Celery service —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        try:
            self._celery_app = celery_app
            self._is_initialized = True

            logger.info("‚úÖ Celery service —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"üìã –ë—Ä–æ–∫–µ—Ä: {celery_app.conf.broker_url}")
            logger.info(f"üîó Backend: {celery_app.conf.result_backend}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Celery service: {e}")
            raise

    async def close(self) -> None:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        """
        if self._is_initialized:
            self._is_initialized = False
            logger.info("üõë Celery service –∑–∞–∫—Ä—ã—Ç")

    def enqueue_job(
        self,
        task_name: str,
        *args,
        countdown: Optional[int] = None,
        eta: Optional[datetime] = None,
        **kwargs,
    ) -> Optional[str]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å

        Args:
            task_name: –ò–º—è –∑–∞–¥–∞—á–∏
            *args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            countdown: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            eta: –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            **kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        Returns:
            str: ID –∑–∞–¥–∞—á–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self._is_initialized or not self._celery_app:
            logger.error("Celery service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            task_kwargs = {
                "args": args,
                "kwargs": kwargs,
            }

            if countdown:
                task_kwargs["countdown"] = countdown

            if eta:
                task_kwargs["eta"] = eta

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            result = self._celery_app.send_task(task_name, **task_kwargs)

            logger.info(
                f"üìù –ó–∞–¥–∞—á–∞ '{task_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å (ID: {result.id})"
            )
            return result.id

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ '{task_name}' –≤ –æ—á–µ—Ä–µ–¥—å: {e}"
            )
            return None

    def get_job_status(self, job_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–æ ID

        Args:
            job_id: ID –∑–∞–¥–∞—á–∏

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–µ –∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        if not self._is_initialized or not self._celery_app:
            logger.error("Celery service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            result = AsyncResult(job_id, app=self._celery_app)

            return {
                "job_id": job_id,
                "status": result.status,
                "result": result.result if result.ready() else None,
                "error": str(result.result) if result.failed() else None,
                "current": result.info if result.info else None,
                "successful": result.successful(),
                "failed": result.failed(),
                "ready": result.ready(),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ '{job_id}': {e}")
            return None

    def get_job_result(self, job_id: str, timeout: int = 10) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

        Args:
            job_id: ID –∑–∞–¥–∞—á–∏
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        if not self._is_initialized or not self._celery_app:
            logger.error("Celery service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            result = AsyncResult(job_id, app=self._celery_app)

            if result.ready():
                return result.result
            else:
                logger.warning(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ '{job_id}' –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤")
                return None

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ '{job_id}': {e}"
            )
            return None

    def abort_job(self, job_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

        Args:
            job_id: ID –∑–∞–¥–∞—á–∏

        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self._is_initialized or not self._celery_app:
            logger.error("Celery service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        try:
            result = AsyncResult(job_id, app=self._celery_app)

            if result.ready():
                logger.warning(
                    f"–ó–∞–¥–∞—á–∞ '{job_id}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è"
                )
                return False

            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result.revoke(terminate=True)

            logger.info(f"üõë –ó–∞–¥–∞—á–∞ '{job_id}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ '{job_id}': {e}")
            return False

    def get_queue_info(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–µ—Ä–µ–¥—è—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self._is_initialized or not self._celery_app:
            logger.error("Celery service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            tasks = list(self._celery_app.tasks.keys())

            return {
                "registered_tasks": tasks,
                "active_queues": (
                    list(self._celery_app.conf.task_queues.keys())
                    if hasattr(self._celery_app.conf, "task_queues")
                    else []
                ),
                "broker_url": self._celery_app.conf.broker_url,
                "result_backend": self._celery_app.conf.result_backend,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥—è—Ö: {e}")
            return None

    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Celery —Å–µ—Ä–≤–∏—Å–∞

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
        """
        health_info: Dict[str, Any] = {
            "service": "Celery",
            "healthy": False,
            "timestamp": datetime.now().isoformat(),
            "details": {},
        }

        try:
            if not self._is_initialized:
                health_info["details"]["error"] = "Service not initialized"
                return health_info

            if not self._celery_app:
                health_info["details"]["error"] = "Celery app not available"
                return health_info

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö
            queue_info = self.get_queue_info()

            health_info["healthy"] = True
            health_info["details"] = {
                "queue_info": queue_info,
                "broker_connected": True,
                "registered_tasks_count": (
                    len(self._celery_app.tasks)
                    if hasattr(self._celery_app, "tasks")
                    else 0
                ),
            }

        except Exception as e:
            health_info["details"]["error"] = str(e)
            logger.error(f"‚ùå Celery health check failed: {e}")

        return health_info


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Celery —Å–µ—Ä–≤–∏—Å–∞
celery_service = CeleryService()
