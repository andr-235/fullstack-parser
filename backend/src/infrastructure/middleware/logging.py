"""
Enterprise-grade Request Logging Middleware –¥–ª—è API v1 —Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–ª–Ω–æ–π
–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ enterprise-grade monitoring.
"""

import time
import logging
from typing import Dict, Any, Optional, cast
from uuid import uuid4
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

logger = logging.getLogger(__name__)


class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """
    Enterprise-grade Request Logging Middleware —Å DDD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

    –†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å request tracking,
    performance monitoring –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å enterprise-grade —Å–∏—Å—Ç–µ–º–∞–º–∏.
    """

    def __init__(
        self,
        app,
        log_request_body: bool = False,
        log_response_body: bool = False,
        exclude_paths: Optional[set] = None,
    ):
        super().__init__(app)
        self.log_request_body = log_request_body
        self.log_response_body = log_response_body
        self.exclude_paths = exclude_paths or {"/health", "/favicon.ico"}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.stats: Dict[str, Any] = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "avg_processing_time": 0.0,
            "requests_by_method": {},
            "requests_by_path": {},
            "errors_by_type": {},
        }

    async def dispatch(self, request: Request, call_next):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        if request.url.path in self.exclude_paths:
            return await call_next(request)

        request_id = str(uuid4())
        start_time = time.time()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["total_requests"] = (
            int(self.stats.get("total_requests", 0)) + 1
        )
        method = request.method
        path = request.url.path

        requests_by_method = cast(
            Dict[str, int], self.stats["requests_by_method"]
        )
        requests_by_path = cast(Dict[str, int], self.stats["requests_by_path"])
        requests_by_method[method] = int(requests_by_method.get(method, 0)) + 1
        requests_by_path[path] = int(requests_by_path.get(path, 0)) + 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ request state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        request.state.request_id = request_id
        request.state.start_time = start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        await self._log_request(request, request_id)

        try:
            response = await call_next(request)
            processing_time = time.time() - start_time

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            self.stats["successful_requests"] = (
                int(self.stats.get("successful_requests", 0)) + 1
            )
            self._update_processing_time_stats(processing_time)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ request state
            request.state.processing_time = processing_time

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            await self._log_response(
                request, response, request_id, processing_time
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            self._add_response_headers(response, request_id, processing_time)

            return response

        except Exception as e:
            processing_time = time.time() - start_time

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self.stats["failed_requests"] = (
                int(self.stats.get("failed_requests", 0)) + 1
            )
            error_type = type(e).__name__
            errors_by_type = cast(Dict[str, int], self.stats["errors_by_type"])
            errors_by_type[error_type] = (
                int(errors_by_type.get(error_type, 0)) + 1
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log_error(request, e, request_id, processing_time)
            raise

    async def _log_request(self, request: Request, request_id: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å"""
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        request_info = {
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "full_url": str(request.url),
            "client_ip": self._get_client_ip(request),
            "user_agent": request.headers.get("user-agent", "unknown"),
            "content_type": request.headers.get("content-type", "unknown"),
            "accept": request.headers.get("accept", "unknown"),
            "query_params": dict(request.query_params),
            "path_params": dict(request.path_params),
            "headers_count": len(request.headers),
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.log_request_body:
            try:
                body = await request.body()
                if body:
                    request_info["body_size"] = len(body)
                    # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if len(body) < 1024:  # –¢–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ç–µ–ª–∞
                        request_info["body"] = body.decode(
                            "utf-8", errors="ignore"
                        )
            except Exception:
                request_info["body_error"] = "Failed to read request body"

        logger.info(
            f"‚û°Ô∏è  {request.method} {request.url.path} - {self._get_client_ip(request)}",
            extra=request_info,
        )

    async def _log_response(
        self,
        request: Request,
        response,
        request_id: str,
        processing_time: float,
    ) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"""
        response_info = {
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "status_code": response.status_code,
            "processing_time": processing_time,
            "content_type": response.headers.get("content-type", "unknown"),
            "content_length": response.headers.get(
                "content-length", "unknown"
            ),
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if response.status_code >= 500:
            logger.error(
                f"‚ùå {request.method} {request.url.path} - {response.status_code} ({processing_time:.3f}s)",
                extra=response_info,
            )
        elif response.status_code >= 400:
            logger.warning(
                f"‚ö†Ô∏è  {request.method} {request.url.path} - {response.status_code} ({processing_time:.3f}s)",
                extra=response_info,
            )
        else:
            logger.info(
                f"‚úÖ {request.method} {request.url.path} - {response.status_code} ({processing_time:.3f}s)",
                extra=response_info,
            )

    async def _log_error(
        self,
        request: Request,
        error: Exception,
        request_id: str,
        processing_time: float,
    ) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É"""
        error_info = {
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "error_type": type(error).__name__,
            "error_message": str(error),
            "processing_time": processing_time,
            "client_ip": self._get_client_ip(request),
        }

        logger.error(
            f"üí• {request.method} {request.url.path} - {type(error).__name__} ({processing_time:.3f}s)",
            extra=error_info,
            exc_info=True,
        )

    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏"""
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()

        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip

        return request.client.host if request.client else "unknown"

    def _add_response_headers(
        self, response, request_id: str, processing_time: float
    ) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç"""
        response.headers["X-Request-ID"] = request_id
        response.headers["X-Processing-Time"] = str(processing_time)
        response.headers["X-Response-Time"] = str(time.time())
        response.headers["X-API-Version"] = "v1.6.0"
        response.headers["X-Architecture"] = "DDD + Middleware"

    def _update_processing_time_stats(self, processing_time: float) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        current_avg = float(self.stats["avg_processing_time"])  # type: ignore[call-overload]
        total_requests = int(self.stats["total_requests"])  # type: ignore[call-overload]

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        self.stats["avg_processing_time"] = (
            current_avg * (total_requests - 1) + processing_time
        ) / total_requests

    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware"""
        return {
            **self.stats,
            "excluded_paths": list(self.exclude_paths),
            "log_request_body": self.log_request_body,
            "log_response_body": self.log_response_body,
            "success_rate": (
                (
                    cast(int, self.stats.get("successful_requests", 0))
                    / max(1, cast(int, self.stats.get("total_requests", 0)))
                )
            ),
        }

    def reset_stats(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {
            "total_requests": 0,
            "successful_requests": 0,
            "failed_requests": 0,
            "avg_processing_time": 0.0,
            "requests_by_method": {},
            "requests_by_path": {},
            "errors_by_type": {},
        }
