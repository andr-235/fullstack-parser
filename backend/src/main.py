"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VK Comments Parser

–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ app/main.py
–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å fastapi-best-practices
"""

import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .config import settings
from .database import database_service
from .exceptions import APIException
from .responses import BaseAPIException

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π)
from .auth.router import router as auth_router
from .comments.router import router as comments_router

from .groups.router import router as groups_router

from .parser.router import router as parser_router

from .morphological.router import router as morphological_router
from .keywords.router import router as keywords_router

from .settings.router import router as settings_router
from .health.router import router as health_router
from .error_reporting.router import router as error_reporting_router

# –ò–º–ø–æ—Ä—Ç middleware
from .infrastructure.middleware.logging import RequestLoggingMiddleware
from .infrastructure.middleware.rate_limit import SimpleRateLimitMiddleware

# –ò–º–ø–æ—Ä—Ç handlers
from .handlers import (
    base_exception_handler,
    cache_exception_handler,
    database_exception_handler,
    generic_exception_handler,
    rate_limit_exception_handler,
    validation_exception_handler,
    vk_api_exception_handler,
)

# –ò–º–ø–æ—Ä—Ç ARQ –º–æ–¥—É–ª—è
from .arq.router import router as arq_router
from .infrastructure.arq_service import arq_service

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    logger.info(
        "üöÄ –ó–∞–ø—É—Å–∫ VK Comments Parser v1.7.0 (FastAPI Best Practices)..."
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        await database_service.init_database()
        logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ARQ —Å–µ—Ä–≤–∏—Å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if config_service.arq_enabled:
        try:
            await arq_service.initialize()
            logger.info("‚ö° ARQ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ARQ: {e}")
            raise
    else:
        logger.info("‚ö° ARQ —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üìã API v1.7.0 –¥–æ—Å—Ç—É–ø–µ–Ω: /api/v1")
    logger.info("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /docs")

    yield

    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VK Comments Parser...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º ARQ —Å–µ—Ä–≤–∏—Å
    if config_service.arq_enabled:
        try:
            await arq_service.close()
            logger.info("‚ö° ARQ —Å–µ—Ä–≤–∏—Å –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è ARQ: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="VK Comments Parser API",
    version="1.7.0",
    description="""
    üöÄ **Enterprise-grade VK Comments Parser API v1.7.0**

    ## üèóÔ∏è **FastAPI Best Practices Architecture**
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π fastapi-best-practices

    ## ‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v1.7.0:
    - üèóÔ∏è **FastAPI Best Practices** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    - üì¶ **–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ
    - üéØ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏
    - ‚ö° **–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    - üîç **–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è** - –ø–æ–ª–Ω–∞—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - üè• **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ health checks** - readiness/liveness –ø—Ä–æ–≤–µ—Ä–∫–∏

    ## üìö API Endpoints:
    - **Comments**: `/api/v1/comments` - —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Groups**: `/api/v1/groups` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ VK (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Keywords**: `/api/v1/keywords` - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Parser**: `/api/v1/parser` - –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Health**: `/api/v1/health` - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Settings**: `/api/v1/settings` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    - **Errors**: `/api/v1/reports` - –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

    - **Morphological**: `/api/v1/morphological` - –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

    ## üîß Enterprise-grade –£–ª—É—á—à–µ–Ω–∏—è:
    - **FastAPI Best Practices** - —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    - **–ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞** - —á–∏—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏
    - **Production Monitoring** - health checks, –º–µ—Ç—Ä–∏–∫–∏, –ª–æ–≥–∏
    - **Error Handling** - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - **Request Tracking** - –ø–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

    ## üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
    - **Swagger UI**: `/docs`
    - **ReDoc**: `/redoc`
    - **OpenAPI**: `/openapi.json`
    """,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)


# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ middleware
app.add_middleware(RequestLoggingMiddleware)
app.add_middleware(SimpleRateLimitMiddleware)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(APIException)
async def handle_api_exception(request: Request, exc: APIException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö API –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": {
                "code": exc.error_code or "UNKNOWN_ERROR",
                "message": exc.detail,
                "status_code": exc.status_code,
            },
            "extra_data": exc.extra_data,
        },
    )


@app.exception_handler(HTTPException)
async def handle_http_exception(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": {
                "code": "HTTP_EXCEPTION",
                "message": exc.detail,
                "status_code": exc.status_code,
            }
        },
    )


@app.exception_handler(Exception)
async def handle_unexpected_error(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"Unexpected error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "status_code": 500,
            }
        },
    )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
app.add_exception_handler(Exception, generic_exception_handler)
app.add_exception_handler(ValueError, validation_exception_handler)
app.add_exception_handler(BaseAPIException, base_exception_handler)


# –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ API
@app.get("/api/v1/")
async def api_info(request: Request):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API v1.7.0"""
    return {
        "service": "VK Comments Parser API",
        "version": "v1.7.0",
        "description": "üöÄ Enterprise-grade API —Å FastAPI Best Practices –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
        "status": "‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ - –º–æ–¥—É–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏",
        "features": [
            "üèóÔ∏è FastAPI Best Practices –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "üì¶ –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
            "üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "‚ö° –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "üè• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ health checks",
        ],
        "modules_status": {
            "auth": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "comments": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "groups": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "parser": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "morphological": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "keywords": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "vk_api": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "settings": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "health": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "error_reporting": "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc",
            "openapi": "/openapi.json",
        },
        "changelog": "–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ FastAPI Best Practices —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
        "architecture": {
            "structure": "src/{module}/",
            "modules": [
                "auth",
                "comments",
                "groups",
                "parser",
                "morphological",
            ],
            "global_components": [
                "config",
                "database",
                "exceptions",
                "pagination",
                "main",
            ],
        },
    }


# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {"status": "healthy", "version": "1.7.0"}


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –º–æ–¥—É–ª–µ–π
app.include_router(auth_router, prefix="/api/v1", tags=["Authentication"])
app.include_router(comments_router, prefix="/api/v1", tags=["Comments"])
app.include_router(groups_router, prefix="/api/v1", tags=["Groups"])
app.include_router(parser_router, prefix="/api/v1", tags=["Parser"])
app.include_router(
    morphological_router, prefix="/api/v1", tags=["Morphological Analysis"]
)
app.include_router(
    keywords_router, prefix="/api/v1", tags=["Keywords Management"]
)

app.include_router(
    settings_router, prefix="/api/v1", tags=["Settings Management"]
)
app.include_router(health_router, prefix="/api/v1", tags=["Health Monitoring"])
app.include_router(
    error_reporting_router, prefix="/api/v1", tags=["Error Reports"]
)
app.include_router(arq_router, prefix="/api/v1", tags=["ARQ Tasks"])


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "src.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
    )
