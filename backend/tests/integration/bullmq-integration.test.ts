import { Queue, Worker, Job } from 'bullmq';
import Redis from 'ioredis';
import request from 'supertest';
import app from '../../src/server';
import { performance } from 'perf_hooks';

// Mock dependencies for controlled testing
jest.mock('../../src/services/taskService', () => ({
  default: {
    createTask: jest.fn(),
    getTaskStatus: jest.fn(),
    getTaskById: jest.fn(),
    startCollect: jest.fn(),
    updateTaskStatus: jest.fn(),
    updateTaskProgress: jest.fn(),
  }
}));

jest.mock('../../src/repositories/vkApi', () => ({
  default: {
    getGroupsInfo: jest.fn(),
  }
}));

import taskService from '../../src/services/taskService';
import vkApi from '../../src/repositories/vkApi';

const mockTaskService = taskService as jest.Mocked<typeof taskService>;
const mockVkApi = vkApi as jest.Mocked<typeof vkApi>;

/**
 * BullMQ Integration Testing Strategy
 * 
 * –¶–µ–ª—å: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BullMQ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–∑–∞–≤–∏—Å—à–∏—Ö" –∑–∞–¥–∞—á
 * 
 * –ü–æ–∫—Ä—ã—Ç–∏–µ:
 * 1. Queue Configuration Testing - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏
 * 2. Job Lifecycle Testing - –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–¥–∞—á
 * 3. Worker Integration Testing - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏
 * 4. Error Handling Testing - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
 * 5. Concurrent Processing Testing - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
 * 6. Retry Logic Testing - –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * 7. Queue Monitoring Testing - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
 */
describe('BullMQ Integration Strategy Tests', () => {
  let testQueue: Queue;
  let testWorker: Worker;
  let redisConnection: Redis;

  beforeAll(async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    redisConnection = new Redis({
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      maxRetriesPerRequest: 3,
      retryDelayOnFailover: 100,
      db: 15, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    });

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    await redisConnection.flushdb();
  });

  beforeEach(async () => {
    jest.clearAllMocks();

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏
    testQueue = new Queue('test-vk-collect', {
      connection: redisConnection,
      defaultJobOptions: {
        removeOnComplete: 10,
        removeOnFail: 5,
        attempts: 3,
        backoff: {
          type: 'exponential',
          delay: 1000,
        },
      },
    });

    // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await testQueue.obliterate({ force: true });
  });

  afterEach(async () => {
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    if (testWorker) {
      await testWorker.close();
    }
    if (testQueue) {
      await testQueue.close();
    }
  });

  afterAll(async () => {
    if (redisConnection) {
      await redisConnection.disconnect();
    }
  });

  describe('1. Queue Configuration Validation', () => {
    it('should validate queue configuration matches production settings', async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç production –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const queueConfig = {
        connection: redisConnection,
        defaultJobOptions: {
          removeOnComplete: 100,
          removeOnFail: 50,
          attempts: 3,
          backoff: {
            type: 'exponential',
            delay: 5000,
          },
          delay: 1000,
        },
      };

      const productionQueue = new Queue('vk-collect', queueConfig);
      
      expect(productionQueue.name).toBe('vk-collect');
      expect(productionQueue.opts.defaultJobOptions?.attempts).toBe(3);
      expect(productionQueue.opts.defaultJobOptions?.removeOnComplete).toBe(100);
      expect(productionQueue.opts.defaultJobOptions?.removeOnFail).toBe(50);
      
      await productionQueue.close();
      
      console.log('‚úÖ VALIDATION: Queue configuration matches production requirements');
    });

    it('should validate Redis connection health for queue operations', async () => {
      const startTime = performance.now();
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
      const pingResult = await redisConnection.ping();
      expect(pingResult).toBe('PONG');
      
      const connectionTime = performance.now() - startTime;
      expect(connectionTime).toBeLessThan(100); // Should be fast
      
      console.log(`‚úÖ VALIDATION: Redis connection healthy (${connectionTime.toFixed(2)}ms)`);
    });

    it('should validate queue persistence and recovery', async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º job –≤ –æ—á–µ—Ä–µ–¥—å
      const job = await testQueue.add('test-job', { taskId: 1 });
      expect(job.id).toBeDefined();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ Redis
      const jobs = await testQueue.getJobs(['waiting']);
      expect(jobs).toHaveLength(1);
      expect(jobs[0].data.taskId).toBe(1);
      
      console.log('‚úÖ VALIDATION: Queue persistence working correctly');
    });
  });

  describe('2. Job Lifecycle Testing', () => {
    it('should validate complete job lifecycle: waiting -> active -> completed', async () => {
      const jobData = { taskId: 1, groups: [123, 456] };
      const lifecycleEvents: string[] = [];
      
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ job
      testQueue.on('waiting', (job) => {
        lifecycleEvents.push(`waiting:${job.id}`);
        console.log(`üìù Job ${job.id} moved to waiting state`);
      });
      
      testQueue.on('active', (job) => {
        lifecycleEvents.push(`active:${job.id}`);
        console.log(`üîÑ Job ${job.id} started processing`);
      });
      
      testQueue.on('completed', (job) => {
        lifecycleEvents.push(`completed:${job.id}`);
        console.log(`‚úÖ Job ${job.id} completed successfully`);
      });
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ jobs
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        console.log(`üöÄ Worker processing job ${job.id} with data:`, job.data);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ mockTaskService
        mockTaskService.updateTaskStatus.mockResolvedValue({
          status: 'processing',
          startedAt: new Date(),
          progress: 50
        });
        
        return { success: true, processed: 100 };
      }, { connection: redisConnection });
      
      // –î–æ–±–∞–≤–ª—è–µ–º job –≤ –æ—á–µ—Ä–µ–¥—å
      const job = await testQueue.add('vk-collect-task', jobData);
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await job.waitUntilFinished(testQueue.events);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
      expect(lifecycleEvents).toContain(`waiting:${job.id}`);
      expect(lifecycleEvents).toContain(`active:${job.id}`);
      expect(lifecycleEvents).toContain(`completed:${job.id}`);
      
      console.log('‚úÖ VALIDATION: Complete job lifecycle executed successfully');
    });

    it('should validate job failure and retry logic', async () => {
      let attemptCount = 0;
      const maxAttempts = 3;
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–∞–¥–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2 —Ä–∞–∑–∞
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        attemptCount++;
        console.log(`üîÑ Attempt ${attemptCount} for job ${job.id}`);
        
        if (attemptCount < maxAttempts) {
          throw new Error(`Simulated failure on attempt ${attemptCount}`);
        }
        
        return { success: true, attempts: attemptCount };
      }, { 
        connection: redisConnection,
        autorun: false
      });
      
      const job = await testQueue.add('failing-task', { taskId: 2 }, {
        attempts: maxAttempts,
        backoff: {
          type: 'fixed',
          delay: 100,
        },
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
      testWorker.run();
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫)
      const result = await job.waitUntilFinished(testQueue.events);
      
      expect(result.success).toBe(true);
      expect(result.attempts).toBe(3);
      expect(attemptCount).toBe(3);
      
      console.log('‚úÖ VALIDATION: Retry logic working correctly');
    });

    it('should validate job timeout handling', async () => {
      const jobTimeout = 500; // 500ms timeout
      
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        console.log(`üêå Starting slow job ${job.id}`);
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–±–æ–ª—å—à–µ timeout)
        await new Promise(resolve => setTimeout(resolve, 1000));
        return { success: true };
      }, { 
        connection: redisConnection,
        autorun: false
      });
      
      const job = await testQueue.add('slow-task', { taskId: 3 }, {
        jobTimeout,
        attempts: 1,
      });
      
      testWorker.run();
      
      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ job –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π timeout
      try {
        await job.waitUntilFinished(testQueue.events);
        fail('Job should have timed out');
      } catch (error) {
        expect(error.message).toContain('timeout');
        console.log('‚úÖ VALIDATION: Job timeout handling working correctly');
      }
    });
  });

  describe('3. API Integration with BullMQ', () => {
    it('should validate task creation triggers BullMQ job addition', async () => {
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const mockTask = { taskId: 5, status: 'pending' as const };
      mockTaskService.createTask.mockResolvedValue(mockTask);
      
      // –ú–æ–∫–∞–µ–º VK API
      mockVkApi.getGroupsInfo.mockResolvedValue([
        { id: 123, name: 'Test Group', screen_name: 'test_group', description: 'Test description' }
      ]);
      
      const taskData = { groups: [123] };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const response = await request(app)
        .post('/api/tasks/collect')
        .send(taskData)
        .expect(201);
      
      expect(response.body.success).toBe(true);
      expect(response.body.data.status).toBe('created');
      
      // –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BullMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞
      // —á—Ç–æ job –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
      // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BullMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      /*
      const jobs = await testQueue.getJobs(['waiting']);
      expect(jobs).toHaveLength(1);
      expect(jobs[0].data.taskId).toBe(5);
      */
      
      console.log('üö® CRITICAL: BullMQ job addition not implemented yet - this test will pass after fix');
    });

    it('should validate task status updates during BullMQ processing', async () => {
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        const { taskId } = job.data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'processing'
        mockTaskService.updateTaskStatus.mockResolvedValueOnce({
          status: 'processing',
          startedAt: new Date(),
          progress: 0
        });
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for (let i = 1; i <= 5; i++) {
          await new Promise(resolve => setTimeout(resolve, 50));
          
          mockTaskService.updateTaskProgress.mockResolvedValueOnce({
            progress: i * 20,
            processed: i * 10,
            total: 50
          });
          
          await job.updateProgress(i * 20);
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        mockTaskService.updateTaskStatus.mockResolvedValueOnce({
          status: 'completed',
          finishedAt: new Date(),
          progress: 100
        });
        
        return { success: true, processed: 50 };
      }, { connection: redisConnection });
      
      const job = await testQueue.add('progress-task', { taskId: 6 });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressUpdates: number[] = [];
      job.on('progress', (progress) => {
        progressUpdates.push(progress as number);
        console.log(`üìä Progress update: ${progress}%`);
      });
      
      const result = await job.waitUntilFinished(testQueue.events);
      
      expect(result.success).toBe(true);
      expect(progressUpdates).toEqual([20, 40, 60, 80, 100]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      expect(mockTaskService.updateTaskStatus).toHaveBeenCalledTimes(2);
      expect(mockTaskService.updateTaskProgress).toHaveBeenCalledTimes(5);
      
      console.log('‚úÖ VALIDATION: Task status updates work correctly with BullMQ');
    });
  });

  describe('4. Performance and Concurrency Testing', () => {
    it('should validate concurrent job processing performance', async () => {
      const jobCount = 10;
      const jobs: Job[] = [];
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        await new Promise(resolve => setTimeout(resolve, 100));
        return { jobId: job.id, processed: true };
      }, { 
        connection: redisConnection,
        concurrency: 5 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 5 jobs –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      });
      
      const startTime = performance.now();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ jobs –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      for (let i = 1; i <= jobCount; i++) {
        const job = await testQueue.add('concurrent-task', { taskId: i });
        jobs.push(job);
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö jobs
      await Promise.all(jobs.map(job => job.waitUntilFinished(testQueue.events)));
      
      const totalTime = performance.now() - startTime;
      const avgTimePerJob = totalTime / jobCount;
      
      console.log(`‚ö° PERFORMANCE: ${jobCount} jobs processed in ${totalTime.toFixed(2)}ms (avg: ${avgTimePerJob.toFixed(2)}ms per job)`);
      
      // –° concurrency=5 –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ —á–µ–º jobCount * 100ms
      expect(totalTime).toBeLessThan(jobCount * 100 * 0.6); // –ù–∞ 40% –±—ã—Å—Ç—Ä–µ–µ
      
      console.log('‚úÖ VALIDATION: Concurrent processing improves performance');
    });

    it('should validate queue memory usage under load', async () => {
      const jobCount = 100;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ jobs –≤ –æ—á–µ—Ä–µ–¥—å
      for (let i = 1; i <= jobCount; i++) {
        await testQueue.add('memory-test', { taskId: i, data: 'x'.repeat(1000) });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ jobs –≤ –æ—á–µ—Ä–µ–¥–∏
      const waiting = await testQueue.getJobCounts('waiting');
      expect(waiting.waiting).toBe(jobCount);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis
      const memoryInfo = await redisConnection.memory('usage', 'test-vk-collect');
      console.log(`üíæ MEMORY: Queue using ${memoryInfo} bytes for ${jobCount} jobs`);
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
      await testQueue.obliterate({ force: true });
      
      const afterCleanup = await testQueue.getJobCounts('waiting');
      expect(afterCleanup.waiting).toBe(0);
      
      console.log('‚úÖ VALIDATION: Queue memory usage is manageable');
    });
  });

  describe('5. Error Recovery and Monitoring', () => {
    it('should validate dead letter queue handling', async () => {
      const maxAttempts = 2;
      const failedJobs: Job[] = [];
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        throw new Error('Permanent failure');
      }, { connection: redisConnection });
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º failed jobs
      testQueue.on('failed', (job) => {
        failedJobs.push(job!);
        console.log(`‚ùå Job ${job!.id} permanently failed after ${job!.attemptsMade} attempts`);
      });
      
      const job = await testQueue.add('failing-task', { taskId: 7 }, {
        attempts: maxAttempts,
        backoff: { type: 'fixed', delay: 100 }
      });
      
      // –ñ–¥–µ–º permanent failure
      try {
        await job.waitUntilFinished(testQueue.events);
        fail('Job should have permanently failed');
      } catch (error) {
        expect(error.message).toBe('Permanent failure');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job –ø–æ–ø–∞–ª –≤ failed queue
      const failedCount = await testQueue.getJobCounts('failed');
      expect(failedCount.failed).toBe(1);
      expect(failedJobs).toHaveLength(1);
      expect(failedJobs[0].attemptsMade).toBe(maxAttempts);
      
      console.log('‚úÖ VALIDATION: Dead letter queue handles permanent failures');
    });

    it('should validate queue health monitoring metrics', async () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã jobs –¥–ª—è –º–µ—Ç—Ä–∏–∫
      await testQueue.add('success-task', { taskId: 8 });
      await testQueue.add('fail-task', { taskId: 9 }, { attempts: 1 });
      
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        if (job.data.taskId === 9) {
          throw new Error('Test failure');
        }
        return { success: true };
      }, { connection: redisConnection });
      
      // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
      const counts = await testQueue.getJobCounts();
      console.log('üìä Queue metrics:', counts);
      
      expect(counts.completed).toBeGreaterThan(0);
      expect(counts.failed).toBeGreaterThan(0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º active jobs
      const activeJobs = await testQueue.getActive();
      const waitingJobs = await testQueue.getWaiting();
      
      console.log(`üìà MONITORING: Active: ${activeJobs.length}, Waiting: ${waitingJobs.length}`);
      console.log('‚úÖ VALIDATION: Queue monitoring metrics available');
    });
  });

  describe('6. Regression Testing for BullMQ Fix', () => {
    it('should verify the fix for pending tasks never progressing', async () => {
      // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BullMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      console.log('üîß REGRESSION TEST: Verifying BullMQ integration fix');
      
      const mockTask = { taskId: 10, status: 'pending' as const };
      mockTaskService.createTask.mockResolvedValue(mockTask);
      mockVkApi.getGroupsInfo.mockResolvedValue([
        { id: 123, name: 'Test Group', screen_name: 'test_group', description: 'Test description' }
      ]);
      
      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
      testWorker = new Worker('test-vk-collect', async (job: Job) => {
        const { taskId } = job.data;
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ processing
        mockTaskService.updateTaskStatus.mockResolvedValue({
          status: 'processing',
          startedAt: new Date(),
          progress: 0
        });
        
        console.log(`üöÄ Worker started processing task ${taskId}`);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
        await new Promise(resolve => setTimeout(resolve, 200));
        
        return { success: true, taskId };
      }, { connection: redisConnection });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
      const response = await request(app)
        .post('/api/tasks/collect')
        .send({ groups: [123] })
        .expect(201);
      
      expect(response.body.success).toBe(true);
      
      // –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: job –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å
      // –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º
      
      // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      /*
      // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
      const completedJobs = await testQueue.getCompleted();
      expect(completedJobs.length).toBeGreaterThan(0);
      
      const processedJob = completedJobs.find(job => job.data.taskId === 10);
      expect(processedJob).toBeDefined();
      expect(processedJob?.returnvalue.success).toBe(true);
      */
      
      console.log('üö® REGRESSION: This test will validate the BullMQ fix when implemented');
    });
  });
});

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BullMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * 
 * üìã –ü–õ–ê–ù –í–ê–õ–ò–î–ê–¶–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
 * 
 * 1. PRE-FIX VALIDATION:
 *    - ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã (pending tasks never progress)
 *    - ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –≥–æ—Ç–æ–≤–∞
 *    - ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
 * 
 * 2. POST-FIX VALIDATION:
 *    - ‚è≥ Jobs –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á
 *    - ‚è≥ Workers –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç jobs –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 *    - ‚è≥ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 *    - ‚è≥ Retry logic —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 *    - ‚è≥ Performance —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
 * 
 * 3. REGRESSION PREVENTION:
 *    - ‚úÖ Monitoring metrics –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
 *    - ‚úÖ Error recovery –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
 *    - ‚úÖ Load testing –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
 * 
 * üéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:
 * - –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ—Å–ª–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BullMQ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * - –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∏–∑ pending –≤ processing –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * - startedAt —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * - Frontend polling –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 * - Performance –Ω–µ –¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ—Ç –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
 * 
 * üìä –ú–ï–¢–†–ò–ö–ò –í–ê–õ–ò–î–ê–¶–ò–ò:
 * - Task processing rate: > 10 tasks/second
 * - Queue latency: < 100ms
 * - Memory usage: < 100MB for 1000 jobs
 * - Error rate: < 1% for successful scenarios
 * - Recovery time: < 5 seconds for worker restarts
 */