"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è VK Comments Parser
"""

import asyncio

import structlog
from fastapi import FastAPI
from fastapi.exception_handlers import RequestValidationError
from fastapi.exceptions import HTTPException as FastAPIHTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.requests import Request
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.status import HTTP_500_INTERNAL_SERVER_ERROR

from app.api.v1.api import api_router
from app.core.config import settings
from app.core.database import init_db
from app.middleware.request_logging import RequestLoggingMiddleware
from app.services.scheduler_service import get_scheduler_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer(),
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger()


async def lifespan(app: FastAPI):
    """Lifespan context manager –¥–ª—è startup/shutdown —Å–æ–±—ã—Ç–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    # Startup - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK Comments Parser...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –≤ —Ñ–æ–Ω–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –∑–∞–ø—É—Å–∫
    try:
        await init_db()
        logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    scheduler_task = None
    try:
        if settings.monitoring.auto_start_scheduler:
            logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            scheduler = await get_scheduler_service()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            scheduler_task = asyncio.create_task(
                scheduler.start_monitoring_scheduler(
                    settings.monitoring.scheduler_interval_seconds
                )
            )
            logger.info(
                "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω",
                interval_seconds=settings.monitoring.scheduler_interval_seconds,
            )
        else:
            logger.info("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    yield

    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VK Comments Parser...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if scheduler_task:
        try:
            scheduler = await get_scheduler_service()
            await scheduler.stop_monitoring_scheduler()
            scheduler_task.cancel()
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
app = FastAPI(
    title="VK Comments Parser",
    version="1.0.0",
    description="API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
    openapi_url="/openapi.json" if settings.debug else None,
    lifespan=lifespan,
    redirect_slashes=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ trailing slash
)


# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error("Unhandled exception", exc_info=True, path=request.url.path)
    return JSONResponse(
        status_code=HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "internal_server_error",
            "message": str(exc),
            "path": str(request.url.path),
        },
    )


@app.exception_handler(FastAPIHTTPException)
async def http_exception_handler(request: Request, exc: FastAPIHTTPException):
    logger.warning(
        "HTTPException",
        status_code=exc.status_code,
        detail=exc.detail,
        path=request.url.path,
    )
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": "http_exception",
            "message": exc.detail,
            "path": str(request.url.path),
        },
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
):
    logger.warning(
        "Validation error", errors=exc.errors(), path=request.url.path
    )
    return JSONResponse(
        status_code=422,
        content={
            "error": "validation_error",
            "message": exc.errors(),
            "path": str(request.url.path),
        },
    )


# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ–∫—Å–∏
class ProxyHeadersMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ–∫—Å–∏ (X-Forwarded-*)"""

    async def dispatch(self, request: Request, call_next):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_proto = request.headers.get("x-forwarded-proto")
        forwarded_host = request.headers.get("x-forwarded-host")

        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ HTTPS –ø—Ä–æ–∫—Å–∏, –æ–±–Ω–æ–≤–ª—è–µ–º URL
        if forwarded_proto == "https":
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å HTTPS —Å—Ö–µ–º–æ–π
            url = request.url.replace(scheme="https")
            if forwarded_host:
                url = url.replace(netloc=forwarded_host)
            request._url = url

            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            request.scope["scheme"] = "https"
            if forwarded_host:
                request.scope["headers"] = [
                    (name, value)
                    for name, value in request.scope["headers"]
                    if name != b"host"
                ] + [(b"host", forwarded_host.encode())]

        response = await call_next(request)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTPS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
        if response.status_code in [301, 302, 303, 307, 308]:
            location = response.headers.get("location")
            if location and location.startswith("http://"):
                # –ó–∞–º–µ–Ω—è–µ–º HTTP –Ω–∞ HTTPS –≤ Location –∑–∞–≥–æ–ª–æ–≤–∫–µ
                https_location = location.replace("http://", "https://")
                response.headers["location"] = https_location

        return response


# –î–æ–±–∞–≤–ª—è–µ–º TrustedHostMiddleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"],  # –í production –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ–∫—Å–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º)
app.add_middleware(ProxyHeadersMiddleware)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(RequestLoggingMiddleware)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã (lazy loading)
app.include_router(api_router, prefix="/api/v1")
