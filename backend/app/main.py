"""
VK Comments Parser - FastAPI Backend
"""

from contextlib import asynccontextmanager

from app.api.v1.api import api_router
from app.core.config import settings
from app.core.database import init_db
from app.core.logging import get_logger, setup_logging
from app.middleware.request_logging import RequestLoggingMiddleware
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging(log_level=settings.log_level, json_logs=not settings.debug)
logger = get_logger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan context manager –¥–ª—è startup/shutdown —Å–æ–±—ã—Ç–∏–π"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VK Comments Parser...")
    await init_db()
    logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    yield

    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VK Comments Parser...")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.app_name,
    description="–ü–∞—Ä—Å–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –≥—Ä—É–ø–ø –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º",
    version="1.0.0",
    debug=settings.debug,
    lifespan=lifespan,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request Logging middleware
app.add_middleware(RequestLoggingMiddleware)


@app.get("/")
async def root() -> dict[str, str]:
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "VK Comments Parser API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs",
        "api": "/api/v1",
    }


@app.get("/health")
async def health_check() -> dict[str, str]:
    """Health check endpoint"""
    return {"status": "healthy", "service": "vk-comments-parser", "version": "1.0.0"}


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤
app.include_router(api_router, prefix=settings.api_v1_str)
