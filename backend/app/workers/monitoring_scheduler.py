#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import signal
import sys
from datetime import datetime, timezone, timedelta

import structlog
from arq import create_pool
from arq.connections import RedisSettings
from sqlalchemy import select, and_, update
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.services.monitoring_service import MonitoringService
from app.services.vk_api_service import VKAPIService
from app.core.database import AsyncSessionLocal
from app.models.vk_group import VKGroup

logger = structlog.get_logger(__name__)


async def check_and_fix_outdated_monitoring_times(db: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        now = datetime.now(timezone.utc)

        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        result = await db.execute(
            select(VKGroup).where(
                and_(
                    VKGroup.is_active == True,
                    VKGroup.auto_monitoring_enabled == True,
                    VKGroup.next_monitoring_at <= now,
                )
            )
        )
        outdated_groups = result.scalars().all()

        if outdated_groups:
            logger.warning(
                f"–ù–∞–π–¥–µ–Ω–æ {len(outdated_groups)} –≥—Ä—É–ø–ø —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –≥—Ä—É–ø–ø
            next_time = now + timedelta(hours=1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å –≤–ø–µ—Ä–µ–¥

            await db.execute(
                update(VKGroup)
                .where(
                    and_(
                        VKGroup.is_active == True,
                        VKGroup.auto_monitoring_enabled == True,
                        VKGroup.next_monitoring_at <= now,
                    )
                )
                .values(next_monitoring_at=next_time)
            )
            await db.commit()

            logger.info(
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(outdated_groups)} –≥—Ä—É–ø–ø –Ω–∞ {next_time.isoformat()}"
            )
        else:
            logger.info("–í—Å–µ –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await db.rollback()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def signal_handler(signum, frame):
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis pool
        redis_pool = await create_pool(
            RedisSettings.from_dsn(settings.redis_url)
        )
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_interval = getattr(
            settings, "monitoring_interval_seconds", 300
        )

        logger.info(
            "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω",
            interval_seconds=monitoring_interval,
            start_time=datetime.now(timezone.utc).isoformat(),
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while True:
            try:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
                async with AsyncSessionLocal() as db:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    await check_and_fix_outdated_monitoring_times(db)

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
                    vk_service = VKAPIService(
                        token=settings.vk.access_token,
                        api_version=settings.vk.api_version,
                    )
                    monitoring_service = MonitoringService(db, vk_service)

                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    result = await monitoring_service.run_monitoring_cycle()

                    logger.info("‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω", result=result)

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                logger.info(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {monitoring_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞"
                )
                await asyncio.sleep(monitoring_interval)

            except Exception as e:
                logger.error(
                    "üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    error=str(e),
                    exc_info=True,
                )
                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(60)

    except KeyboardInterrupt:
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(
            "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", error=str(e), exc_info=True
        )
        sys.exit(1)
    finally:
        if "redis_pool" in locals():
            await redis_pool.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    asyncio.run(main())
