"""
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä API v1 –¥–ª—è VK Comments Parser
—Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ enterprise-grade middleware
"""

from typing import Dict, Any
from fastapi import APIRouter, Request
from ..handlers.common import create_success_response

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
from app.api.v1.routers.comments import router as comments_router
from app.api.v1.routers.groups import router as groups_router
from app.api.v1.routers.keywords import router as keywords_router
from app.api.v1.routers.parser import router as parser_router
from app.api.v1.routers.health import router as health_router
from app.api.v1.routers.settings import router as settings_router
from app.api.v1.routers.errors import router as errors_router
from app.api.v1.routers.monitoring import router as monitoring_router
from app.api.v1.routers.morphological import router as morphological_router

# –ò–º–ø–æ—Ä—Ç middleware –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from app.api.v1.middleware.rate_limit import SimpleRateLimitMiddleware
from app.api.v1.middleware.logging import RequestLoggingMiddleware

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å enterprise-grade –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
api_router = APIRouter(
    prefix="",
    tags=["API v1"],
    responses={
        400: {
            "model": dict,
            "description": "Bad Request - Invalid input data",
        },
        401: {
            "model": dict,
            "description": "Unauthorized - Authentication required",
        },
        403: {
            "model": dict,
            "description": "Forbidden - Insufficient permissions",
        },
        404: {"model": dict, "description": "Not Found - Resource not found"},
        422: {
            "model": dict,
            "description": "Validation Error - Invalid request data",
        },
        429: {
            "model": dict,
            "description": "Too Many Requests - Rate limit exceeded",
        },
        500: {
            "model": dict,
            "description": "Internal Server Error - Server error occurred",
        },
        503: {
            "model": dict,
            "description": "Service Unavailable - Service temporarily unavailable",
        },
    },
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
api_router.include_router(comments_router, tags=["Comments"])
api_router.include_router(groups_router, tags=["Groups"])
api_router.include_router(keywords_router, tags=["Keywords"])
api_router.include_router(parser_router, tags=["Parser"])

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (–ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
api_router.include_router(monitoring_router, tags=["Monitoring"])
api_router.include_router(morphological_router, tags=["Morphological"])
api_router.include_router(errors_router, tags=["Errors"])
api_router.include_router(settings_router, tags=["Settings"])
api_router.include_router(health_router, tags=["Health"])


@api_router.get("/")
async def api_info(request: Request) -> Dict[str, Any]:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API v1.6.0 —Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    try:
        api_data = {
            "service": "VK Comments Parser API",
            "version": "v1.6.0",
            "description": "üöÄ Enterprise-grade API —Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ middleware",
            "status": "‚úÖ API —É–ª—É—á—à–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω—ã middleware, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "features": [
                "üèóÔ∏è Domain-Driven Design (DDD) –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                "üõ°Ô∏è Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫",
                "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
                "üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏",
                "‚ö° –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö",
                "üìù –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
                "üè• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ health checks",
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏",
                "üìã –°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö",
                "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ VK –≥—Ä—É–ø–ø",
                "üî§ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞",
            ],
            "improvements": [
                "Domain-Driven Design Architecture",
                "Application Services Layer",
                "Rate Limiting Middleware",
                "Request Logging Middleware",
                "Standardized Response Format",
                "Enhanced Error Handling",
                "Request ID Tracking",
                "Performance Monitoring",
                "Health Check System",
                "Settings Management",
                "Monitoring System",
                "Morphological Analysis",
            ],
            "endpoints": {
                "comments": "/api/v1/comments",
                "groups": "/api/v1/groups",
                "keywords": "/api/v1/keywords",
                "parser": "/api/v1/parser",
                "monitoring": "/api/v1/monitoring",
                "morphological": "/api/v1/morphological",
                "errors": "/api/v1/reports",
                "settings": "/api/v1/settings",
                "health": "/api/v1/health",
            },
            "documentation": {
                "swagger": "/docs",
                "redoc": "/redoc",
                "openapi": "/openapi.json",
            },
            "changelog": "–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å DDD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, middleware –∏ enterprise-grade —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
            "architecture": {
                "domain_layer": [
                    "entities",
                    "value_objects",
                    "domain_services",
                ],
                "application_layer": ["application_services", "use_cases"],
                "infrastructure_layer": [
                    "routers",
                    "middleware",
                    "handlers",
                    "dependencies",
                ],
            },
        }

        return await create_success_response(
            request, api_data, {"message": "API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"}
        )
    except Exception as e:
        from ..handlers.common import create_error_response

        return await create_error_response(
            request,
            500,
            "API_INFO_FAILED",
            f"Failed to get API info: {str(e)}",
        )


# Health check —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä health.py
