"""
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä API v1 –¥–ª—è VK Comments Parser
—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ middleware
"""

from typing import Dict, Any
from fastapi import APIRouter

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.api.v1.routers.comments import router as comments_router
from app.api.v1.routers.groups import router as groups_router
from app.api.v1.routers.keywords import router as keywords_router
from app.api.v1.routers.parser import router as parser_router

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞—Ä—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
from app.api.v1.monitoring import router as monitoring_router
from app.api.v1.morphological import router as morphological_router
from app.api.v1.errors import router as errors_router
from app.api.v1.settings import router as settings_router
from app.api.v1.health import router as health_router

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
api_router = APIRouter(
    prefix="",
    tags=["API v1"],
    responses={
        404: {"description": "Endpoint not found"},
        500: {"description": "Internal server error"},
    },
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
api_router.include_router(comments_router, tags=["Comments"])
api_router.include_router(groups_router, tags=["Groups"])
api_router.include_router(keywords_router, tags=["Keywords"])
api_router.include_router(parser_router, tags=["Parser"])

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (–ø–æ–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
api_router.include_router(monitoring_router, tags=["Monitoring"])
api_router.include_router(morphological_router, tags=["Morphological"])
api_router.include_router(errors_router, tags=["Errors"])
api_router.include_router(settings_router, tags=["Settings"])
api_router.include_router(health_router, tags=["Health"])


@api_router.get("/")
async def api_info() -> Dict[str, Any]:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API v1.5.0 —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    return {
        "service": "VK Comments Parser API",
        "version": "v1.5.0",
        "description": "üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API v1 —Å middleware –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–µ–π",
        "status": "‚úÖ API —É–ª—É—á—à–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω—ã middleware, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "features": [
            "üõ°Ô∏è Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫",
            "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ—à–∏–±–∫–∏",
            "‚ö° –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö",
            "üìù –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
        ],
        "improvements": [
            "Rate Limiting Middleware",
            "Request Logging Middleware",
            "Standardized Response Format",
            "Enhanced Error Handling",
            "Request ID Tracking",
            "Performance Monitoring",
        ],
        "endpoints": {
            "comments": "/api/v1/comments",
            "groups": "/api/v1/groups",
            "keywords": "/api/v1/keywords",
            "parser": "/api/v1/parser",
            "monitoring": "/api/v1/monitoring",
            "morphological": "/api/v1/morphological",
            "errors": "/api/v1/errors",
            "settings": "/api/v1/settings",
            "health": "/api/v1/health",
        },
        "documentation": {
            "swagger": "/docs",
            "redoc": "/redoc",
            "openapi": "/openapi.json",
        },
        "health_check": "/api/v1/health",
        "changelog": "–£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω—ã middleware",
    }


@api_router.get("/health")
async def health_check() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    from datetime import datetime
    from app.core.database import get_db_session

    health_status = {
        "status": "healthy",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "2.0.0",
        "services": {},
    }

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with get_db_session() as db:
            await db.execute("SELECT 1")
            health_status["services"]["database"] = "‚úÖ connected"
    except Exception as e:
        health_status["services"]["database"] = f"‚ùå error: {str(e)}"
        health_status["status"] = "unhealthy"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    try:
        from app.services.comment_service import comment_service

        health_status["services"]["comment_service"] = "‚úÖ loaded"
    except Exception as e:
        health_status["services"]["comment_service"] = f"‚ùå error: {str(e)}"

    try:
        from app.services.group_manager import group_manager

        health_status["services"]["group_manager"] = "‚úÖ loaded"
    except Exception as e:
        health_status["services"]["group_manager"] = f"‚ùå error: {str(e)}"

    try:
        from app.services.vk_api_service import VKAPIService

        health_status["services"]["vk_api_service"] = "‚úÖ loaded"
    except Exception as e:
        health_status["services"]["vk_api_service"] = f"‚ùå error: {str(e)}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if any("‚ùå" in status for status in health_status["services"].values()):
        health_status["status"] = "degraded"

    return health_status
