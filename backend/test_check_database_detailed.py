#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio

from sqlalchemy import and_, select
from sqlalchemy.orm import selectinload

from app.core.database import AsyncSessionLocal
from app.models.comment_keyword_match import CommentKeywordMatch
from app.models.keyword import Keyword
from app.models.vk_comment import VKComment


async def test_check_database_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    async with AsyncSessionLocal() as db:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–≥–∏–≤–∏"
        print("\nüìã 1. –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º '–≥–∏–≤–∏':")
        result = await db.execute(
            select(VKComment).where(VKComment.text.ilike("%–≥–∏–≤–∏%"))
        )
        comments_with_givi = result.scalars().all()

        print(
            f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–≥–∏–≤–∏' –≤ —Ç–µ–∫—Å—Ç–µ: {len(comments_with_givi)}"
        )
        for comment in comments_with_givi:
            print(f"   - ID: {comment.id}, VK ID: {comment.vk_id}")
            print(f"     –¢–µ–∫—Å—Ç: {comment.text}")
            print(f"     is_processed: {comment.is_processed}")
            print(
                f"     matched_keywords_count: {comment.matched_keywords_count}"
            )
            print(f"     –û–±—Ä–∞–±–æ—Ç–∞–Ω: {comment.processed_at}")
            print()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å matched_keywords_count > 0
        print("\nüìã 2. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å matched_keywords_count > 0:")
        result = await db.execute(
            select(VKComment).where(VKComment.matched_keywords_count > 0)
        )
        comments_with_matches = result.scalars().all()

        print(
            f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å matched_keywords_count > 0: {len(comments_with_matches)}"
        )
        for comment in comments_with_matches:
            print(f"   - ID: {comment.id}, VK ID: {comment.vk_id}")
            print(f"     –¢–µ–∫—Å—Ç: {comment.text}")
            print(
                f"     matched_keywords_count: {comment.matched_keywords_count}"
            )
            print(f"     is_processed: {comment.is_processed}")
            print()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å is_processed = True
        print("\nüìã 3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å is_processed = True:")
        result = await db.execute(
            select(VKComment).where(VKComment.is_processed == True)
        )
        processed_comments = result.scalars().all()

        print(
            f"   –ù–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(processed_comments)}"
        )

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ API
        print(
            "\nüìã 4. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ API (is_processed=True AND matched_keywords_count>0):"
        )
        result = await db.execute(
            select(VKComment).where(
                and_(
                    VKComment.is_processed == True,
                    VKComment.matched_keywords_count > 0,
                )
            )
        )
        api_comments = result.scalars().all()

        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è API: {len(api_comments)}")
        for comment in api_comments:
            print(f"   - ID: {comment.id}, VK ID: {comment.vk_id}")
            print(f"     –¢–µ–∫—Å—Ç: {comment.text}")
            print(
                f"     matched_keywords_count: {comment.matched_keywords_count}"
            )
            print()

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        print("\nüìã 5. –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ CommentKeywordMatch:")
        result = await db.execute(
            select(CommentKeywordMatch)
            .options(selectinload(CommentKeywordMatch.comment))
            .options(selectinload(CommentKeywordMatch.keyword))
        )
        matches = result.scalars().all()

        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        for match in matches:
            print(f"   - Match ID: {match.id}")
            print(
                f"     Comment ID: {match.comment_id}, VK ID: {match.comment.vk_id if match.comment else 'N/A'}"
            )
            print(
                f"     Keyword ID: {match.keyword_id}, Word: {match.keyword.word if match.keyword else 'N/A'}"
            )
            print(f"     Matched Text: {match.matched_text}")
            print()

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "–≥–∏–≤–∏"
        print("\nüìã 6. –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '–≥–∏–≤–∏':")
        result = await db.execute(
            select(Keyword).where(Keyword.word.ilike("%–≥–∏–≤–∏%"))
        )
        givi_keywords = result.scalars().all()

        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å '–≥–∏–≤–∏': {len(givi_keywords)}")
        for keyword in givi_keywords:
            print(
                f"   - ID: {keyword.id}, Word: {keyword.word}, Active: {keyword.is_active}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            result = await db.execute(
                select(CommentKeywordMatch)
                .where(CommentKeywordMatch.keyword_id == keyword.id)
                .options(selectinload(CommentKeywordMatch.comment))
            )
            keyword_matches = result.scalars().all()
            print(
                f"     –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {len(keyword_matches)}"
            )
            for match in keyword_matches:
                print(
                    f"       - Comment ID: {match.comment_id}, VK ID: {match.comment.vk_id if match.comment else 'N/A'}"
                )
                print(
                    f"         Text: {match.comment.text if match.comment else 'N/A'}"
                )
            print()


if __name__ == "__main__":
    asyncio.run(test_check_database_detailed())
