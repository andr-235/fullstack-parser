#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
"""

import asyncio
from app.services.vk_api_service import VKAPIService
from app.services.parser_service import ParserService
from app.core.database import AsyncSessionLocal
from app.core.config import settings


async def test_posts_only_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")

    async with AsyncSessionLocal() as db:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π VK API —Å–µ—Ä–≤–∏—Å
        vk_service = VKAPIService(
            token=settings.vk.access_token, api_version=settings.vk.api_version
        )

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å–µ—Ä–≤–∏—Å
        parser_service = ParserService(db=db, vk_service=vk_service)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        group_id = 43377172  # –†–ò–ê –ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω

        print(
            f"\nüìã –¢–µ—Å—Ç: –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã {group_id} (50 –ø–æ—Å—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã)"
        )
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
            posts = await vk_service.get_group_posts(
                group_id=group_id, count=50
            )
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")

            # –ò—â–µ–º –ø–æ—Å—Ç —Å "–≥–∏–≤–∏" –≤ —Ç–µ–∫—Å—Ç–µ
            target_post = None
            for post in posts:
                text = post.get("text", "").lower()
                if "–≥–∏–≤–∏" in text:
                    target_post = post
                    break

            if target_post:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç —Å '–≥–∏–≤–∏' –≤ —Ç–µ–∫—Å—Ç–µ!")
                print(f"   ID: {target_post.get('id')}")
                print(f"   –¢–µ–∫—Å—Ç: {target_post.get('text', '')[:200]}...")
                print(
                    f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {target_post.get('comments', {}).get('count', 0)}"
                )
            else:
                print("‚ùå –ü–æ—Å—Ç —Å '–≥–∏–≤–∏' –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å 50 –ø–æ—Å—Ç–∞–º–∏
            result = await parser_service.parse_group_posts(
                group_id=group_id,
                max_posts_count=50,  # 50 –ø–æ—Å—Ç–æ–≤
                force_reparse=False,
            )

            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {result.posts_processed}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {result.comments_found}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result.keyword_matches}")
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds:.2f} —Å–µ–∫")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "–≥–∏–≤–∏"
            if result.keyword_matches > 0:
                print(f"\nüîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–≥–∏–≤–∏'!")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                comments = await parser_service.filter_comments(
                    search_params={"keywords": ["–≥–∏–≤–∏"]},
                    pagination={"page": 1, "size": 10},
                )

                if comments.items:
                    print(
                        f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å '–≥–∏–≤–∏': {len(comments.items)}"
                    )
                    for i, comment in enumerate(comments.items[:3], 1):
                        print(f"   {i}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment.id}")
                        print(f"      –ê–≤—Ç–æ—Ä: {comment.author_id}")
                        print(f"      –¢–µ–∫—Å—Ç: {comment.text[:100]}...")
                        print(f"      –î–∞—Ç–∞: {comment.date}")
                        print()
                else:
                    print(
                        "   ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å '–≥–∏–≤–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
            else:
                print("   ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '–≥–∏–≤–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            import traceback

            traceback.print_exc()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º VK —Å–µ—Ä–≤–∏—Å
        await vk_service.close()


if __name__ == "__main__":
    asyncio.run(test_posts_only_parsing())
