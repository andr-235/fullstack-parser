# syntax=docker/dockerfile:1.4
# Multi-stage build для оптимизации размера образа

# Этап 1: Базовый образ для зависимостей
FROM node:18-alpine@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c AS deps

# Установка системных зависимостей
RUN apk add --no-cache libc6-compat

# Создание непривилегированного пользователя для безопасности
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Копирование файлов зависимостей для оптимизации кеширования
COPY package.json package-lock.json* ./
COPY yarn.lock* pnpm-lock.yaml* ./

# Установка зависимостей с кешированием
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production && \
    npm cache clean --force

# Этап 2: Сборка приложения
FROM node:18-alpine@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c AS builder

# Установка build зависимостей
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Копирование зависимостей из предыдущего этапа
COPY --from=deps /app/node_modules ./node_modules

# Копирование исходного кода
COPY . .

# Сборка приложения с кешированием
RUN --mount=type=cache,target=/app/.next/cache \
    npm run build

# Этап 3: Продакшн образ
FROM node:18-alpine@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c AS runner

# Установка dumb-init для правильной обработки сигналов
RUN apk add --no-cache dumb-init

# Создание непривилегированного пользователя
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Создание необходимых директорий
RUN mkdir -p /app/.next && \
    mkdir -p /app/public && \
    mkdir -p /app/logs && \
    mkdir -p /tmp && \
    mkdir -p /var/tmp

# Копирование только необходимых файлов из builder этапа
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Копирование package.json для информации о версии
COPY --from=builder /app/package.json ./package.json

# Установка прав доступа
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app && \
    chmod 1777 /tmp /var/tmp

# Переключение на непривилегированного пользователя
USER nextjs

# Метаданные образа
LABEL maintainer="team@company.com"
LABEL version="1.0.0"
LABEL description="Production Next.js application"
LABEL org.opencontainers.image.source="https://github.com/company/myapp"
LABEL org.opencontainers.image.licenses="MIT"

# Проверка здоровья приложения
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Экспорт порта
EXPOSE 3000

# Переменные окружения
ENV NODE_ENV=production
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1

# Точка входа с dumb-init для правильной обработки сигналов
ENTRYPOINT ["dumb-init", "--"]

# Команда запуска
CMD ["node", "server.js"] 