version: "3.9"
services:
  postgres:
    env_file:
      - .env.prod
    image: postgres:15-alpine
    container_name: fullstack_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "5432:5432"
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  redis:
    env_file:
      - .env.prod
    image: redis:7-alpine
    container_name: fullstack_redis_prod
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    env_file:
      - .env.prod
    image: ghcr.io/andr-235/fullstack-backend:latest
    container_name: fullstack_backend_prod
    restart: always
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - SERVER_IP=${SERVER_IP}
      - VK_ACCESS_TOKEN=${VK_ACCESS_TOKEN}
    expose:
      - "8000"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-fsSL", "http://localhost:8000/health"]
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M

  arq-worker:
    env_file:
      - .env.prod
    image: ghcr.io/andr-235/fullstack-arq-worker:latest
    container_name: fullstack_arq_worker_prod
    restart: always
    command: ["python", "-m", "app.workers.arq_worker"]
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - SERVER_IP=${SERVER_IP}
      - VK_ACCESS_TOKEN=${VK_ACCESS_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-fsSL", "http://backend:8000/health"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M

  frontend:
    env_file:
      - .env.prod
    image: ghcr.io/andr-235/fullstack-frontend:latest
    container_name: fullstack_frontend_prod
    restart: always
    environment:
      - NODE_ENV=production
      - SERVER_IP=${SERVER_IP}
    expose:
      - "3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M

  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.ip.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-fsSL", "http://frontend:3000"]
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 40s

  backup:
    image: postgres:15-alpine
    container_name: fullstack_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backup:/backup
      - ./scripts/backup.sh:/backup.sh
    networks:
      - app-network
    depends_on:
      - postgres
    entrypoint: ["/bin/sh", "/backup.sh"]
    profiles:
      - backup

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
    internal: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
