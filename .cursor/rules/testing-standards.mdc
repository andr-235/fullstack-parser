---
description: Testing standards and best practices for backend and frontend
globs: **/test_*.py, **/*_test.py, **/tests/**/*.py, **/*.test.{ts,tsx,js,jsx}, **/*.spec.{ts,tsx,js,jsx}, **/tests/**/*.{ts,tsx,js,jsx}
alwaysApply: false
---

# üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

## Backend Testing:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **pytest** —Å async support
- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ **test fixtures** –¥–ª—è database setup
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ **integration tests** –¥–ª—è API endpoints
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **pytest-mock** –¥–ª—è mocking
- –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ **80%+ coverage**

### –ü—Ä–∏–º–µ—Ä pytest fixture:
```python
import pytest
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import get_db
from app.main import app

@pytest.fixture
async def db_session():
    async with AsyncSession() as session:
        yield session
        await session.rollback()

@pytest.fixture
def client():
    return TestClient(app)

@pytest.mark.asyncio
async def test_create_user(client, db_session):
    response = client.post("/users/", json={"email": "test@example.com"})
    assert response.status_code == 201
```

## Frontend Testing:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **Jest + React Testing Library**
- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ **user-centric** testing approach
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ **component tests** –∏ **integration tests**
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **MSW** –¥–ª—è API mocking
- –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ **accessibility testing**

### –ü—Ä–∏–º–µ—Ä React component test:
```typescript
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import UsersList from '../UsersList';

const queryClient = new QueryClient({
  defaultOptions: { queries: { retry: false } }
});

test('displays users list', async () => {
  render(
    <QueryClientProvider client={queryClient}>
      <UsersList />
    </QueryClientProvider>
  );
  
  await waitFor(() => {
    expect(screen.getByText('Users')).toBeInTheDocument();
  });
});
```

## Best Practices:
- **Arrange-Act-Assert** pattern –¥–ª—è test structure
- **One assertion per test** –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
- **Descriptive test names** –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- **Mock external dependencies** (API, database, third-party services)
- **Test edge cases** –∏ error scenarios




