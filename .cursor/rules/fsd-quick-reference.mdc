# FSD Quick Reference

## **Слои (сверху вниз)**

```
app/ → pages/ → widgets/ → features/ → entities/ → shared/
```

## **Правила импортов**

```typescript
// ✅ Разрешено: только из нижних слоев
import { Button } from "@/shared/ui/button";
import { User } from "@/entities/user";
import { AuthForm } from "@/features/auth";

// ❌ Запрещено: из верхних слоев
import { AppProvider } from "@/app/providers"; // В entities/features/widgets
```

## **Структура слайса**

```
{layer}/{slice}/
├── ui/           # React компоненты
├── api/          # API вызовы, хуки
├── model/        # Состояние, типы, утилиты
├── lib/          # Вспомогательные функции
└── index.ts      # Публичный API
```

## **Публичный API**

```typescript
// entities/user/index.ts
export { UserCard } from "./ui/UserCard";
export { UserAvatar } from "./ui/UserAvatar";
export type { User } from "./model/types";
export { useUserStore } from "./model/store";
```

## **Кросс-импорты**

```typescript
// entities/user/@x/post/index.ts
export type { User } from "../model/types";

// entities/post/model/types.ts
import type { User } from "entities/user/@x/post";
```

## **Next.js + FSD**

```typescript
// app/page.tsx (Next.js)
import { HomePage } from "@/pages/home";
export default function Page() {
  return <HomePage />;
}

// src/pages/home/ui/HomePage.tsx (FSD)
export const HomePage = () => (
  <div>
    <UserGreeting />
    <HomeWidget />
  </div>
);
```

## **Серверные/Клиентские компоненты**

```typescript
// Server Component (по умолчанию)
export const DashboardPage = async () => {
  const data = await getData();
  return <div>{data}</div>;
};

// Client Component
("use client");
export const InteractiveWidget = () => {
  const [state, setState] = useState();
  return <div onClick={() => setState()}>...</div>;
};
```

## **Состояние**

```typescript
// features/auth/model/auth-store.ts
import { create } from "zustand";

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  login: async (credentials) => {
    /* ... */
  },
  logout: () => set({ user: null }),
}));
```

## **API вызовы**

```typescript
// entities/user/api/user-api.ts
import { apiClient } from "@/shared/lib/api";

export const getUser = async (id: string): Promise<User> => {
  const response = await apiClient.get(`/users/${id}`);
  return response.data;
};
```

## **Стилизация**

```typescript
// shared/ui/button/Button.module.css
.button {
  padding: 8px 16px;
  background: var(--primary-color);
}

// shared/ui/button/Button.tsx
import styles from './Button.module.css';
export const Button = ({ className, ...props }) => (
  <button className={`${styles.button} ${className || ''}`} {...props} />
);
```

## **Тестирование**

```typescript
// entities/user/__tests__/UserCard.test.tsx
import { render, screen } from "@testing-library/react";
import { UserCard } from "../ui/UserCard";

describe("UserCard", () => {
  it("отображает информацию о пользователе", () => {
    const user = { id: "1", name: "John" };
    render(<UserCard user={user} />);
    expect(screen.getByText("John")).toBeInTheDocument();
  });
});
```

## **Лучшие практики**

### **✅ DO:**

- Разделяйте ответственность между слоями
- Используйте index.ts для публичного API
- Типизируйте все компоненты и функции
- Группируйте связанные компоненты
- Используйте Server Components по умолчанию

### **❌ DON'T:**

- Нарушайте правила импортов
- Создавайте циклические зависимости
- Смешивайте слои
- Дублируйте код
- Игнорируйте типизацию

## **Полезные команды**

```bash
# Создание слайса с FSD CLI
npx fsd pages dashboard --segments ui api model

# Создание компонента
npx fsd shared ui button --segments ui

# Создание фичи
npx fsd features auth --segments ui api model
```

description:
globs:
alwaysApply: false

---
