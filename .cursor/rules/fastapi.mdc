---
description: Правила и лучшие практики использования FastAPI в проекте
globs: backend/**/*.py
alwaysApply: true
---

# FastAPI Best Practices

## **Основные принципы архитектуры**

### **Структура проекта**

- **Используйте модульную архитектуру**: Разделяйте приложение на логические модули
- **Следуйте принципу единственной ответственности**: Каждый модуль отвечает за одну область
- **Используйте APIRouter для организации маршрутов**: Группируйте связанные эндпоинты

```python
# ✅ DO: Модульная структура
from fastapi import APIRouter, Depends, HTTPException, status
from app.dependencies import get_current_user
from app.schemas import UserCreate, UserResponse
from app.services import UserService

router = APIRouter(
    prefix="/users",
    tags=["users"],
    dependencies=[Depends(get_current_user)],
    responses={404: {"description": "Not found"}},
)

@router.get("/", response_model=list[UserResponse])
async def get_users():
    return await UserService.get_all()

@router.post("/", response_model=UserResponse, status_code=201)
async def create_user(user: UserCreate):
    return await UserService.create(user)
```

### **Инициализация приложения**

```python
# ✅ DO: Правильная инициализация FastAPI
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.core.config import settings
from app.api.v1.api import api_router

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description=settings.DESCRIPTION,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Настройка CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Подключение роутеров
app.include_router(api_router, prefix=settings.API_V1_STR)
```

## **Обработка запросов и ответов**

### **Валидация данных с Pydantic**

```python
# ✅ DO: Строгая валидация с Pydantic
from pydantic import BaseModel, EmailStr, Field, validator
from typing import Optional
from datetime import datetime

class UserCreate(BaseModel):
    email: EmailStr
    username: str = Field(..., min_length=3, max_length=50)
    password: str = Field(..., min_length=8)
    full_name: Optional[str] = None

    @validator('username')
    def username_alphanumeric(cls, v):
        if not v.isalnum():
            raise ValueError('Username must be alphanumeric')
        return v

class UserResponse(BaseModel):
    id: int
    email: str
    username: str
    full_name: Optional[str]
    created_at: datetime
    is_active: bool

    class Config:
        from_attributes = True
```

### **Обработка параметров запроса**

```python
# ✅ DO: Правильная обработка параметров
from typing import Annotated, Optional
from fastapi import Query, Path, Depends

@router.get("/items/")
async def get_items(
    skip: Annotated[int, Query(ge=0, description="Number of items to skip")] = 0,
    limit: Annotated[int, Query(ge=1, le=100, description="Number of items to return")] = 10,
    search: Annotated[Optional[str], Query(description="Search term")] = None,
):
    return await ItemService.get_items(skip=skip, limit=limit, search=search)

@router.get("/items/{item_id}")
async def get_item(
    item_id: Annotated[int, Path(..., description="The ID of the item to get")],
):
    return await ItemService.get_by_id(item_id)
```

## **Обработка ошибок**

### **Стандартные HTTP исключения**

```python
# ✅ DO: Использование HTTPException для ошибок
from fastapi import HTTPException, status

@router.get("/items/{item_id}")
async def get_item(item_id: int):
    item = await ItemService.get_by_id(item_id)
    if not item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Item with id {item_id} not found"
        )
    return item

@router.post("/items/")
async def create_item(item: ItemCreate, current_user: User = Depends(get_current_user)):
    if not current_user.is_active:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Inactive user cannot create items"
        )
    return await ItemService.create(item, user_id=current_user.id)
```

### **Кастомные исключения**

```python
# ✅ DO: Кастомные исключения с обработчиками
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

class CustomException(Exception):
    def __init__(self, message: str, error_code: str):
        self.message = message
        self.error_code = error_code

@app.exception_handler(CustomException)
async def custom_exception_handler(request: Request, exc: CustomException):
    return JSONResponse(
        status_code=400,
        content={
            "error": exc.error_code,
            "message": exc.message,
            "timestamp": datetime.utcnow().isoformat()
        }
    )
```

### **Валидация запросов**

```python
# ✅ DO: Кастомный обработчик ошибок валидации
from fastapi import Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "detail": "Validation error",
            "errors": exc.errors(),
            "body": exc.body
        }
    )
```

## **Зависимости (Dependencies)**

### **Базовые зависимости**

```python
# ✅ DO: Правильное использование зависимостей
from typing import Annotated
from fastapi import Depends, HTTPException, status
from app.core.database import get_db
from app.models.user import User
from app.services.auth import get_current_user

async def get_db_session():
    async with get_db() as session:
        yield session

async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
) -> User:
    if not current_user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    return current_user

@router.get("/me")
async def read_users_me(
    current_user: Annotated[User, Depends(get_current_active_user)]
):
    return current_user
```

### **Зависимости с yield для ресурсов**

```python
# ✅ DO: Зависимости с yield для управления ресурсами
from contextlib import asynccontextmanager
from typing import AsyncGenerator

@asynccontextmanager
async def get_database_connection() -> AsyncGenerator[DatabaseConnection, None]:
    connection = await create_database_connection()
    try:
        yield connection
    finally:
        await connection.close()

async def get_db():
    async with get_database_connection() as connection:
        yield connection

# ✅ DO: Правильная обработка исключений в yield зависимостях
async def get_resource_with_exception():
    try:
        resource = await acquire_resource()
        yield resource
    except Exception as e:
        logger.error(f"Error in dependency: {e}")
        raise  # Важно пере-выбросить исключение
    finally:
        await cleanup_resource(resource)
```

### **Вложенные зависимости**

```python
# ✅ DO: Вложенные зависимости
async def get_user_permissions(user: User = Depends(get_current_user)):
    return await PermissionService.get_user_permissions(user.id)

async def require_admin_permission(
    permissions: list = Depends(get_user_permissions)
):
    if "admin" not in permissions:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Admin permission required"
        )
    return permissions

@router.delete("/users/{user_id}")
async def delete_user(
    user_id: int,
    permissions: list = Depends(require_admin_permission)
):
    return await UserService.delete(user_id)
```

## **Маршрутизация**

### **Организация роутеров**

```python
# ✅ DO: Иерархическая организация роутеров
# app/api/v1/endpoints/users.py
from fastapi import APIRouter, Depends, HTTPException, status
from app.schemas.user import UserCreate, UserUpdate, UserResponse
from app.services.user import UserService
from app.dependencies import get_current_user

router = APIRouter()

@router.get("/", response_model=list[UserResponse])
async def get_users(
    skip: int = 0,
    limit: int = 100,
    current_user: User = Depends(get_current_user)
):
    return await UserService.get_all(skip=skip, limit=limit)

@router.post("/", response_model=UserResponse, status_code=201)
async def create_user(user: UserCreate):
    return await UserService.create(user)

# app/api/v1/api.py
from fastapi import APIRouter
from app.api.v1.endpoints import users, items, auth

api_router = APIRouter()
api_router.include_router(auth.router, prefix="/auth", tags=["authentication"])
api_router.include_router(users.router, prefix="/users", tags=["users"])
api_router.include_router(items.router, prefix="/items", tags=["items"])
```

### **Версионирование API**

```python
# ✅ DO: Версионирование API
from fastapi import FastAPI
from app.api.v1.api import api_router as api_router_v1
from app.api.v2.api import api_router as api_router_v2

app = FastAPI()

# Версия 1 API
app.include_router(api_router_v1, prefix="/api/v1")
# Версия 2 API
app.include_router(api_router_v2, prefix="/api/v2")
```

## **Безопасность**

### **Аутентификация**

```python
# ✅ DO: JWT аутентификация
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from app.core.config import settings
from app.models.user import User

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception

    user = await UserService.get_by_username(username)
    if user is None:
        raise credentials_exception
    return user
```

### **Авторизация**

```python
# ✅ DO: Проверка ролей и разрешений
from enum import Enum
from typing import List

class UserRole(str, Enum):
    ADMIN = "admin"
    USER = "user"
    MODERATOR = "moderator"

def require_roles(required_roles: List[UserRole]):
    async def role_checker(current_user: User = Depends(get_current_user)):
        if current_user.role not in required_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Not enough permissions"
            )
        return current_user
    return role_checker

@router.delete("/users/{user_id}")
async def delete_user(
    user_id: int,
    current_user: User = Depends(require_roles([UserRole.ADMIN]))
):
    return await UserService.delete(user_id)
```

## **Тестирование**

### **Базовые тесты**

```python
# ✅ DO: Тестирование с TestClient
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_create_user():
    response = client.post(
        "/users/",
        json={
            "email": "test@example.com",
            "username": "testuser",
            "password": "testpassword123"
        }
    )
    assert response.status_code == 201
    data = response.json()
    assert data["email"] == "test@example.com"
    assert data["username"] == "testuser"
    assert "id" in data

def test_get_user_not_found():
    response = client.get("/users/999")
    assert response.status_code == 404
    assert response.json()["detail"] == "User not found"
```

### **Тестирование с зависимостями**

```python
# ✅ DO: Переопределение зависимостей для тестов
from app.main import app
from app.dependencies import get_current_user

def override_get_current_user():
    return User(id=1, username="testuser", email="test@example.com")

app.dependency_overrides[get_current_user] = override_get_current_user

def test_protected_endpoint():
    response = client.get("/me")
    assert response.status_code == 200
    data = response.json()
    assert data["username"] == "testuser"

# Очистка после тестов
app.dependency_overrides = {}
```

### **Асинхронные тесты**

```python
# ✅ DO: Асинхронные тесты
import pytest
from httpx import AsyncClient
from app.main import app

@pytest.mark.asyncio
async def test_create_user_async():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.post(
            "/users/",
            json={
                "email": "test@example.com",
                "username": "testuser",
                "password": "testpassword123"
            }
        )
    assert response.status_code == 201
```

## **Производительность**

### **Асинхронные операции**

```python
# ✅ DO: Асинхронные операции с базой данных
from sqlalchemy.ext.asyncio import AsyncSession
from app.models.user import User
from app.schemas.user import UserCreate

class UserService:
    @staticmethod
    async def create(user_data: UserCreate, db: AsyncSession) -> User:
        user = User(**user_data.dict())
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return user

    @staticmethod
    async def get_by_id(user_id: int, db: AsyncSession) -> User | None:
        result = await db.execute(
            select(User).where(User.id == user_id)
        )
        return result.scalar_one_or_none()
```

### **Кеширование**

```python
# ✅ DO: Кеширование с Redis
from fastapi import Depends
from app.core.cache import redis_client
import json

async def get_cached_user(user_id: int) -> dict | None:
    cached = await redis_client.get(f"user:{user_id}")
    if cached:
        return json.loads(cached)
    return None

async def cache_user(user_id: int, user_data: dict, expire: int = 3600):
    await redis_client.setex(
        f"user:{user_id}",
        expire,
        json.dumps(user_data)
    )

@router.get("/users/{user_id}")
async def get_user(user_id: int):
    # Проверяем кеш
    cached_user = await get_cached_user(user_id)
    if cached_user:
        return cached_user

    # Получаем из БД
    user = await UserService.get_by_id(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    # Кешируем результат
    user_data = user.dict()
    await cache_user(user_id, user_data)

    return user_data
```

## **Логирование и мониторинг**

### **Структурированное логирование**

```python
# ✅ DO: Структурированное логирование
import structlog
from fastapi import Request
import time

logger = structlog.get_logger()

@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()

    response = await call_next(request)

    process_time = time.time() - start_time
    logger.info(
        "Request processed",
        method=request.method,
        url=str(request.url),
        status_code=response.status_code,
        process_time=process_time
    )

    return response
```

### **Метрики и мониторинг**

```python
# ✅ DO: Метрики с Prometheus
from prometheus_fastapi_instrumentator import Instrumentator

# Инициализация метрик
Instrumentator().instrument(app).expose(app)
```

## **Лучшие практики**

### **✅ DO:**

- **Используйте типизацию**: Всегда указывайте типы для параметров и возвращаемых значений
- **Валидируйте данные**: Используйте Pydantic для валидации входных данных
- **Обрабатывайте ошибки**: Используйте HTTPException для HTTP ошибок
- **Разделяйте ответственность**: Разделяйте бизнес-логику и API слои
- **Используйте зависимости**: Для переиспользуемой логики
- **Тестируйте код**: Пишите unit и integration тесты
- **Документируйте API**: Используйте описания и примеры в схемах
- **Мониторьте производительность**: Используйте логирование и метрики

### **❌ DON'T:**

- **Не используйте синхронные операции**: В асинхронных эндпоинтах
- **Не игнорируйте ошибки**: Всегда обрабатывайте исключения
- **Не дублируйте код**: Используйте зависимости и утилиты
- **Не смешивайте слои**: Разделяйте API, бизнес-логику и данные
- **Не забывайте про безопасность**: Всегда валидируйте входные данные
- **Не игнорируйте производительность**: Используйте кеширование и оптимизации
- **Не забывайте про тестирование**: Покрывайте код тестами

## **Ссылки**

- [FastAPI Documentation](https://fastapi.tiangolo.com/)
- [FastAPI Best Practices](https://github.com/zhanymkanov/fastapi-best-practices)
- [FastAPI Testing](https://fastapi.tiangolo.com/tutorial/testing/)
- [FastAPI Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/)
