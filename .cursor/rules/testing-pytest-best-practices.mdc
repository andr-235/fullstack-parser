---
description: Comprehensive testing strategies with pytest and async support
globs: **/test_*.py, **/tests/**/*.py, **/conftest.py, pytest.ini, pyproject.toml]
alwaysApply: false
---

# Testing Best Practices with Pytest & Poetry

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å pytest, async —Ç–µ—Å—Ç–∞–º–∏ –∏ –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤ Poetry –ø—Ä–æ–µ–∫—Ç–µ.

## Test Configuration & Setup üîß

### 1. Poetry Pytest Configuration
```toml
# pyproject.toml - Poetry configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--disable-warnings"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "database: marks tests that require database"
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/migrations/*", "*/alembic/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if settings.DEBUG",
    "raise NotImplementedError",
]
show_missing = true
precision = 2

# Poetry test dependencies
[tool.poetry.group.test.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
httpx = "^0.28.0"
faker = "^30.0.0"
factory-boy = "^3.3.0"
coverage = "^7.6.0"
```

### 2. Main conftest.py
```python
# tests/conftest.py
import pytest
import asyncio
from typing import AsyncGenerator, Generator
from httpx import AsyncClient
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.pool import StaticPool
import redis.asyncio as redis

from app.main import app
from app.database import get_db, Base
from app.config import settings
from app.core.cache import redis_manager, cache
from app.workers.celery import celery_app

# Test database configuration
TEST_DATABASE_URL = "sqlite+aiosqlite:///./test.db"

@pytest.fixture(scope="session")
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture(scope="session")
async def test_engine():
    """Create test database engine."""
    engine = create_async_engine(
        TEST_DATABASE_URL,
        connect_args={"check_same_thread": False},
        poolclass=StaticPool,
        echo=False
    )
    
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    yield engine
    
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
    await engine.dispose()

@pytest.fixture
async def db_session(test_engine) -> AsyncGenerator[AsyncSession, None]:
    """Create database session for testing."""
    TestSessionLocal = async_sessionmaker(
        bind=test_engine,
        class_=AsyncSession,
        expire_on_commit=False
    )
    
    async with TestSessionLocal() as session:
        yield session
        await session.rollback()

@pytest.fixture
def override_get_db(db_session: AsyncSession):
    """Override get_db dependency."""
    async def _override_get_db():
        yield db_session
    return _override_get_db

@pytest.fixture
def client(override_get_db) -> Generator[TestClient, None, None]:
    """Create test client with dependency overrides."""
    app.dependency_overrides[get_db] = override_get_db
    
    # Mock Redis for testing
    test_redis = redis.Redis(decode_responses=True)
    cache.redis = test_redis
    
    with TestClient(app) as test_client:
        yield test_client
    
    app.dependency_overrides.clear()

@pytest.fixture
async def async_client(override_get_db) -> AsyncGenerator[AsyncClient, None]:
    """Create async test client."""
    app.dependency_overrides[get_db] = override_get_db
    
    async with AsyncClient(app=app, base_url="http://test") as ac:
        yield ac
    
    app.dependency_overrides.clear()

@pytest.fixture
def celery_test_app():
    """Configure Celery for testing."""
    celery_app.conf.update(
        task_always_eager=True,
        task_eager_propagates=True,
        broker_url='memory://',
        result_backend='cache+memory://',
    )
    return celery_app
```

## Poetry Test Commands üöÄ

### 3. Poetry Testing Commands
```bash
# Install test dependencies
poetry install --with=test

# Run all tests
poetry run pytest

# Run tests with coverage
poetry run pytest --cov=app --cov-report=html

# Run specific test markers
poetry run pytest -m "unit"
poetry run pytest -m "integration"
poetry run pytest -m "slow"

# Run tests in parallel
poetry run pytest -n auto

# Run tests with verbose output
poetry run pytest -v

# Run specific test file
poetry run pytest tests/test_api/test_groups.py

# Run tests and stop on first failure
poetry run pytest -x

# Run tests and show local variables
poetry run pytest -l

# Watch mode (requires pytest-watch)
poetry run ptw
```

### 4. Makefile Integration
```makefile
# Makefile for Poetry project
POETRY := $(shell command -v poetry 2> /dev/null || echo ~/.local/share/pypoetry/venv/bin/poetry)

test:
	$(POETRY) run pytest tests/ -v

test-cov:
	$(POETRY) run pytest tests/ -v --cov=app --cov-report=html --cov-report=term-missing

test-unit:
	$(POETRY) run pytest tests/unit/ -v

test-integration:
	$(POETRY) run pytest tests/integration/ -v -m integration

test-api:
	$(POETRY) run pytest tests/test_api/ -v -m api

test-parallel:
	$(POETRY) run pytest tests/ -v -n auto

test-watch:
	$(POETRY) run ptw tests/

test-failed:
	$(POETRY) run pytest --lf

test-slow:
	$(POETRY) run pytest -m slow --durations=10
```

## Database Testing üóÑÔ∏è

### 5. Database Test Fixtures
```python
# tests/fixtures/database.py
import pytest
from typing import Dict, Any, List
from datetime import datetime, timedelta

from app.models.group import VkGroup
from app.models.keyword import Keyword
from app.models.comment import Comment
from app.services.group_service import GroupService
from app.services.keyword_service import KeywordService

@pytest.fixture
async def sample_group(db_session) -> VkGroup:
    """Create a sample VK group for testing."""
    group_data = {
        "vk_group_id": 12345678,
        "name": "Test Group",
        "screen_name": "test_group",
        "description": "Test group description",
        "is_active": True,
        "check_interval": 300
    }
    
    group_service = GroupService(db_session)
    group = await group_service.create(group_data)
    await db_session.commit()
    return group

@pytest.fixture
async def sample_keywords(db_session) -> List[Keyword]:
    """Create sample keywords for testing."""
    keywords_data = [
        {"keyword": "—Ç–µ—Å—Ç", "category": "general", "is_active": True},
        {"keyword": "–ø—Ä–æ–±–ª–µ–º–∞", "category": "issues", "is_active": True},
        {"keyword": "–æ—Ç–ª–∏—á–Ω–æ", "category": "positive", "is_active": True},
    ]
    
    keyword_service = KeywordService(db_session)
    keywords = []
    
    for kw_data in keywords_data:
        keyword = await keyword_service.create(kw_data)
        keywords.append(keyword)
    
    await db_session.commit()
    return keywords

@pytest.fixture
async def sample_comments(db_session, sample_group, sample_keywords) -> List[Comment]:
    """Create sample comments for testing."""
    comments_data = [
        {
            "vk_comment_id": 111,
            "vk_post_id": 1001,
            "group_id": sample_group.id,
            "keyword_id": sample_keywords[0].id,
            "author_id": 123456,
            "author_name": "Test User",
            "text": "–≠—Ç–æ —Ç–µ—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            "date": datetime.utcnow() - timedelta(hours=1)
        },
        {
            "vk_comment_id": 222,
            "vk_post_id": 1002,
            "group_id": sample_group.id,
            "keyword_id": sample_keywords[1].id,
            "author_id": 789012,
            "author_name": "Another User",
            "text": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å —ç—Ç–∏–º",
            "date": datetime.utcnow() - timedelta(hours=2)
        }
    ]
    
    comments = []
    for comment_data in comments_data:
        comment = Comment(**comment_data)
        db_session.add(comment)
        comments.append(comment)
    
    await db_session.commit()
    return comments
```

## API Testing üåê

### 6. API Test Base Classes
```python
# tests/test_api/base.py
import pytest
from typing import Dict, Any
from httpx import AsyncClient
from fastapi.testclient import TestClient

class BaseAPITest:
    """Base class for API tests."""
    
    @pytest.fixture(autouse=True)
    def setup_method(self, client: TestClient, async_client: AsyncClient):
        self.client = client
        self.async_client = async_client
    
    def assert_response_structure(self, response_data: Dict[str, Any], expected_fields: list):
        """Assert that response has expected structure."""
        for field in expected_fields:
            assert field in response_data, f"Missing field: {field}"
    
    def assert_error_response(self, response, expected_status: int, expected_error: str = None):
        """Assert error response structure."""
        assert response.status_code == expected_status
        
        error_data = response.json()
        assert "detail" in error_data
        
        if expected_error:
            assert expected_error in error_data["detail"]
    
    def assert_pagination_response(self, response_data: Dict[str, Any]):
        """Assert pagination response structure."""
        pagination_fields = ["items", "total", "page", "per_page", "pages"]
        self.assert_response_structure(response_data, pagination_fields)
        
        assert isinstance(response_data["items"], list)
        assert isinstance(response_data["total"], int)
        assert response_data["total"] >= 0
```

## GitHub Actions CI/CD with Poetry üîÑ

### 7. GitHub Actions Workflow
```yaml
# .github/workflows/test.yml
name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with=test
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run linting
        run: |
          poetry run ruff check app tests
          poetry run mypy app
      
      - name: Run unit tests
        run: poetry run pytest tests/unit/ -v --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
      
      - name: Run integration tests
        run: poetry run pytest tests/integration/ -v -m integration
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
```

## Performance & Load Testing ‚ö°

### 8. Performance Tests with Poetry
```python
# tests/test_performance/test_api_performance.py
import pytest
import asyncio
import time
from concurrent.futures import ThreadPoolExecutor

class TestAPIPerformance:
    
    @pytest.mark.slow
    def test_get_groups_response_time(self, client):
        """Test that groups endpoint responds within acceptable time."""
        start_time = time.time()
        response = client.get("/api/v1/groups/")
        end_time = time.time()
        
        assert response.status_code == 200
        response_time = end_time - start_time
        assert response_time < 1.0, f"Response time {response_time}s exceeded 1s limit"
    
    @pytest.mark.slow
    def test_concurrent_requests(self, client):
        """Test handling multiple concurrent requests."""
        def make_request():
            response = client.get("/api/v1/groups/")
            return response.status_code
        
        # Make 10 concurrent requests
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(make_request) for _ in range(10)]
            results = [future.result() for future in futures]
        
        # All requests should succeed
        assert all(status == 200 for status in results)
```

## Test Utilities & Helpers üõ†Ô∏è

### 9. Test Data Factory with Poetry
```python
# tests/factories.py - using factory-boy
import factory
from datetime import datetime, timedelta
from app.models.group import VkGroup
from app.models.keyword import Keyword
from app.models.comment import Comment

class VkGroupFactory(factory.Factory):
    class Meta:
        model = VkGroup
    
    vk_group_id = factory.Sequence(lambda n: 1000000 + n)
    name = factory.Faker('company')
    screen_name = factory.Faker('slug')
    description = factory.Faker('text')
    is_active = True
    check_interval = 300

class KeywordFactory(factory.Factory):
    class Meta:
        model = Keyword
    
    keyword = factory.Faker('word')
    category = factory.Faker('random_element', elements=['general', 'issues', 'positive'])
    is_active = True

class CommentFactory(factory.Factory):
    class Meta:
        model = Comment
    
    vk_comment_id = factory.Sequence(lambda n: 2000000 + n)
    vk_post_id = factory.Sequence(lambda n: 3000000 + n)
    author_id = factory.Faker('random_int', min=100000, max=999999)
    author_name = factory.Faker('name')
    text = factory.Faker('text')
    date = factory.LazyFunction(lambda: datetime.utcnow() - timedelta(hours=1))
```

## Best Practices Checklist ‚úÖ

### Poetry Setup:
- [ ] Test dependencies –≤ [tool.poetry.group.test.dependencies]
- [ ] pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ [tool.pytest.ini_options]
- [ ] Coverage –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ [tool.coverage]
- [ ] Makefile —Å Poetry –∫–æ–º–∞–Ω–¥–∞–º–∏

### Test Structure:
- [ ] Tests –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ feature/module
- [ ] –ß–µ—Ç–∫–∏–µ naming conventions
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fixtures
- [ ] –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ unit/integration —Ç–µ—Å—Ç–æ–≤
- [ ] Test data generators/factories

### Database Testing:
- [ ] –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è test database
- [ ] Transaction rollback per test
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ fixtures
- [ ] –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ test data
- [ ] Cascade testing

### API Testing:
- [ ] –í—Å–µ endpoints –ø–æ–∫—Ä—ã—Ç—ã
- [ ] Error cases –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã
- [ ] Authentication testing
- [ ] Input validation testing
- [ ] Response structure validation

### Async Testing:
- [ ] –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è async test setup
- [ ] Event loop management
- [ ] Async fixture usage
- [ ] Background task testing
- [ ] Rate limiting testing

### Coverage:
- [ ] >80% code coverage
- [ ] Critical paths –ø–æ–∫—Ä—ã—Ç—ã
- [ ] Edge cases –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã
- [ ] Error handling –ø–æ–∫—Ä—ã—Ç
- [ ] Integration scenarios –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã

## Poetry Test Commands Quick Reference üìñ

```bash
# Basic test commands
poetry run pytest                           # Run all tests
poetry run pytest -v                        # Verbose output
poetry run pytest -x                        # Stop on first failure
poetry run pytest --lf                      # Run last failed
poetry run pytest --ff                      # Run failed first

# Coverage commands  
poetry run pytest --cov=app                 # Basic coverage
poetry run pytest --cov=app --cov-report=html   # HTML coverage report
poetry run pytest --cov=app --cov-report=term-missing  # Terminal missing lines

# Marker-based testing
poetry run pytest -m unit                   # Run unit tests only
poetry run pytest -m integration            # Run integration tests only
poetry run pytest -m "not slow"             # Skip slow tests

# Parallel testing
poetry run pytest -n auto                   # Auto-detect CPU count
poetry run pytest -n 4                      # Use 4 workers

# File/function specific
poetry run pytest tests/test_api.py         # Run specific file
poetry run pytest tests/test_api.py::test_create_user  # Run specific test
poetry run pytest -k "test_user"            # Run tests matching pattern

# Debug and profiling
poetry run pytest --pdb                     # Drop into debugger on failure
poetry run pytest --durations=10            # Show 10 slowest tests
poetry run pytest --profile                 # Profile test execution
``` 
