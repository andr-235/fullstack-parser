---
description: Security-first Dockerfile best practices for production deployments
globs: **/Dockerfile*, **/*.dockerfile, docker-compose*.yml, docker-compose*.yaml
alwaysApply: false
---

# Dockerfile Best Practices with Poetry

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Dockerfile –¥–ª—è production —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Poetry.

## Security First üîí

### 1. Non-root User
```dockerfile
# –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ root –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
RUN addgroup --system appgroup && adduser --system appuser --ingroup appgroup
USER appuser

# –î–ª—è Poetry –ø—Ä–æ–µ–∫—Ç–æ–≤
FROM python:3.11-alpine
RUN adduser --disabled-password --gecos '' appuser
USER appuser
```

### 2. Minimal Base Images
```dockerfile
# ‚úÖ –•–æ—Ä–æ—à–æ - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Alpine –æ–±—Ä–∞–∑
FROM python:3.11-alpine

# ‚úÖ –ï—â–µ –ª—É—á—à–µ - distroless –æ–±—Ä–∞–∑  
FROM gcr.io/distroless/python3

# ‚ùå –ü–ª–æ—Ö–æ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π Ubuntu
FROM ubuntu:latest
```

## Poetry Multi-stage Builds ‚ö°

### 3. Poetry Export Pattern (Recommended)
```dockerfile
# Multi-stage build –¥–ª—è production —Å Poetry
FROM python:3.11-slim as requirements-stage

WORKDIR /tmp

# Install Poetry
RUN pip install poetry==1.8.3

# Copy Poetry files
COPY ./pyproject.toml ./poetry.lock* /tmp/

# Configure Poetry: Don't create virtual environment
RUN poetry config virtualenvs.create false

# Export requirements
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# Production stage
FROM python:3.11-slim

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser appuser

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 4. Full Poetry in Production (Alternative)
```dockerfile
# For teams preferring Poetry in production
FROM python:3.11-slim

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3

# Configure Poetry for container environment
RUN poetry config virtualenvs.create false \
    && poetry config cache-dir /opt/poetry-cache

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/opt/poetry-cache \
    poetry install --only=main --no-interaction --no-ansi

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 5. Development Dockerfile with Poetry
```dockerfile
# Development stage with hot reload
FROM python:3.11-slim as development

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3

# Configure Poetry
RUN poetry config virtualenvs.create false

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Install all dependencies (including dev)
RUN poetry install --no-interaction --no-ansi

# Copy source code (for development with volume mount)
COPY . .

EXPOSE 8000

# Development server with hot reload
CMD ["poetry", "run", "uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
```

## Image Optimization ‚ö°

### 6. Layer Caching Strategy with Poetry
```dockerfile
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Poetry
# Copy Poetry configuration first (changes less frequently)
COPY pyproject.toml poetry.lock* ./
RUN poetry install --only=main --no-interaction

# Copy source code last (changes more frequently)
COPY app/ ./app/
COPY alembic/ ./alembic/
COPY alembic.ini ./

# ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - source code –º–µ–Ω—è–µ—Ç—Å—è —á–∞—Å—Ç–æ
COPY . .
RUN poetry install --only=main
```

### 7. .dockerignore for Poetry Projects
```dockerfile
# .dockerignore
__pycache__
*.pyc
*.pyo
*.pyd
.Python
.git
.gitignore
README.md
.env*
!.env.example
.coverage
htmlcov/
.pytest_cache/
.mypy_cache/
.ruff_cache/
tests/
docs/
memory-bank/
*.log

# Poetry specific
.venv/
dist/
build/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
```

### 8. Minimize Image Size with BuildKit
```dockerfile
# syntax=docker/dockerfile:1.6

# Cache mounts for Poetry
FROM python:3.11-alpine as builder

RUN pip install poetry==1.8.3

WORKDIR /app
COPY pyproject.toml poetry.lock* ./

# Use cache mount for Poetry cache
RUN --mount=type=cache,target=/root/.cache/pypoetry \
    poetry config virtualenvs.create false && \
    poetry install --only=main --no-interaction

# Production stage
FROM python:3.11-alpine

# Copy installed packages
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application
COPY app/ ./app/
```

## Application-Specific Patterns üì¶

### 9. FastAPI with Poetry
```dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3

# Configure Poetry
RUN poetry config virtualenvs.create false

# Install system dependencies for FastAPI
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN adduser --disabled-password --gecos '' fastapi
USER fastapi

# Copy Poetry files
COPY --chown=fastapi:fastapi pyproject.toml poetry.lock* ./

# Install dependencies
RUN poetry install --only=main --no-interaction

# Copy FastAPI application
COPY --chown=fastapi:fastapi app/ ./app/
COPY --chown=fastapi:fastapi alembic/ ./alembic/
COPY --chown=fastapi:fastapi alembic.ini ./

# Health check for FastAPI
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 10. Celery Worker with Poetry
```dockerfile
FROM python:3.11-slim

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3
RUN poetry config virtualenvs.create false

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Copy Poetry files and install dependencies
COPY pyproject.toml poetry.lock* ./
RUN poetry install --only=main --no-interaction

# Copy application code
COPY app/ ./app/

# Create non-root user
RUN adduser --disabled-password celeryuser
USER celeryuser

# Celery worker command
CMD ["poetry", "run", "celery", "-A", "app.workers.celery", "worker", "--loglevel=info"]
```

## Environment-Specific Builds üåç

### 11. Multi-target Dockerfile with Poetry
```dockerfile
# syntax=docker/dockerfile:1.6

# Base stage
FROM python:3.11-slim AS base

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3
RUN poetry config virtualenvs.create false

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Development stage
FROM base AS development

# Install all dependencies (including dev)
RUN poetry install --no-interaction --no-ansi

# Copy source code
COPY . .

EXPOSE 8000
CMD ["poetry", "run", "uvicorn", "app.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]

# Test stage
FROM development AS test

# Run tests
RUN poetry run pytest tests/

# Production stage
FROM base AS production

# Install only production dependencies
RUN poetry install --only=main --no-interaction --no-ansi

# Create non-root user
RUN adduser --disabled-password appuser
USER appuser

# Copy only necessary files
COPY --chown=appuser:appuser app/ ./app/
COPY --chown=appuser:appuser alembic/ ./alembic/
COPY --chown=appuser:appuser alembic.ini ./

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 12. Build Arguments for Poetry
```dockerfile
# Configurable Poetry build
ARG POETRY_VERSION=1.8.3
FROM python:3.11-slim

# Install Poetry with specific version
RUN pip install poetry==$POETRY_VERSION

ARG BUILD_ENV=production
ENV BUILD_ENV=$BUILD_ENV

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Conditional dependency installation
RUN if [ "$BUILD_ENV" = "development" ]; then \
        poetry install --no-interaction; \
    else \
        poetry install --only=main --no-interaction; \
    fi
```

## Docker Compose with Poetry üê≥

### 13. docker-compose.yml for Poetry
```yaml
version: "3.9"

services:
  app:
    build:
      context: .
      target: development  # Use development stage
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app  # Hot reload for development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  app-prod:
    build:
      context: .
      target: production  # Use production stage
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy

  celery-worker:
    build:
      context: .
      target: production
    command: poetry run celery -A app.workers.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: vk_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
```

## Testing & Quality üß™

### 14. Testing Stage with Poetry
```dockerfile
# Test stage
FROM python:3.11-slim AS test

WORKDIR /app

# Install Poetry
RUN pip install poetry==1.8.3
RUN poetry config virtualenvs.create false

# Install system dependencies for testing
RUN apt-get update && apt-get install -y \
    libpq-dev \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy Poetry files
COPY pyproject.toml poetry.lock* ./

# Install all dependencies (including test dependencies)
RUN poetry install --with=test --no-interaction

# Copy source code
COPY . .

# Run tests
RUN poetry run pytest tests/ --cov=app --cov-report=xml

# Run linting
RUN poetry run ruff check app tests
RUN poetry run mypy app

# Security scan
RUN poetry run bandit -r app/
```

### 15. Security Scanning Integration
```dockerfile
# Security scanning stage
FROM test AS security

# Install security tools through Poetry
RUN poetry add --group=dev trivy

# Run security scans
RUN poetry run trivy fs --exit-code 1 .
RUN poetry run safety check
```

## Best Practices Checklist ‚úÖ

### Security:
- [ ] Use non-root user
- [ ] Pin Poetry version
- [ ] Scan for vulnerabilities
- [ ] Don't include secrets in image
- [ ] Use minimal base images
- [ ] Set proper file permissions

### Poetry Optimization:
- [ ] Use poetry export for production
- [ ] Cache Poetry dependencies
- [ ] Configure virtualenvs.create false
- [ ] Use specific Poetry version
- [ ] Separate dev/prod dependencies
- [ ] Include poetry.lock in image

### Performance:
- [ ] Optimize layer caching (Poetry files first)
- [ ] Use multi-stage builds
- [ ] Minimize image size
- [ ] Use .dockerignore
- [ ] Combine RUN commands
- [ ] Clean up package caches

### Reliability:
- [ ] Include health checks
- [ ] Handle signals properly
- [ ] Set resource limits
- [ ] Use proper init system
- [ ] Configure logging
- [ ] Set timeouts appropriately

### Development:
- [ ] Support hot reload in dev
- [ ] Multi-target builds (dev/prod)
- [ ] Volume mounts for development
- [ ] Test stage in pipeline
- [ ] Environment-specific configs

## Common Anti-patterns ‚ùå

### Avoid These Poetry Mistakes:
```dockerfile
# ‚ùå Installing Poetry in production stage unnecessarily
FROM python:3.11-slim
RUN pip install poetry
COPY . .
RUN poetry install  # Poetry not needed in final image

# ‚ùå Not using .dockerignore
COPY . .  # Copies unnecessary files like .venv, tests

# ‚ùå Not pinning Poetry version
RUN pip install poetry  # Should specify version

# ‚ùå Creating virtual environment in container
RUN poetry install  # Should use poetry config virtualenvs.create false

# ‚ùå Installing dev dependencies in production
RUN poetry install  # Should use --only=main for production

# ‚ùå Not using multi-stage for Poetry export
RUN poetry export && pip install  # All in one stage is inefficient
```

## Poetry Docker Commands üîß

### 16. Useful Docker Build Commands
```bash
# Build with specific Poetry target
docker build --target development -t myapp:dev .
docker build --target production -t myapp:prod .

# Build with Poetry version argument
docker build --build-arg POETRY_VERSION=1.8.3 -t myapp .

# Build with Poetry cache mount
docker build --mount=type=cache,target=/root/.cache/pypoetry -t myapp .

# Test the image
docker run --rm myapp:test

# Run with Poetry
docker run -p 8000:8000 myapp:prod

# Debug Poetry configuration in container
docker run --rm -it myapp:dev poetry config --list
```

## Resources

- [Poetry Documentation](https://python-poetry.org/docs/)
- [Docker Official Best Practices](https://docs.docker.com/develop/dev-best-practices)
- [Multi-stage Builds](https://docs.docker.com/develop/dev-best-practices/#use-multi-stage-builds)
- [BuildKit Features](https://docs.docker.com/build/buildkit/) 
