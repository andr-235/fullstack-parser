---
description: Комплексное правило по использованию Pydantic V2 для валидации данных, сериализации и интеграции с FastAPI
globs: **/*.py
alwaysApply: true
---

# Pydantic Best Practices

## **1. Общие рекомендации по использованию Pydantic**

### **Цель применения**

- **Валидация данных**: Проверка типов, форматов и бизнес-правил
- **Сериализация**: Преобразование объектов в JSON/словари и обратно
- **Документация API**: Автоматическая генерация OpenAPI схем
- **Типобезопасность**: Интеграция с TypeScript и статическими анализаторами

### **Преимущества Pydantic V2**

- **Производительность**: В 5-50 раз быстрее V1 благодаря pydantic-core
- **Строгая типизация**: Полная поддержка Python type hints
- **Гибкость**: Множество способов настройки валидации
- **Интеграция**: Отличная совместимость с FastAPI, SQLAlchemy

### **Базовые принципы**

```python
# ✅ DO: Используйте современный синтаксис Pydantic V2
from pydantic import BaseModel, ConfigDict, Field
from typing import Optional, List
from datetime import datetime

class User(BaseModel):
    id: int
    name: str
    email: str
    created_at: datetime
    is_active: bool = True

    model_config = ConfigDict(
        str_max_length=100,
        validate_assignment=True
    )
```

## **2. Структура моделей**

### **Именование и организация**

```python
# ✅ DO: Организация по модулям
# schemas/user.py
from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime

class UserBase(BaseModel):
    """Базовая модель пользователя."""
    name: str
    email: EmailStr

class UserCreate(UserBase):
    """Модель для создания пользователя."""
    password: str

class UserUpdate(BaseModel):
    """Модель для обновления пользователя."""
    name: Optional[str] = None
    email: Optional[EmailStr] = None

class UserResponse(UserBase):
    """Модель для ответа API."""
    id: int
    created_at: datetime
    is_active: bool

    model_config = ConfigDict(from_attributes=True)
```

### **Порядок полей**

```python
# ✅ DO: Логический порядок полей
class Product(BaseModel):
    # 1. Идентификаторы
    id: int
    sku: str

    # 2. Основная информация
    name: str
    description: str
    price: float

    # 3. Метаданные
    category_id: int
    brand: str

    # 4. Статус и даты
    is_active: bool = True
    created_at: datetime
    updated_at: Optional[datetime] = None

    # 5. Связи (в конце)
    images: List[str] = []
    tags: List[str] = []
```

### **Выбор базового класса**

```python
# ✅ DO: BaseModel для большинства случаев
class User(BaseModel):
    name: str
    email: str

# ✅ DO: RootModel для простых типов
from pydantic import RootModel

UserList = RootModel[List[User]]
UserDict = RootModel[Dict[str, User]]

# ✅ DO: TypedDict для строгих словарей
from typing import TypedDict

class UserData(TypedDict):
    name: str
    email: str
    age: int
```

## **3. Принципы валидации данных**

### **Объявление типов и валидаторов**

```python
# ✅ DO: Строгая типизация с валидаторами
from pydantic import BaseModel, Field, field_validator, model_validator
from typing import Annotated
import re

class User(BaseModel):
    # Базовые типы с ограничениями
    name: Annotated[str, Field(min_length=2, max_length=50)]
    email: Annotated[str, Field(pattern=r'^[^@]+@[^@]+\.[^@]+$')]
    age: Annotated[int, Field(ge=0, le=120)]

    # Валидаторы полей
    @field_validator('name')
    @classmethod
    def validate_name(cls, v: str) -> str:
        if not v.strip():
            raise ValueError('Name cannot be empty')
        return v.title()

    @field_validator('email')
    @classmethod
    def validate_email(cls, v: str) -> str:
        if not re.match(r'^[^@]+@[^@]+\.[^@]+$', v):
            raise ValueError('Invalid email format')
        return v.lower()

    # Валидаторы модели
    @model_validator(mode='after')
    def validate_user_data(self) -> 'User':
        if self.age < 18 and 'admin' in self.name.lower():
            raise ValueError('Admin users must be 18 or older')
        return self
```

### **Строгая и мягкая валидация**

```python
# ✅ DO: Строгая валидация для критичных данных
class StrictUser(BaseModel):
    model_config = ConfigDict(strict=True)

    id: int
    name: str
    age: int

# ✅ DO: Мягкая валидация с преобразованиями
class FlexibleUser(BaseModel):
    model_config = ConfigDict(strict=False)

    id: int
    name: str
    age: int  # Примет '25' и преобразует в 25
```

### **Кастомные валидаторы**

```python
# ✅ DO: Сложная логика валидации
from typing import Any
from pydantic import ValidationInfo

class ComplexValidator(BaseModel):
    username: str
    password: str
    confirm_password: str

    @field_validator('username')
    @classmethod
    def validate_username(cls, v: str) -> str:
        if len(v) < 3:
            raise ValueError('Username must be at least 3 characters')
        if not v.isalnum():
            raise ValueError('Username must be alphanumeric')
        return v.lower()

    @field_validator('password')
    @classmethod
    def validate_password(cls, v: str) -> str:
        if len(v) < 8:
            raise ValueError('Password must be at least 8 characters')
        if not any(c.isupper() for c in v):
            raise ValueError('Password must contain uppercase letter')
        if not any(c.isdigit() for c in v):
            raise ValueError('Password must contain digit')
        return v

    @model_validator(mode='after')
    def validate_passwords_match(self) -> 'ComplexValidator':
        if self.password != self.confirm_password:
            raise ValueError('Passwords do not match')
        return self
```

## **4. Алиасы полей**

### **Настройка алиасов**

```python
# ✅ DO: Алиасы для внешних API
class UserAPI(BaseModel):
    user_id: int = Field(alias='id')
    user_name: str = Field(alias='name')
    user_email: str = Field(alias='email')

    model_config = ConfigDict(populate_by_name=True)

# ✅ DO: Разные алиасы для валидации и сериализации
class UserFlexible(BaseModel):
    name: str = Field(
        validation_alias='user_name',
        serialization_alias='display_name'
    )
    email: str = Field(
        validation_alias='user_email',
        serialization_alias='contact_email'
    )

# ✅ DO: Глобальные алиасы
class UserWithAliases(BaseModel):
    model_config = ConfigDict(
        alias_generator=lambda x: x.upper(),
        populate_by_name=True
    )

    name: str
    email: str
    age: int
```

### **Импорт/экспорт с алиасами**

```python
# ✅ DO: Правильная работа с алиасами
user_data = {
    'id': 1,
    'name': 'John Doe',
    'email': 'john@example.com'
}

# Создание с алиасами
user = UserAPI(**user_data)

# Сериализация с алиасами
api_response = user.model_dump(by_alias=True)
# {'id': 1, 'name': 'John Doe', 'email': 'john@example.com'}

# Сериализация без алиасов
internal_data = user.model_dump(by_alias=False)
# {'user_id': 1, 'user_name': 'John Doe', 'user_email': 'john@example.com'}
```

## **5. Работа с вложенными объектами**

### **Вложенные модели**

```python
# ✅ DO: Вложенные модели с валидацией
class Address(BaseModel):
    street: str
    city: str
    country: str
    postal_code: str

class Contact(BaseModel):
    phone: str
    email: str

class UserProfile(BaseModel):
    id: int
    name: str
    address: Address
    contacts: List[Contact]
    preferences: Dict[str, Any] = {}

    @field_validator('preferences')
    @classmethod
    def validate_preferences(cls, v: Dict[str, Any]) -> Dict[str, Any]:
        allowed_keys = {'theme', 'language', 'notifications'}
        if not all(key in allowed_keys for key in v.keys()):
            raise ValueError(f'Invalid preference keys. Allowed: {allowed_keys}')
        return v
```

### **Union типы и дискриминаторы**

```python
# ✅ DO: Union типы с дискриминаторами
from typing import Literal, Union
from pydantic import Discriminator, Tag

class Cat(BaseModel):
    type: Literal['cat'] = 'cat'
    name: str
    lives: int = 9

class Dog(BaseModel):
    type: Literal['dog'] = 'dog'
    name: str
    breed: str

def get_pet_type(v: Any) -> str:
    if isinstance(v, dict):
        return v.get('type')
    return getattr(v, 'type', None)

class PetOwner(BaseModel):
    name: str
    pet: Annotated[
        Union[
            Annotated[Cat, Tag('cat')],
            Annotated[Dog, Tag('dog')]
        ],
        Discriminator(get_pet_type)
    ]
```

## **6. Типизация**

### **Стандартные и специальные типы**

```python
# ✅ DO: Использование специальных типов
from pydantic import BaseModel, Field, EmailStr, HttpUrl, IPvAnyAddress
from typing import Optional, List, Dict, Any, Union
from datetime import datetime, date, time
from uuid import UUID
from decimal import Decimal

class UserStrict(BaseModel):
    # Строгие типы
    id: int
    uuid: UUID
    email: EmailStr
    website: Optional[HttpUrl] = None
    ip_address: IPvAnyAddress

    # Временные типы
    created_at: datetime
    birth_date: date
    last_login: Optional[time] = None

    # Числовые типы
    balance: Decimal = Field(max_digits=10, decimal_places=2)
    score: float = Field(ge=0.0, le=100.0)

    # Коллекции
    tags: List[str] = []
    metadata: Dict[str, Any] = {}

    # Enum типы
    status: Literal['active', 'inactive', 'suspended'] = 'active'
```

### **Nullable/Optional и Enum**

```python
# ✅ DO: Правильное использование Optional
from enum import Enum
from typing import Optional

class UserStatus(str, Enum):
    ACTIVE = 'active'
    INACTIVE = 'inactive'
    SUSPENDED = 'suspended'

class UserWithEnum(BaseModel):
    id: int
    name: str
    email: str
    status: UserStatus = UserStatus.ACTIVE

    # Optional поля
    phone: Optional[str] = None
    avatar_url: Optional[HttpUrl] = None
    last_login: Optional[datetime] = None

    # Union типы
    age: Union[int, None] = None  # Альтернатива Optional[int]
```

## **7. Обработка ошибок**

### **Обработка ValidationError**

```python
# ✅ DO: Обработка ошибок валидации
from pydantic import ValidationError
from fastapi import HTTPException, status

def create_user_safe(user_data: dict) -> User:
    try:
        return User.model_validate(user_data)
    except ValidationError as e:
        # Логирование ошибок
        logger.error(f"Validation error: {e.errors()}")

        # Преобразование в HTTP ошибки
        error_messages = []
        for error in e.errors():
            field = '.'.join(str(x) for x in error['loc'])
            message = error['msg']
            error_messages.append(f"{field}: {message}")

        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail={
                "message": "Validation failed",
                "errors": error_messages
            }
        )
```

### **Кастомные исключения**

```python
# ✅ DO: Кастомные исключения для бизнес-логики
class BusinessValidationError(Exception):
    def __init__(self, field: str, message: str, code: str = None):
        self.field = field
        self.message = message
        self.code = code
        super().__init__(self.message)

class UserService:
    def create_user(self, user_data: dict) -> User:
        try:
            user = User.model_validate(user_data)

            # Дополнительная бизнес-валидация
            if self.user_exists(user.email):
                raise BusinessValidationError(
                    field='email',
                    message='User with this email already exists',
                    code='EMAIL_EXISTS'
                )

            return user

        except ValidationError as e:
            raise BusinessValidationError(
                field='validation',
                message=str(e),
                code='VALIDATION_ERROR'
            )
```

## **8. Интеграция с другими библиотеками**

### **FastAPI интеграция**

```python
# ✅ DO: Модели для FastAPI
from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel

app = FastAPI()

class UserCreate(BaseModel):
    name: str
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: int
    name: str
    email: str
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)

@app.post("/users/", response_model=UserResponse)
async def create_user(user: UserCreate):
    # FastAPI автоматически валидирует входные данные
    # и сериализует ответ
    return await user_service.create_user(user)
```

### **SQLAlchemy интеграция**

```python
# ✅ DO: Модели для SQLAlchemy
from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from pydantic import BaseModel, ConfigDict

Base = declarative_base()

class UserORM(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    email = Column(String(255), unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

class UserPydantic(BaseModel):
    id: int
    name: str
    email: str
    created_at: datetime

    model_config = ConfigDict(from_attributes=True)

# Использование
user_orm = UserORM(name="John", email="john@example.com")
user_pydantic = UserPydantic.model_validate(user_orm)
```

### **Celery интеграция**

```python
# ✅ DO: Сериализация для Celery
from celery import Celery
from pydantic import BaseModel

celery_app = Celery('tasks')

class TaskData(BaseModel):
    user_id: int
    action: str
    parameters: Dict[str, Any]

@celery_app.task
def process_user_task(task_data: dict):
    # Валидация входных данных
    validated_data = TaskData.model_validate(task_data)

    # Обработка задачи
    result = process_user_action(validated_data)

    # Возврат результата
    return result.model_dump()
```

## **9. Прочее**

### **Версионирование схем**

```python
# ✅ DO: Версионирование API схем
from pydantic import BaseModel
from typing import Optional

# V1 схемы
class UserV1(BaseModel):
    id: int
    name: str
    email: str

# V2 схемы с новыми полями
class UserV2(BaseModel):
    id: int
    name: str
    email: str
    phone: Optional[str] = None
    avatar_url: Optional[str] = None

# Миграция между версиями
def migrate_user_v1_to_v2(user_v1: UserV1) -> UserV2:
    return UserV2(
        id=user_v1.id,
        name=user_v1.name,
        email=user_v1.email
    )
```

### **Документирование моделей**

```python
# ✅ DO: Подробная документация моделей
class User(BaseModel):
    """
    Модель пользователя системы.

    Attributes:
        id: Уникальный идентификатор пользователя
        name: Полное имя пользователя (2-50 символов)
        email: Email адрес (должен быть валидным)
        age: Возраст пользователя (0-120 лет)
        is_active: Статус активности пользователя
        created_at: Дата и время создания записи
    """

    id: int = Field(description="Уникальный идентификатор пользователя")
    name: str = Field(
        min_length=2,
        max_length=50,
        description="Полное имя пользователя"
    )
    email: EmailStr = Field(description="Email адрес пользователя")
    age: int = Field(
        ge=0,
        le=120,
        description="Возраст пользователя в годах"
    )
    is_active: bool = Field(
        default=True,
        description="Статус активности пользователя"
    )
    created_at: datetime = Field(
        default_factory=datetime.utcnow,
        description="Дата и время создания записи"
    )
```

### **Конфигурация модели**

```python
# ✅ DO: Глобальная конфигурация
class BaseAppModel(BaseModel):
    """Базовая модель приложения с общей конфигурацией."""

    model_config = ConfigDict(
        # Валидация
        strict=True,
        validate_assignment=True,
        revalidate_instances='always',

        # Сериализация
        from_attributes=True,
        populate_by_name=True,

        # Дополнительные поля
        extra='forbid',

        # JSON настройки
        json_encoders={
            datetime: lambda v: v.isoformat(),
            UUID: str,
        },

        # Схема
        json_schema_extra={
            "examples": [
                {
                    "name": "John Doe",
                    "email": "john@example.com",
                    "age": 30
                }
            ]
        }
    )

# Наследование от базовой модели
class User(BaseAppModel):
    id: int
    name: str
    email: str
```

## **Лучшие практики**

### **✅ DO:**

- **Используйте строгую типизацию**: Всегда указывайте типы полей
- **Применяйте валидаторы**: Для сложной бизнес-логики
- **Документируйте модели**: Используйте docstrings и Field descriptions
- **Версионируйте схемы**: При изменении API
- **Обрабатывайте ошибки**: Используйте ValidationError
- **Тестируйте валидацию**: Покрывайте тестами все валидаторы
- **Используйте алиасы**: Для интеграции с внешними API
- **Конфигурируйте модели**: Настройте поведение под требования проекта

### **❌ DON'T:**

- **Не используйте any**: Заменяйте на конкретные типы
- **Не игнорируйте ошибки валидации**: Всегда обрабатывайте ValidationError
- **Не смешивайте версии**: Используйте только Pydantic V2
- **Не забывайте про производительность**: Используйте правильные типы
- **Не дублируйте валидацию**: Используйте переиспользуемые валидаторы
- **Не игнорируйте документацию**: Документируйте все публичные модели

## **Ссылки на документацию**

- [Pydantic V2 Documentation](https://docs.pydantic.dev/latest/)
- [Pydantic Models](https://docs.pydantic.dev/latest/concepts/models/)
- [Pydantic Validation](https://docs.pydantic.dev/latest/concepts/validators/)
- [Pydantic Serialization](https://docs.pydantic.dev/latest/concepts/serialization/)
- [FastAPI Pydantic Integration](https://fastapi.tiangolo.com/tutorial/body/)
- [SQLAlchemy Pydantic Integration](https://docs.pydantic.dev/latest/integrations/sqlalchemy/)
  description:
  globs:
  alwaysApply: false

---
