---
description: Comprehensive GitHub security best practices and hardening guide
globs: .github/**/*.yml, .github/**/*.yaml, SECURITY.md, **/.gitignore, **/secrets/**
alwaysApply: false
---
---
description: "Comprehensive GitHub security best practices and hardening guide"
globs: [".github/**/*.yml", ".github/**/*.yaml", "SECURITY.md", "CODEOWNERS", ".github/dependabot.yml"]
alwaysApply: false
---

# GitHub Security Best Practices

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ CI/CD pipeline –Ω–∞ GitHub.

## üîê Account Security Foundation

### Two-Factor Authentication (2FA)
```bash
# –í–∫–ª—é—á–µ–Ω–∏–µ 2FA –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
# GitHub Settings ‚Üí Password and authentication ‚Üí Two-factor authentication

# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):
1. ü•á Hardware Security Keys (YubiKey, etc.)
2. ü•à Authenticator Apps (Authy, Google Authenticator)
3. ü•â GitHub Mobile
4. ‚ùå SMS (–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
```

### SSH Key Management
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–∞ —Å —Å–∏–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
ssh-keygen -t ed25519 -C "your.email@example.com" -f ~/.ssh/github_ed25519

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ passphrase (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
ssh-keygen -p -f ~/.ssh/github_ed25519

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH config
cat >> ~/.ssh/config << 'EOF'
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_ed25519
    IdentitiesOnly yes
EOF

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ ssh-agent
ssh-add ~/.ssh/github_ed25519
```

### GPG Commit Signing
```bash
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GPG –∫–ª—é—á–∞
gpg --full-generate-key

# –≠–∫—Å–ø–æ—Ä—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è GitHub
gpg --armor --export YOUR_KEY_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫–æ–º–º–∏—Ç–æ–≤
git config --global user.signingkey YOUR_KEY_ID
git config --global commit.gpgsign true
git config --global tag.gpgsign true

# –ü–æ–¥–ø–∏—Å—å –∫–æ–º–º–∏—Ç–∞
git commit -S -m "feat: add new feature"
```

## üõ°Ô∏è Repository Security Configuration

### Branch Protection Rules
```yaml
# –ß–µ—Ä–µ–∑ GitHub API –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
protection_rules:
  main:
    required_status_checks:
      strict: true
      contexts:
        - "ci/build"
        - "security/scan"
        - "test/unit"
    enforce_admins: true
    required_pull_request_reviews:
      required_approving_review_count: 2
      dismiss_stale_reviews: true
      require_code_owner_reviews: true
      require_last_push_approval: true
    restrictions: null
    allow_force_pushes: false
    allow_deletions: false
    required_linear_history: true
    required_conversation_resolution: true
```

### Security Policy Setup
```markdown
# SECURITY.md template
# Security Policy

## Supported Versions

| Version | Supported          |
| ------- | ------------------ |
| 2.1.x   | :white_check_mark: |
| 2.0.x   | :white_check_mark: |
| 1.x.x   | :x:                |

## Reporting a Vulnerability

**DO NOT** create public issues for security vulnerabilities.

### Private Reporting
1. Use GitHub Security Advisory: Repository ‚Üí Security ‚Üí Advisories
2. Email: security@yourcompany.com
3. Expected response: 48 hours

### Disclosure Timeline
- Initial response: 48 hours
- Assessment: 5 business days
- Fix development: Varies by severity
- Public disclosure: After fix deployment
```

### CODEOWNERS Configuration
```bash
# .github/CODEOWNERS
# Global ownership
* @security-team @lead-developer

# Security-critical files
/.github/ @security-team @devops-team
/src/auth/ @security-team @backend-team
/src/payment/ @security-team @backend-team @finance-team
Dockerfile* @security-team @devops-team
docker-compose*.yml @security-team @devops-team

# Documentation
*.md @documentation-team
/docs/ @documentation-team

# Configuration files
*.json @lead-developer @devops-team
*.yml @devops-team
*.yaml @devops-team
```

## üîç Secret Management & Scanning

### GitHub Secrets Best Practices
```bash
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ secrets —á–µ—Ä–µ–∑ CLI
gh secret set DATABASE_URL --body "postgresql://user:pass@host:5432/db"
gh secret set API_KEY --body "sk-..." --visibility private

# Environment-specific secrets
gh secret set PROD_DATABASE_URL --env production
gh secret set STAGING_API_KEY --env staging

# Organization secrets
gh secret set SHARED_SECRET --org --visibility private
```

### Secret Scanning Configuration
```yaml
# .github/secret_scanning.yml
# Custom patterns for organization-specific secrets
patterns:
  - name: "Internal API Key"
    regex: "internal_api_[a-zA-Z0-9]{32}"
    confidence: high
    
  - name: "Database Connection String"
    regex: "postgresql://[^\\s]+"
    confidence: medium
```

### Preventing Secret Leaks
```bash
# Pre-commit hook –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
#!/bin/bash
# .git/hooks/pre-commit

# –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
if git diff --cached --name-only | xargs grep -l "password\|secret\|key\|token" 2>/dev/null; then
    echo "‚ö†Ô∏è  WARNING: Potential secrets detected!"
    echo "Please review the files and ensure no secrets are committed."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
for file in $(git diff --cached --name-only); do
    if [ -f "$file" ] && [ $(wc -c < "$file") -gt 1048576 ]; then
        echo "‚ùå ERROR: File $file is larger than 1MB"
        exit 1
    fi
done
```

## üö® Dependency Security

### Dependabot Configuration
```yaml
# .github/dependabot.yml
version: 2
updates:
  # Package ecosystem
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "09:00"
    open-pull-requests-limit: 10
    reviewers:
      - "security-team"
    assignees:
      - "lead-developer"
    commit-message:
      prefix: "deps"
      include: "scope"
    
  # Docker dependencies
  - package-ecosystem: "docker"
    directory: "/"
    schedule:
      interval: "weekly"
    
  # GitHub Actions
  - package-ecosystem: "github-actions"
    directory: "/.github/workflows"
    schedule:
      interval: "weekly"
```

### Vulnerability Management
```bash
# –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
npm audit --audit-level=moderate
npm audit fix

# Python dependencies
pip-audit --requirement requirements.txt
safety check

# GitHub CLI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ alerts
gh api repos/:owner/:repo/vulnerability-alerts
gh api repos/:owner/:repo/dependabot/alerts
```

## üîí GitHub Actions Security

### Secure Workflow Configuration
```yaml
name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
permissions:
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # –î–ª—è CodeQL
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
```

### Action Security Pinning
```yaml
# ‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ latest
- uses: actions/checkout@main

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ - pinning –∫ commit SHA
- uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

# ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - pinning –∫ —Ç–µ–≥—É
- uses: actions/checkout@v4.1.1
```

### Secrets in Actions
```yaml
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # –¢—Ä–µ–±—É–µ—Ç approval
    
    steps:
      - name: Deploy to production
        env:
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º secrets, –∞ –Ω–µ hardcode
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–≤–æ–¥–∏–º secrets –≤ –ª–æ–≥–∏
          echo "Deploying application..."
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º secrets —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥
```

## üåê Organization Security

### Organization Settings
```yaml
organization_security:
  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è 2FA –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  two_factor_requirement: enabled
  
  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  members_can_create_repositories: false
  members_can_create_public_repositories: false
  
  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–∑–æ–≤—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º
  default_repository_permission: read
  
  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ forking
  members_can_fork_private_repositories: false
  
  # Dependency insights
  dependency_graph_enabled_for_new_repositories: true
  dependabot_alerts_enabled_for_new_repositories: true
  dependabot_security_updates_enabled_for_new_repositories: true
```

### Team Management
```bash
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
gh api orgs/:org/teams \
  --method POST \
  --field name='security-reviewers' \
  --field description='Security review team' \
  --field privacy='closed'

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
gh api orgs/:org/teams/security-reviewers/memberships/:username \
  --method PUT \
  --field role='member'
```

## üîê Advanced Security Features

### CodeQL Configuration
```yaml
# .github/codeql/codeql-config.yml
name: "CodeQL Config"

disable-default-queries: false

queries:
  - name: security-extended
    uses: security-extended
  - name: security-and-quality
    uses: security-and-quality

paths-ignore:
  - "node_modules"
  - "dist"
  - "build"
  - "**/*.test.js"

paths:
  - "src"
  - "lib"
```

### Custom Security Scanning
```yaml
name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 2:00
  workflow_dispatch:

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
```

## üìä Security Monitoring & Audit

### Audit Log Monitoring
```bash
# –ü–æ–ª—É—á–µ–Ω–∏–µ audit logs —á–µ—Ä–µ–∑ API
gh api orgs/:org/audit-log \
  --field phrase="action:repo" \
  --field include="all"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
CRITICAL_EVENTS=(
  "repo.create"
  "repo.destroy"
  "repo.access"
  "org.add_member"
  "org.remove_member"
  "team.add_member"
  "team.remove_member"
)
```

### Security Metrics Dashboard
```python
# –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–±–æ—Ä–∞ security metrics
import requests
import json

def get_security_metrics(org, repo):
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    metrics = {
        'vulnerabilities': get_vulnerability_alerts(org, repo, headers),
        'secret_scanning': get_secret_scanning_alerts(org, repo, headers),
        'branch_protection': check_branch_protection(org, repo, headers),
        'two_factor_auth': check_2fa_compliance(org, headers)
    }
    
    return metrics
```

## üöÄ Incident Response Plan

### Security Incident Workflow
```markdown
## Security Incident Response

### üö® IMMEDIATE (0-1 hour)
1. **Assess scope and impact**
2. **Isolate affected systems**
   - Revoke compromised tokens/keys
   - Disable affected accounts
   - Lock affected repositories
3. **Notify security team**

### üîç INVESTIGATION (1-24 hours)
1. **Collect evidence**
   - Audit logs
   - Access logs
   - Code changes
2. **Determine attack vector**
3. **Assess data exposure**

### üõ†Ô∏è REMEDIATION (24-72 hours)
1. **Fix vulnerabilities**
2. **Rotate all secrets**
3. **Update dependencies**
4. **Strengthen access controls**

### üìù POST-INCIDENT (1 week)
1. **Document lessons learned**
2. **Update security policies**
3. **Improve monitoring**
4. **Team training**
```

### Emergency Scripts
```bash
#!/bin/bash
# emergency-response.sh

# –û—Ç–∑—ã–≤ –≤—Å–µ—Ö personal access tokens
gh api user/tokens --paginate | jq -r '.[].id' | while read token_id; do
    gh api "user/tokens/$token_id" --method DELETE
done

# –í–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 2FA –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
gh api orgs/:org --method PATCH --field two_factor_requirement_enabled=true

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
gh api orgs/:org/members/:username --method DELETE
```

## üéØ Security Checklist

### Repository Security Audit
- [ ] **Branch Protection** –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è main/master
- [ ] **Required reviews** –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–º–∏–Ω–∏–º—É–º 2)
- [ ] **Status checks** –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø–µ—Ä–µ–¥ merge
- [ ] **Signed commits** —Ç—Ä–µ–±—É—é—Ç—Å—è
- [ ] **Force push** –∑–∞–ø—Ä–µ—â–µ–Ω
- [ ] **Admin enforcement** –≤–∫–ª—é—á–µ–Ω

### Access Control
- [ ] **2FA** –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö collaborators
- [ ] **SSH keys** –∏—Å–ø–æ–ª—å–∑—É—é—Ç ed25519
- [ ] **GPG signing** –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] **CODEOWNERS** —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
- [ ] **Least privilege** –ø—Ä–∏–º–µ–Ω–µ–Ω

### Secret Management
- [ ] **Secret scanning** –≤–∫–ª—é—á–µ–Ω
- [ ] **Push protection** –∞–∫—Ç–∏–≤–µ–Ω
- [ ] **Environment secrets** –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] **Custom patterns** –¥–æ–±–∞–≤–ª–µ–Ω—ã
- [ ] **Regular rotation** –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞

### Dependencies
- [ ] **Dependabot** –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] **Vulnerability alerts** –≤–∫–ª—é—á–µ–Ω—ã
- [ ] **Auto-updates** –¥–ª—è security patches
- [ ] **License scanning** –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è
- [ ] **SBOM** –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è

### CI/CD Security
- [ ] **Actions permissions** –º–∏–Ω–∏–º–∞–ª—å–Ω—ã
- [ ] **Third-party actions** pinned
- [ ] **Secrets** –Ω–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è
- [ ] **Environment protection** –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
- [ ] **Approval workflows** –¥–ª—è production

## üîó Security Resources

### GitHub Security Features
- [GitHub Advanced Security](mdc:https:/docs.github.com/en/get-started/learning-about-github/about-github-advanced-security)
- [Secret Scanning](mdc:https:/docs.github.com/en/code-security/secret-scanning)
- [CodeQL Analysis](mdc:https:/docs.github.com/en/code-security/code-scanning)
- [Dependabot](mdc:https:/docs.github.com/en/code-security/dependabot)

### Security Tools
- [GitHub CLI](mdc:https:/cli.github.com)
- [Trivy Scanner](mdc:https:/trivy.dev)
- [GitGuardian](mdc:https:/www.gitguardian.com)
- [Snyk](mdc:https:/snyk.io)

### Best Practices
- [OWASP SAMM](mdc:https:/owaspsamm.org)
- [NIST Cybersecurity Framework](mdc:https:/www.nist.gov/cyberframework)
- [SLSA Framework](mdc:https:/slsa.dev)
- [Supply Chain Security](mdc:https:/github.com/ossf/scorecard)
