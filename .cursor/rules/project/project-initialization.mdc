---
description: "Step-by-step modern Python project initialization with best practices"
globs: pyproject.toml, setup.py, requirements/**/*, .pre-commit-config.yaml, alembic.ini
alwaysApply: false
---

# üöÄ Project Initialization Guide with Poetry

–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Python –ø—Ä–æ–µ–∫—Ç–∞ —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –∏ Poetry.

## üìã Quick Start Commands

### 1. Repository Setup
```bash
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
mkdir vk-comments-monitor && cd vk-comments-monitor
git init
git branch -M main

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
mkdir -p app/{api/v1,core,models,schemas,services,workers,monitoring}
mkdir -p tests/{unit,integration,e2e}
mkdir -p deployment/{docker,k8s,terraform}
mkdir -p docs memory-bank
mkdir -p .github/{workflows,ISSUE_TEMPLATE}
mkdir -p .cursor/rules

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö __init__.py —Ñ–∞–π–ª–æ–≤
touch app/__init__.py
touch app/api/__init__.py
touch app/api/v1/__init__.py
touch app/core/__init__.py
touch app/models/__init__.py
touch app/schemas/__init__.py
touch app/services/__init__.py
touch app/workers/__init__.py
touch app/monitoring/__init__.py
touch tests/__init__.py
```

### 2. Poetry Setup
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Poetry (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
curl -sSL https://install.python-poetry.org | python3 -

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Poetry –ø—Ä–æ–µ–∫—Ç–∞
poetry init --name="vk-comments-monitor" \
           --description="VK Comments Monitoring System" \
           --author="Your Name <email@example.com>" \
           --python="^3.11" \
           --dependency fastapi \
           --dependency uvicorn \
           --dev-dependency pytest \
           --dev-dependency black

# –°–æ–∑–¥–∞–Ω–∏–µ virtual environment –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è
poetry shell

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
poetry install
```

### 3. Dependencies Configuration with Poetry
```bash
# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
poetry add fastapi "uvicorn[standard]" 
poetry add "sqlalchemy[asyncio]" asyncpg alembic
poetry add "pydantic[email]" pydantic-settings
poetry add redis "celery[redis]"
poetry add httpx "python-jose[cryptography]"
poetry add "passlib[bcrypt]" python-multipart
poetry add loguru prometheus-client structlog
poetry add gunicorn vkbottle aiofiles

# Development –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
poetry add --group=dev pytest pytest-asyncio pytest-cov pytest-xdist
poetry add --group=dev httpx pre-commit black isort ruff mypy
poetry add --group=dev bandit safety coverage

# Test –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
poetry add --group=test pytest-mock faker factory-boy

# Docs –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏  
poetry add --group=docs mkdocs mkdocs-material

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
poetry show --tree
```

### 4. Core Configuration Files
```bash
# pyproject.toml (Poetry –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª)
cat >> pyproject.toml << 'EOF'

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
black = "^24.0.0"
isort = "^5.13.0"
ruff = "^0.7.0"
mypy = "^1.8.0"
pre-commit = "^4.0.0"

# Black formatter
[tool.black]
line-length = 88
target-version = ['py311']

# isort import sorting
[tool.isort]
profile = "black"
known_first_party = ["app", "tests"]

# Ruff linting
[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "W", "F", "I", "C", "B", "UP"]
ignore = ["E501", "B008", "C901"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S106"]

# mypy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
disallow_untyped_defs = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["--strict-markers", "--cov=app"]
testpaths = ["tests"]
asyncio_mode = "auto"

# coverage configuration
[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*"]

# bandit security linting
[tool.bandit]
exclude_dirs = ["tests"]
EOF

# .gitignore
curl -s https://raw.githubusercontent.com/github/gitignore/main/Python.gitignore > .gitignore
cat >> .gitignore << 'EOF'

# Project specific
logs/
.env*
!.env.example
htmlcov/
.coverage

# Poetry
poetry.lock
EOF

# Environment example
cat > .env.example << 'EOF'
# Application
APP_NAME="VK Comments Monitor"
DEBUG=true
SECRET_KEY="your-secret-key-here-minimum-32-characters"

# Database
DATABASE_URL="postgresql+asyncpg://vk_monitor:password@localhost:5432/vk_monitor"

# Redis
REDIS_URL="redis://localhost:6379/0"

# VK API
VK_ACCESS_TOKEN="your-vk-token-here"
VK_API_VERSION="5.131"
EOF
```

### 5. Pre-commit Setup with Poetry
```bash
# .pre-commit-config.yaml
cat > .pre-commit-config.yaml << 'EOF'
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json

  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort

  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.7.0
    hooks:
      - id: ruff

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit hooks —á–µ—Ä–µ–∑ Poetry
poetry run pre-commit install
```

## üèóÔ∏è Core Application Files

### 6. FastAPI Application Setup
```bash
# app/main.py
cat > app/main.py << 'EOF'
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.core.config import settings
from app.core.logging import setup_logging

# Setup logging
setup_logging()

# Create FastAPI app
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="VK Comments Monitoring System",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"] if settings.DEBUG else settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

# app/core/config.py
cat > app/core/config.py << 'EOF'
from typing import List, Optional
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field

class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env", case_sensitive=True)
    
    # Application
    APP_NAME: str = Field("VK Comments Monitor", description="Application name")
    APP_VERSION: str = Field("1.0.0", description="Application version")
    DEBUG: bool = Field(False, description="Debug mode")
    ENVIRONMENT: str = Field("production", description="Environment")
    
    # Security
    SECRET_KEY: str = Field(..., description="Secret key for JWT")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(30, description="Token expiration")
    
    # Database
    DATABASE_URL: str = Field(..., description="Database connection URL")
    
    # Redis
    REDIS_URL: str = Field(..., description="Redis connection URL")
    
    # VK API
    VK_ACCESS_TOKEN: str = Field(..., description="VK API access token")
    VK_API_VERSION: str = Field("5.131", description="VK API version")
    
    # CORS
    ALLOWED_ORIGINS: List[str] = Field(["http://localhost:3000"], description="Allowed CORS origins")

settings = Settings()
EOF

# app/core/logging.py
cat > app/core/logging.py << 'EOF'
import sys
from loguru import logger
from app.core.config import settings

def setup_logging():
    """Setup application logging"""
    logger.remove()
    
    # Console logging
    logger.add(
        sys.stderr,
        format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | {message}",
        level="DEBUG" if settings.DEBUG else "INFO",
        colorize=True,
    )
    
    # File logging
    if not settings.DEBUG:
        logger.add(
            "logs/app.log",
            rotation="100 MB",
            retention="30 days",
            level="INFO",
        )
EOF
```

### 7. Database Setup with Poetry
```bash
# app/core/database.py
cat > app/core/database.py << 'EOF'
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from app.core.config import settings

# Create async engine
engine = create_async_engine(settings.DATABASE_URL, echo=settings.DEBUG)

# Create session maker
async_session_maker = async_sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

# Base class for models
Base = declarative_base()

async def get_db() -> AsyncSession:
    """Database dependency"""
    async with async_session_maker() as session:
        try:
            yield session
        finally:
            await session.close()
EOF

# Alembic initialization
poetry run alembic init alembic

# alembic.ini update
sed -i 's|sqlalchemy.url = driver://user:pass@localhost/dbname|sqlalchemy.url = %(DATABASE_URL)s|' alembic.ini
```

### 8. Docker Configuration with Poetry
```bash
# Dockerfile
cat > Dockerfile << 'EOF'
FROM python:3.11-slim as requirements-stage

WORKDIR /tmp

# Install Poetry
RUN pip install poetry==1.8.3

# Copy Poetry files
COPY ./pyproject.toml ./poetry.lock* /tmp/

# Export requirements
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# Production stage
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install dependencies
COPY --from=requirements-stage /tmp/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . .

EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

# docker-compose.yml
cat > docker-compose.yml << 'EOF'
version: "3.9"

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: vk_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine

volumes:
  postgres_data:
EOF
```

## üöÄ Development Automation with Poetry

### 9. Makefile for Poetry
```bash
cat > Makefile << 'EOF'
.PHONY: help install dev test lint format clean

# Poetry path detection
POETRY := $(shell command -v poetry 2> /dev/null || echo ~/.local/share/pypoetry/venv/bin/poetry)

help:
	@echo "Available commands:"
	@echo "  install     - Install dependencies"
	@echo "  dev         - Run development server"
	@echo "  test        - Run tests"
	@echo "  lint        - Run linting"
	@echo "  format      - Format code"
	@echo "  clean       - Clean cache files"

install:
	$(POETRY) install

dev:
	$(POETRY) run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

test:
	$(POETRY) run pytest tests/ -v

lint:
	$(POETRY) run ruff check app tests
	$(POETRY) run mypy app

format:
	$(POETRY) run black app tests
	$(POETRY) run isort app tests

clean:
	find . -type d -name "__pycache__" -delete
	find . -type f -name "*.pyc" -delete
	rm -rf .coverage htmlcov/ .pytest_cache/ .mypy_cache/

migration:
	$(POETRY) run alembic revision --autogenerate -m "$(msg)"

migrate:
	$(POETRY) run alembic upgrade head
EOF
```

## üß™ Basic Tests with Poetry

### 10. Initial Tests
```bash
# tests/conftest.py
cat > tests/conftest.py << 'EOF'
import pytest
import asyncio
from fastapi.testclient import TestClient
from app.main import app

@pytest.fixture(scope="session")
def event_loop():
    """Create an instance of the default event loop for the test session."""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def client():
    return TestClient(app)
EOF

# tests/test_main.py
cat > tests/test_main.py << 'EOF'
def test_health_check(client):
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}
EOF

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
poetry run pytest
```

## üìä GitHub Actions CI/CD with Poetry

### 11. GitHub Actions Setup
```bash
# .github/workflows/ci.yml
mkdir -p .github/workflows
cat > .github/workflows/ci.yml << 'EOF'
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run linting
        run: |
          poetry run ruff check app tests
          poetry run mypy app
      
      - name: Run tests
        run: poetry run pytest tests/ -v --cov=app --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
EOF
```

## ‚úÖ Initialization Checklist

### Repository & Poetry Environment
- [ ] Git repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
- [ ] Poetry —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω  
- [ ] Virtual environment —Å–æ–∑–¥–∞–Ω–æ (`poetry shell`)
- [ ] Dependencies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (`poetry install`)
- [ ] Environment variables –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (.env —Å–æ–∑–¥–∞–Ω)

### Code Quality Tools
- [ ] Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (`poetry run pre-commit install`)
- [ ] Black, isort, ruff –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ pyproject.toml
- [ ] mypy type checking –≤–∫–ª—é—á–µ–Ω
- [ ] bandit security scanning –Ω–∞—Å—Ç—Ä–æ–µ–Ω

### Application Structure
- [ ] FastAPI application —Å–æ–∑–¥–∞–Ω–æ
- [ ] Database connection –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
- [ ] Logging —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
- [ ] Basic health check endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç

### Testing & CI/CD
- [ ] pytest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –≤ pyproject.toml
- [ ] Basic —Ç–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã
- [ ] GitHub Actions workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å Poetry
- [ ] Docker configuration –≥–æ—Ç–æ–≤–∞

### Poetry Verification
```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Poetry
poetry --version

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
poetry show --tree

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å virtual environment
poetry env info

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
poetry run uvicorn app.main:app --reload

# –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
poetry run pytest

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
poetry run ruff check app
poetry run mypy app
```

### Final Steps
```bash
# –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
git add .
git commit -m "feat: initial project setup with Poetry and modern Python stack"

# –î–æ–±–∞–≤–∏—Ç—å remote –∏ push (–µ—Å–ª–∏ remote –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
# git remote add origin <repository-url>
# git push -u origin main
```

## üéØ Poetry Daily Commands Reference

```bash
# Project management
poetry new project-name          # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
poetry init                      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–µ
poetry install                   # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
poetry shell                     # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å virtual environment

# Dependency management
poetry add fastapi              # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
poetry add --group=dev pytest  # –î–æ–±–∞–≤–∏—Ç—å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
poetry remove package-name     # –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
poetry update                  # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
poetry show --tree            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

# Environment management
poetry env info               # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
poetry env list              # –°–ø–∏—Å–æ–∫ environments
poetry run python app.py    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Å—Ä–µ–¥–µ

# Building and publishing
poetry build                 # –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç
poetry publish              # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ PyPI
```

---

üöÄ **–†–µ–∑—É–ª—å—Ç–∞—Ç**: –ì–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ Python –ø—Ä–æ–µ–∫—Ç —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–µ–∫–æ–º –Ω–∞ Poetry –∏ –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏! 
