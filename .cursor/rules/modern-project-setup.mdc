---
description: "Modern Python project setup with best practices and automation tools for 2025"
globs: pyproject.toml, setup.py, setup.cfg, .pre-commit-config.yaml, requirements*.txt]
alwaysApply: false
---
# üöÄ Modern Python Project Setup 2025

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Python –ø—Ä–æ–µ–∫—Ç–∞ —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ **Poetry**.

## üì¶ Poetry Project Configuration

### pyproject.toml - Modern Python Build System with Poetry
```toml
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "vk-comments-monitor"
version = "1.0.0"
description = "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
authors = ["Developer <dev@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.34.0"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.41"}
asyncpg = "^0.30.0"
alembic = "^1.14.0"
pydantic = {extras = ["email"], version = "^2.10.0"}
pydantic-settings = "^2.7.0"
redis = "^5.2.0"
celery = {extras = ["redis"], version = "^5.5.0"}
httpx = "^0.28.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.9"
loguru = "^0.7.0"
prometheus-client = "^0.21.0"
structlog = "^24.4.0"
gunicorn = "^23.0.0"
vkbottle = "^4.3.12"
aiofiles = "^24.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-xdist = "^3.5.0"
httpx = "^0.28.0"
pre-commit = "^4.0.0"
black = "^24.0.0"
isort = "^5.13.0"
ruff = "^0.7.0"
mypy = "^1.8.0"
bandit = "^1.7.0"
safety = "^3.0.0"
coverage = "^7.6.0"

[tool.poetry.group.test.dependencies]
pytest-mock = "^3.12.0"
faker = "^30.0.0"
factory-boy = "^3.3.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.0"

# Black formatter
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''/(\.eggs|\.git|\.mypy_cache|\.venv|migrations|alembic/versions)/'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "tests"]
skip_glob = ["*/migrations/*", "*/alembic/versions/*"]

# Ruff linting (modern replacement for flake8)
[tool.ruff]
line-length = 88
target-version = "py311"
select = ["E", "W", "F", "I", "C", "B", "UP", "N", "S", "C4", "DTZ", "FA", "PIE", "T20", "SIM", "ERA"]
ignore = ["E501", "B008", "C901", "S101", "S603", "S607"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S106", "S311"]
"migrations/*" = ["ALL"]
"alembic/versions/*" = ["ALL"]

# mypy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
disallow_untyped_defs = true
strict_equality = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["vkbottle.*", "celery.*", "redis.*", "alembic.*"]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["--strict-markers", "--cov=app", "--cov-report=xml", "--cov-report=term-missing", "-ra"]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# coverage configuration
[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/migrations/*", "*/alembic/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if settings.DEBUG",
    "raise NotImplementedError",
]
show_missing = true
precision = 2

# bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic"]
skips = ["B101", "B601"]
```

## üîß Poetry Environment Configuration

### .env.example
```bash
# Application Configuration
APP_NAME="VK Comments Monitor"
APP_VERSION="1.0.0"
ENVIRONMENT="development"
DEBUG=true

# Security Configuration
SECRET_KEY="your-super-secret-key-here-minimum-32-characters-long"
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Database Configuration
DATABASE_URL="postgresql+asyncpg://vk_monitor:password@localhost:5432/vk_monitor"

# Redis Configuration
REDIS_URL="redis://localhost:6379/0"

# VK API Configuration
VK_ACCESS_TOKEN="your-vk-group-access-token-here"
VK_API_VERSION="5.131"
VK_REQUESTS_PER_SECOND=3

# Monitoring Configuration
SENTRY_DSN=""
PROMETHEUS_METRICS_PORT=9090
```

## üìÅ Modern Project Structure

```
vk-comments-monitor/
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îú‚îÄ‚îÄ workflows/          # GitHub Actions
‚îÇ   ‚îú‚îÄ‚îÄ ISSUE_TEMPLATE/     # Issue templates
‚îÇ   ‚îî‚îÄ‚îÄ pull_request_template.md
‚îú‚îÄ‚îÄ .cursor/
‚îÇ   ‚îî‚îÄ‚îÄ rules/              # Cursor AI rules
‚îú‚îÄ‚îÄ app/                    # Application code
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py            # FastAPI app
‚îÇ   ‚îú‚îÄ‚îÄ core/              # Core functionality
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config.py      # Settings with Pydantic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.py    # DB connection
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logging.py     # Logging setup
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ security.py    # Authentication
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ deps.py        # Dependencies
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ v1/            # API v1
‚îÇ   ‚îú‚îÄ‚îÄ models/            # SQLAlchemy models
‚îÇ   ‚îú‚îÄ‚îÄ schemas/           # Pydantic schemas
‚îÇ   ‚îú‚îÄ‚îÄ services/          # Business logic
‚îÇ   ‚îú‚îÄ‚îÄ workers/           # Celery tasks
‚îÇ   ‚îî‚îÄ‚îÄ monitoring/        # Metrics & monitoring
‚îú‚îÄ‚îÄ tests/                 # Tests
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îú‚îÄ‚îÄ integration/
‚îÇ   ‚îî‚îÄ‚îÄ e2e/
‚îú‚îÄ‚îÄ deployment/            # Deployment configs
‚îÇ   ‚îú‚îÄ‚îÄ docker/
‚îÇ   ‚îú‚îÄ‚îÄ k8s/
‚îÇ   ‚îî‚îÄ‚îÄ terraform/
‚îú‚îÄ‚îÄ docs/                  # Documentation
‚îú‚îÄ‚îÄ memory-bank/           # Memory Bank files
‚îú‚îÄ‚îÄ pyproject.toml         # Poetry configuration
‚îú‚îÄ‚îÄ poetry.lock            # Lock file
‚îú‚îÄ‚îÄ .pre-commit-config.yaml
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ alembic.ini
‚îú‚îÄ‚îÄ Makefile
‚îî‚îÄ‚îÄ README.md
```

## üê≥ Docker Configuration with Poetry

### Dockerfile
```dockerfile
# Multi-stage build –¥–ª—è production —Å Poetry
FROM python:3.11-slim as requirements-stage

WORKDIR /tmp

# Install Poetry
RUN pip install poetry==1.8.3

# Copy Poetry files
COPY ./pyproject.toml ./poetry.lock* /tmp/

# Export requirements
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

# Production stage
FROM python:3.11-slim

WORKDIR /app

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt

# Copy application code
COPY --chown=appuser:appuser . .

# Switch to non-root user
USER appuser

EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### docker-compose.yml with Poetry
```yaml
version: "3.9"

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: vk_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery-worker:
    build: .
    command: celery -A app.workers.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    command: celery -A app.workers.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/vk_monitor
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
```

## üìã Development Scripts with Poetry

### Makefile
```makefile
.PHONY: help install dev test lint format clean docker-build docker-up

# Poetry path detection
POETRY := $(shell command -v poetry 2> /dev/null || echo ~/.local/share/pypoetry/venv/bin/poetry)

help:
	@echo "Available commands:"
	@echo "  install     - Install production dependencies"
	@echo "  dev-install - Install development dependencies"
	@echo "  dev         - Run development server"
	@echo "  test        - Run tests"
	@echo "  test-cov    - Run tests with coverage"
	@echo "  lint        - Run linting"
	@echo "  format      - Format code"
	@echo "  clean       - Clean cache files"
	@echo "  docker-build - Build Docker image"
	@echo "  docker-up   - Start Docker services"

install:
	$(POETRY) install --only=main

dev-install:
	$(POETRY) install
	$(POETRY) run pre-commit install

dev:
	$(POETRY) run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

test:
	$(POETRY) run pytest tests/ -v

test-cov:
	$(POETRY) run pytest tests/ -v --cov=app --cov-report=html

test-fast:
	$(POETRY) run pytest tests/unit/ -v

lint:
	$(POETRY) run ruff check app tests
	$(POETRY) run mypy app
	$(POETRY) run bandit -r app/

format:
	$(POETRY) run black app tests
	$(POETRY) run isort app tests
	$(POETRY) run ruff check --fix app tests

clean:
	find . -type d -name "__pycache__" -delete
	find . -type f -name "*.pyc" -delete
	rm -rf .coverage htmlcov/ .pytest_cache/ .mypy_cache/

docker-build:
	docker build -t vk-comments-monitor .

docker-up:
	docker-compose up -d

docker-down:
	docker-compose down

migration:
	$(POETRY) run alembic revision --autogenerate -m "$(msg)"

migrate:
	$(POETRY) run alembic upgrade head

deps-check:
	$(POETRY) run safety check
	$(POETRY) run bandit -r app/

deps-update:
	$(POETRY) update

deps-add:
	$(POETRY) add $(pkg)

deps-add-dev:
	$(POETRY) add --group=dev $(pkg)

status:
	@echo "üêç Python: $(shell python --version)"
	@echo "üì¶ Poetry: $(shell $(POETRY) --version)"
	@echo "üèóÔ∏è  Project: $(shell $(POETRY) version)"
	@echo "üìç Environment: $(shell $(POETRY) env info --path)"
```

## ‚úÖ Setup Checklist

### Initial Setup
- [ ] Poetry —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (`curl -sSL https://install.python-poetry.org | python3 -`)
- [ ] Virtual environment —Å–æ–∑–¥–∞–Ω–æ (`poetry shell`)
- [ ] Dependencies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (`poetry install`)
- [ ] Pre-commit hooks —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (`make dev-install`)
- [ ] Environment variables –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (.env —Å–æ–∑–¥–∞–Ω)
- [ ] Database –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ
- [ ] Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ

### Development Tools
- [ ] Black formatter –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ IDE
- [ ] isort –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
- [ ] Ruff linting –≤–∫–ª—é—á–µ–Ω
- [ ] mypy  ] –∏–≥—É –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
- [ ] Pre-commit hooks –ø—Ä–æ—Ö–æ–¥—è—Ç

### CI/CD
- [ ] GitHub Actions workflows –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] Branch protection –≤–∫–ª—é—á–µ–Ω
- [ ] Dependabot –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Security scanning –≤–∫–ª—é—á–µ–Ω
- [ ] Code coverage –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è
- [ ] Docker builds —Ä–∞–±–æ—Ç–∞—é—Ç

### Monitoring
- [ ] Logging –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
- [ ] Prometheus metrics –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã
- [ ] Health checks endpoints —Å–æ–∑–¥–∞–Ω—ã
- [ ] Error tracking (Sentry) –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- [ ] Performance monitoring –≤–∫–ª—é—á–µ–Ω–æ

## üöÄ Poetry Commands Quick Reference

```bash
# Project management
poetry new project-name
poetry init
poetry install
poetry shell

# Dependencies
poetry add fastapi
poetry add --group=dev pytest
poetry add --group=test factory-boy
poetry remove package-name
poetry update
poetry show --tree

# Environment
poetry env info
poetry env list
poetry env remove env-name

# Build & Publish
poetry build
poetry publish

# Scripts
poetry run python -m app.main
poetry run pytest
poetry run alembic upgrade head
```

---

üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: [Poetry Documentation](https://python-poetry.org/docs/) | [FastAPI](https://fastapi.tiangolo.com/) | [Ruff](https://docs.astral.sh/ruff) 