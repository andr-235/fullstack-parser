---
description: "Python code style guidelines with Ruff, Black and modern tools"
globs: **/*.py, pyproject.toml, setup.cfg, .pre-commit-config.yaml
alwaysApply: false
---

# üé® Python Code Style Guidelines

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è Python –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ruff, Black –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ 2025.

## üõ†Ô∏è –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### Ruff - Ultra-fast Python Linter (–∑–∞–º–µ–Ω–∞ flake8, isort)
```toml
# pyproject.toml
[tool.ruff]
line-length = 88
target-version = "py311"

# Enable rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe complexity
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "FA",  # flake8-future-annotations
    "PIE", # flake8-pie
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ERA", # eradicate
]

ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert in tests
    "S603",  # subprocess without shell equals true
    "S607",  # starting process with partial path
]

# Per-file ignores
[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["S101", "S106", "S311"]
"migrations/*" = ["ALL"]
"alembic/versions/*" = ["ALL"]

# Import sorting (replaces isort)
[tool.ruff.isort]
known-first-party = ["app", "tests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# McCabe complexity
[tool.ruff.mccabe]
max-complexity = 10

# pyupgrade settings
[tool.ruff.pyupgrade]
keep-runtime-typing = true
```

### Black (Code Formatter)
```toml
# pyproject.toml
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.venv
  | _build
  | build
  | dist
  | migrations
  | alembic/versions
)/
'''
```

### Bandit (Security Scanner)
```toml
# pyproject.toml
[tool.bandit]
exclude_dirs = ["tests", "migrations", "alembic"]
skips = ["B101", "B601"]
assert_used = {
    skips = ["*_test.py", "*test_*.py"]
}
```

### Pyupgrade (Python Version Upgrade)
```toml
# pyproject.toml  
[tool.pyupgrade]
py311-plus = true
```

### mypy (Type Checking)
```toml
# pyproject.toml
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

# Plugins
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]

# Per-module configuration
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
strict = false

[[tool.mypy.overrides]]
module = [
    "vk_api.*",
    "celery.*",
    "redis.*",
    "alembic.*"
]
ignore_missing_imports = true

# Pydantic plugin settings
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
```

## üìù Naming Conventions

### Variables & Functions
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - snake_case
user_name = "John Doe"
comment_text = "Hello world"
max_retry_count = 3

def get_user_by_id(user_id: int) -> User:
    pass

def calculate_total_score(scores: list[int]) -> float:
    pass

# ‚ùå –ü–ª–æ—Ö–æ
userName = "John Doe"  # camelCase
CommentText = "Hello"  # PascalCase
MAX_RETRY_COUNT = 3   # CONSTANT style –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

def getUserById(userId: int) -> User:  # camelCase
    pass
```

### Classes
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - PascalCase
class UserService:
    pass

class CommentRepository:
    pass

class VKAPIClient:
    pass

# ‚ùå –ü–ª–æ—Ö–æ
class user_service:  # snake_case
    pass

class commentRepository:  # camelCase
    pass
```

### Constants
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - UPPER_SNAKE_CASE
MAX_RETRIES = 3
DEFAULT_TIMEOUT = 30
VK_API_VERSION = "5.131"
DATABASE_URL = "postgresql://..."

# ‚ùå –ü–ª–æ—Ö–æ
max_retries = 3  # snake_case –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MaxRetries = 3   # PascalCase
```

### Files & Modules
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - snake_case
user_service.py
comment_repository.py
vk_api_client.py
database_config.py

# ‚ùå –ü–ª–æ—Ö–æ
UserService.py      # PascalCase
commentRepository.py # camelCase
VK-API-Client.py    # kebab-case
```

## üèóÔ∏è Code Structure

### Import Organization
```python
# –ü–æ—Ä—è–¥–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
# 1. Standard library
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

# 2. Third-party packages
import uvicorn
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel, Field

# 3. Local imports
from app.core.config import settings
from app.database import get_db
from app.models.user import User
from app.schemas.user import UserCreate, UserRead

# 4. Relative imports (–≤ –∫–æ–Ω—Ü–µ)
from .utils import generate_token
from .exceptions import UserNotFoundException
```

### Function Signatures
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - —Å —Ç–∏–ø–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
async def get_comments_by_group(
    db: AsyncSession,
    group_id: int,
    *,
    skip: int = 0,
    limit: int = 100,
    include_reviewed: bool = False
) -> List[Comment]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥—Ä—É–ø–ø—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        group_id: ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        skip: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        include_reviewed: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Comment
        
    Raises:
        GroupNotFoundException: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    pass

# ‚ùå –ü–ª–æ—Ö–æ - –±–µ–∑ —Ç–∏–ø–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
def get_comments(db, group_id, skip=0, limit=100):
    pass
```

### Class Structure
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
class CommentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."""
    
    def __init__(self, db: AsyncSession, vk_client: VKAPIClient) -> None:
        self._db = db
        self._vk_client = vk_client
    
    # Public methods
    async def create_comment(self, comment_data: CommentCreate) -> Comment:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
        pass
    
    async def get_comments_by_group(
        self,
        group_id: int,
        *,
        filters: Optional[CommentFilters] = None
    ) -> List[Comment]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≥—Ä—É–ø–ø—ã."""
        pass
    
    # Private methods
    async def _validate_comment_data(self, data: CommentCreate) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        pass
    
    async def _check_duplicate(self, vk_comment_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        pass
```

## üîß Error Handling

### Exception Handling
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
async def get_user_by_id(db: AsyncSession, user_id: int) -> User:
    try:
        result = await db.execute(
            select(User).where(User.id == user_id)
        )
        user = result.scalar_one_or_none()
        
        if user is None:
            raise UserNotFoundException(f"User with id {user_id} not found")
            
        return user
        
    except SQLAlchemyError as e:
        logger.error(f"Database error while getting user {user_id}: {e}")
        raise DatabaseException("Failed to retrieve user") from e
    except Exception as e:
        logger.error(f"Unexpected error while getting user {user_id}: {e}")
        raise

# ‚ùå –ü–ª–æ—Ö–æ - generic exception
async def get_user_by_id(db, user_id):
    try:
        # ... –∫–æ–¥ ...
        return user
    except Exception:
        return None  # –¢–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
```

### Logging
```python
# ‚úÖ –•–æ—Ä–æ—à–æ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import structlog

logger = structlog.get_logger(__name__)

async def process_comment(comment_data: dict) -> None:
    logger.info(
        "Processing comment",
        comment_id=comment_data["id"],
        group_id=comment_data["group_id"],
        author_id=comment_data["author_id"]
    )
    
    try:
        # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ ...
        logger.info(
            "Comment processed successfully",
            comment_id=comment_data["id"],
            processing_time=processing_time
        )
    except Exception as e:
        logger.error(
            "Failed to process comment",
            comment_id=comment_data["id"],
            error=str(e),
            exc_info=True
        )
        raise

# ‚ùå –ü–ª–æ—Ö–æ - –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
async def process_comment(comment_data):
    print(f"Processing comment {comment_data['id']}")  # print –≤–º–µ—Å—Ç–æ logger
    try:
        # ... –∫–æ–¥ ...
        logger.info("Success")  # –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    except Exception as e:
        logger.error(e)  # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
```

## üìã Docstrings

### Google Style Docstrings
```python
def calculate_sentiment_score(
    text: str,
    *,
    model_name: str = "default",
    confidence_threshold: float = 0.7
) -> tuple[str, float]:
    """
    –í—ã—á–∏—Å–ª–∏—Ç—å sentiment score –¥–ª—è —Ç–µ–∫—Å—Ç–∞.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –∫–∞—Ç–µ–≥–æ—Ä–∏—é sentiment'–∞ —Å –æ—Ü–µ–Ω–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
    
    Args:
        text: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç
        model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        confidence_threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ (sentiment_category, confidence_score)
        –≥–¥–µ sentiment_category in ['positive', 'negative', 'neutral']
        
    Raises:
        ValueError: –ï—Å–ª–∏ text –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        ModelNotFoundError: –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        
    Example:
        >>> calculate_sentiment_score("–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç!")
        ('positive', 0.85)
        
        >>> calculate_sentiment_score("–¢–∞–∫ —Å–µ–±–µ", confidence_threshold=0.8)
        ('neutral', 0.65)
    """
    pass
```

## ‚úÖ Pre-commit Configuration

### .pre-commit-config.yaml
```yaml
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files

  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.13

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
```

## üöÄ VS Code / Cursor Settings

### .vscode/settings.json
```json
{
  "python.formatting.provider": "black",
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.mypyEnabled": true,
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": true
  },
  "python.sortImports.args": ["--profile", "black"],
  "[python]": {
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.rulers": [88]
  }
}
```

## ‚úÖ Code Quality Checklist

### Before Commit
- [ ] `black .` - –∫–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
- [ ] `isort .` - –∏–º–ø–æ—Ä—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
- [ ] `flake8 .` - –Ω–µ—Ç –ª–∏–Ω—Ç–∏–Ω–≥ –æ—à–∏–±–æ–∫
- [ ] `mypy .` - —Ç–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
- [ ] –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç —Ç–∏–ø—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
- [ ] –í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–µ—é—Ç docstrings
- [ ] –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ UPPER_SNAKE_CASE
- [ ] –ö–ª–∞—Å—Å—ã –≤ PascalCase
- [ ] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ snake_case
- [ ] –ù–µ—Ç TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–æ–º–º–∏—Ç–µ
- [ ] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

### Code Review Points
- [ ] –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 20-30 —Å—Ç—Ä–æ–∫
- [ ] –ö–ª–∞—Å—Å—ã –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å—Ç—Ä–æ–∫
- [ ] –ò–∑–±–µ–≥–∞–µ–º –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (>3 —É—Ä–æ–≤–Ω–µ–π)
- [ ] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–Ω–∏–π return –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
- [ ] –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã
- [ ] –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ (DRY principle)
- [ ] –ò–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ
- [ ] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—ä—è—Å–Ω—è—é—Ç "–ø–æ—á–µ–º—É", –∞ –Ω–µ "—á—Ç–æ"

