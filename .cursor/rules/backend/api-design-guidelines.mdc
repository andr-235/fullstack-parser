---
description: "REST API design guidelines for FastAPI applications"
globs: **/api/**/*.py, **/routers/**/*.py, **/endpoints/**/*.py, main.py, app.py
alwaysApply: false
---

# 🌐 API Design Guidelines

Современные принципы проектирования REST API с FastAPI, включая OpenAPI 3.1, async/await и лучшие практики безопасности.

## 🚀 FastAPI Best Practices

### Application Structure
```python
# app/main.py - Modern FastAPI setup
from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError

from app.core.config import settings
from app.core.logging import setup_logging, log
from app.core.database import init_db, close_db
from app.api.v1.router import api_v1_router
from app.middleware.logging import RequestLoggingMiddleware
from app.middleware.rate_limit import RateLimitMiddleware


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator:
    """Application lifespan manager"""
    # Startup
    log.info("Starting application")
    await init_db()
    
    yield
    
    # Shutdown
    log.info("Shutting down application")
    await close_db()


# Create FastAPI application
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="VK Comments Monitoring System",
    openapi_version="3.1.0",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    openapi_url="/openapi.json" if settings.DEBUG else None,
    lifespan=lifespan,
    # Modern OpenAPI features
    openapi_tags=[
        {
            "name": "health",
            "description": "Health check endpoints",
        },
        {
            "name": "auth",
            "description": "Authentication and authorization",
        },
        {
            "name": "comments",
            "description": "Comment monitoring operations",
        },
        {
            "name": "groups",
            "description": "VK group management",
        },
    ],
    contact={
        "name": "API Support",
        "email": "api-support@example.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# Setup logging
setup_logging()

# Security middleware
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.ALLOWED_HOSTS,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH"],
    allow_headers=["*"],
)

# Custom middleware
app.add_middleware(RequestLoggingMiddleware)
app.add_middleware(RateLimitMiddleware)

# Include routers
app.include_router(
    api_v1_router,
    prefix="/api/v1",
    tags=["v1"]
)

# Global exception handlers
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Handle validation errors consistently"""
    log.warning(
        "Validation error",
        path=request.url.path,
        errors=exc.errors(),
    )
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "validation_error",
            "message": "Request validation failed",
            "details": exc.errors(),
        },
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handle unexpected errors"""
    log.error(
        "Unhandled exception",
        path=request.url.path,
        error_type=type(exc).__name__,
        error_message=str(exc),
        exc_info=True,
    )
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "internal_server_error",
            "message": "An unexpected error occurred",
        },
    )
```

### Пример REST API Endpoint с полной типизацией
```python
# app/api/v1/comments.py
from typing import List, Optional, Annotated
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException, Query, Path, status
from fastapi.security import HTTPBearer
from pydantic import Field, validator
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.core.auth import get_current_user
from app.schemas.comment import CommentRead, CommentCreate, CommentUpdate, CommentFilter
from app.schemas.user import UserRead
from app.services.comment_service import CommentService
from app.models.user import User

router = APIRouter(prefix="/comments", tags=["comments"])
security = HTTPBearer()

# Dependency injection
async def get_comment_service(
    db: AsyncSession = Depends(get_db)
) -> CommentService:
    return CommentService(db)

# Modern endpoint with full typing
@router.get(
    "",
    response_model=List[CommentRead],
    status_code=status.HTTP_200_OK,
    summary="Get comments",
    description="Retrieve comments with filtering and pagination",
    responses={
        200: {
            "description": "Comments retrieved successfully",
            "model": List[CommentRead],
        },
        401: {"description": "Authentication required"},
        403: {"description": "Insufficient permissions"},
        422: {"description": "Validation error"},
    },
)
async def get_comments(
    # Path parameters
    group_id: Annotated[
        Optional[int], 
        Path(description="VK group ID", ge=1)
    ] = None,
    
    # Query parameters with validation
    limit: Annotated[
        int, 
        Query(description="Number of comments to return", ge=1, le=100)
    ] = 20,
    
    offset: Annotated[
        int,
        Query(description="Number of comments to skip", ge=0)
    ] = 0,
    
    keyword: Annotated[
        Optional[str],
        Query(description="Keyword to search for", min_length=1, max_length=100)
    ] = None,
    
    date_from: Annotated[
        Optional[datetime],
        Query(description="Filter comments from this date")
    ] = None,
    
    date_to: Annotated[
        Optional[datetime],
        Query(description="Filter comments until this date")
    ] = None,
    
    # Dependencies
    current_user: User = Depends(get_current_user),
    comment_service: CommentService = Depends(get_comment_service),
) -> List[CommentRead]:
    """
    Retrieve comments with filtering and pagination.
    
    - **group_id**: VK group ID to filter by
    - **limit**: Maximum number of comments to return (1-100)
    - **offset**: Number of comments to skip for pagination
    - **keyword**: Search keyword in comment text
    - **date_from**: Filter comments from this date
    - **date_to**: Filter comments until this date
    """
    
    # Create filter object
    comment_filter = CommentFilter(
        group_id=group_id,
        keyword=keyword,
        date_from=date_from,
        date_to=date_to,
        limit=limit,
        offset=offset,
    )
    
    try:
        comments = await comment_service.get_comments(
            filter_params=comment_filter,
            user_id=current_user.id,
        )
        
        return [CommentRead.model_validate(comment) for comment in comments]
        
    except PermissionError:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to access this group",
        )
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=str(e),
        )

@router.post(
    "",
    response_model=CommentRead,
    status_code=status.HTTP_201_CREATED,
    summary="Create comment monitoring",
    description="Start monitoring comments for specified keywords",
)
async def create_comment_monitoring(
    comment_data: CommentCreate,
    current_user: User = Depends(get_current_user),
    comment_service: CommentService = Depends(get_comment_service),
) -> CommentRead:
    """Create new comment monitoring configuration"""
    
    try:
        comment = await comment_service.create_monitoring(
            comment_data=comment_data,
            user_id=current_user.id,
        )
        
        return CommentRead.model_validate(comment)
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail=str(e),
        )

@router.get(
    "/{comment_id}",
    response_model=CommentRead,
    summary="Get comment by ID",
    description="Retrieve specific comment by its ID",
)
async def get_comment(
    comment_id: Annotated[int, Path(description="Comment ID", ge=1)],
    current_user: User = Depends(get_current_user),
    comment_service: CommentService = Depends(get_comment_service),
) -> CommentRead:
    """Get comment by ID"""
    
    comment = await comment_service.get_by_id(
        comment_id=comment_id,
        user_id=current_user.id,
    )
    
    if not comment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Comment not found",
        )
    
    return CommentRead.model_validate(comment)

@router.put(
    "/{comment_id}",
    response_model=CommentRead,
    summary="Update comment monitoring",
    description="Update comment monitoring configuration",
)
async def update_comment(
    comment_id: Annotated[int, Path(description="Comment ID", ge=1)],
    comment_data: CommentUpdate,
    current_user: User = Depends(get_current_user),
    comment_service: CommentService = Depends(get_comment_service),
) -> CommentRead:
    """Update comment monitoring configuration"""
    
    comment = await comment_service.update(
        comment_id=comment_id,
        comment_data=comment_data,
        user_id=current_user.id,
    )
    
    if not comment:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Comment not found",
        )
    
    return CommentRead.model_validate(comment)

@router.delete(
    "/{comment_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Delete comment monitoring",
    description="Stop monitoring comments and delete configuration",
)
async def delete_comment(
    comment_id: Annotated[int, Path(description="Comment ID", ge=1)],
    current_user: User = Depends(get_current_user),
    comment_service: CommentService = Depends(get_comment_service),
) -> None:
    """Delete comment monitoring configuration"""
    
    deleted = await comment_service.delete(
        comment_id=comment_id,
        user_id=current_user.id,
    )
    
    if not deleted:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Comment not found",
        )
```

## 📋 Pydantic Schemas с современной валидацией

### Base Schema Classes
```python
# app/schemas/base.py
from datetime import datetime
from typing import Optional, Any, Dict
from pydantic import BaseModel, Field, ConfigDict

class BaseSchema(BaseModel):
    """Base schema with common configuration"""
    
    model_config = ConfigDict(
        # Pydantic v2 configuration
        from_attributes=True,
        use_enum_values=True,
        validate_assignment=True,
        arbitrary_types_allowed=False,
        str_strip_whitespace=True,
        # JSON schema extras
        json_schema_extra={
            "examples": []
        }
    )

class TimestampMixin(BaseModel):
    """Mixin for timestamp fields"""
    created_at: datetime = Field(
        description="Creation timestamp",
        examples=["2025-01-01T12:00:00Z"]
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="Last update timestamp",
        examples=["2025-01-01T12:30:00Z"]
    )

class IDMixin(BaseModel):
    """Mixin for ID field"""
    id: int = Field(
        description="Unique identifier",
        gt=0,
        examples=[1, 123, 456]
    )
```

### Comment Schemas
```python
# app/schemas/comment.py
from datetime import datetime
from typing import List, Optional, Annotated
from enum import Enum

from pydantic import (
    BaseModel, 
    Field, 
    field_validator, 
    model_validator,
    ConfigDict
)

from app.schemas.base import BaseSchema, TimestampMixin, IDMixin

class CommentStatus(str, Enum):
    """Comment monitoring status"""
    ACTIVE = "active"
    PAUSED = "paused"
    COMPLETED = "completed"
    ERROR = "error"

class CommentBase(BaseSchema):
    """Base comment schema"""
    group_id: Annotated[int, Field(
        description="VK group ID",
        gt=0,
        examples=[123456789]
    )]
    
    keywords: Annotated[List[str], Field(
        description="Keywords to monitor",
        min_length=1,
        max_length=10,
        examples=[["python", "fastapi", "api"]]
    )]
    
    is_active: Annotated[bool, Field(
        description="Whether monitoring is active",
        examples=[True]
    )] = True
    
    @field_validator("keywords")
    @classmethod
    def validate_keywords(cls, v: List[str]) -> List[str]:
        """Validate keywords list"""
        if not v:
            raise ValueError("At least one keyword is required")
        
        # Remove duplicates and empty strings
        keywords = list(set(keyword.strip().lower() for keyword in v if keyword.strip()))
        
        if not keywords:
            raise ValueError("At least one valid keyword is required")
        
        if len(keywords) > 10:
            raise ValueError("Maximum 10 keywords allowed")
        
        return keywords

class CommentCreate(CommentBase):
    """Schema for creating comment monitoring"""
    
    schedule_hours: Annotated[Optional[List[int]], Field(
        description="Hours when to check for comments (0-23)",
        examples=[[9, 12, 15, 18]]
    )] = None
    
    notification_email: Annotated[Optional[str], Field(
        description="Email for notifications",
        pattern=r'^[^@]+@[^@]+\.[^@]+$',
        examples=["user@example.com"]
    )] = None
    
    @field_validator("schedule_hours")
    @classmethod
    def validate_schedule_hours(cls, v: Optional[List[int]]) -> Optional[List[int]]:
        """Validate schedule hours"""
        if v is None:
            return v
        
        if not all(0 <= hour <= 23 for hour in v):
            raise ValueError("Hours must be between 0 and 23")
        
        return sorted(list(set(v)))  # Remove duplicates and sort

class CommentUpdate(BaseSchema):
    """Schema for updating comment monitoring"""
    keywords: Optional[List[str]] = Field(None, min_length=1, max_length=10)
    is_active: Optional[bool] = None
    schedule_hours: Optional[List[int]] = None
    notification_email: Optional[str] = Field(None, pattern=r'^[^@]+@[^@]+\.[^@]+$')
    
    @field_validator("keywords")
    @classmethod
    def validate_keywords(cls, v: Optional[List[str]]) -> Optional[List[str]]:
        """Validate keywords list"""
        if v is None:
            return v
        
        keywords = list(set(keyword.strip().lower() for keyword in v if keyword.strip()))
        
        if not keywords:
            raise ValueError("At least one valid keyword is required")
        
        return keywords

class CommentRead(CommentBase, IDMixin, TimestampMixin):
    """Schema for reading comment data"""
    status: CommentStatus = Field(description="Current monitoring status")
    last_check: Optional[datetime] = Field(
        None,
        description="Last check timestamp"
    )
    total_found: int = Field(
        0,
        description="Total comments found",
        ge=0
    )
    
    # JSON schema customization
    model_config = ConfigDict(
        json_schema_extra={
            "examples": [
                {
                    "id": 1,
                    "group_id": 123456789,
                    "keywords": ["python", "fastapi"],
                    "is_active": True,
                    "status": "active",
                    "last_check": "2025-01-01T12:00:00Z",
                    "total_found": 42,
                    "created_at": "2025-01-01T10:00:00Z",
                    "updated_at": "2025-01-01T12:00:00Z"
                }
            ]
        }
    )

class CommentFilter(BaseSchema):
    """Schema for filtering comments"""
    group_id: Optional[int] = Field(None, gt=0)
    keyword: Optional[str] = Field(None, min_length=1, max_length=100)
    status: Optional[CommentStatus] = None
    is_active: Optional[bool] = None
    date_from: Optional[datetime] = None
    date_to: Optional[datetime] = None
    limit: int = Field(20, ge=1, le=100)
    offset: int = Field(0, ge=0)
    
    @model_validator(mode='after')
    def validate_date_range(self) -> 'CommentFilter':
        """Validate date range"""
        if self.date_from and self.date_to and self.date_from > self.date_to:
            raise ValueError("date_from must be before date_to")
        return self
```

## 🔒 Authentication & Authorization

### JWT Authentication
```python
# app/core/auth.py
from datetime import datetime, timedelta
from typing import Optional, Annotated

from fastapi import HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import JWTError, jwt
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.config import settings
from app.core.database import get_db
from app.models.user import User
from app.services.user_service import UserService

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# JWT Bearer token
security = HTTPBearer(auto_error=False)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    """Create JWT access token"""
    to_encode = data.copy()
    
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm="HS256")
    
    return encoded_jwt

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify password against hash"""
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    """Hash password"""
    return pwd_context.hash(password)

async def get_current_user(
    credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)],
    db: AsyncSession = Depends(get_db),
) -> User:
    """Get current authenticated user"""
    
    if not credentials:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Authentication required",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    try:
        payload = jwt.decode(
            credentials.credentials,
            settings.SECRET_KEY,
            algorithms=["HS256"]
        )
        user_id: Optional[int] = payload.get("sub")
        
        if user_id is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )
            
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials", 
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    user_service = UserService(db)
    user = await user_service.get_by_id(user_id)
    
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="User not found",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    return user

async def get_current_active_user(
    current_user: User = Depends(get_current_user),
) -> User:
    """Get current active user"""
    if not current_user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    return current_user
```

## 📊 Response Models & Error Handling

### Стандартизированные ответы API
```python
# app/schemas/response.py
from typing import Generic, TypeVar, Optional, Any, Dict, List
from pydantic import BaseModel, Field

T = TypeVar('T')

class ApiResponse(BaseModel, Generic[T]):
    """Standard API response wrapper"""
    success: bool = Field(description="Operation success status")
    data: Optional[T] = Field(None, description="Response data")
    message: Optional[str] = Field(None, description="Response message")
    errors: Optional[List[str]] = Field(None, description="Error messages")
    meta: Optional[Dict[str, Any]] = Field(None, description="Response metadata")

class PaginatedResponse(BaseModel, Generic[T]):
    """Paginated response wrapper"""
    items: List[T] = Field(description="List of items")
    total: int = Field(description="Total number of items", ge=0)
    page: int = Field(description="Current page number", ge=1)
    per_page: int = Field(description="Items per page", ge=1)
    pages: int = Field(description="Total number of pages", ge=1)
    has_next: bool = Field(description="Whether there is a next page")
    has_prev: bool = Field(description="Whether there is a previous page")

class ErrorDetail(BaseModel):
    """Error detail model"""
    field: Optional[str] = Field(None, description="Field that caused the error")
    message: str = Field(description="Error message")
    code: Optional[str] = Field(None, description="Error code")

class ErrorResponse(BaseModel):
    """Error response model"""
    error: str = Field(description="Error type")
    message: str = Field(description="Error message")
    details: Optional[List[ErrorDetail]] = Field(None, description="Detailed error information")
    request_id: Optional[str] = Field(None, description="Request ID for tracking")
```

## ✅ API Development Checklist

### Endpoint Design
- [ ] RESTful URL patterns используются
- [ ] HTTP методы правильно применены
- [ ] Status codes соответствуют стандартам
- [ ] Consistent response format
- [ ] Proper error handling
- [ ] Input validation with Pydantic
- [ ] Output serialization with response models

### Security
- [ ] Authentication реализована
- [ ] Authorization проверки добавлены
- [ ] Input sanitization настроена
- [ ] Rate limiting включен
- [ ] CORS правильно настроен
- [ ] Security headers добавлены
- [ ] Sensitive data не логируется

### Documentation
- [ ] OpenAPI/Swagger docs генерируются
- [ ] Endpoint descriptions написаны
- [ ] Request/response examples добавлены
- [ ] Error responses документированы
- [ ] Authentication описана
- [ ] API versioning реализовано

### Performance
- [ ] Database queries оптимизированы
- [ ] Async/await используется везде
- [ ] Pagination реализована
- [ ] Caching настроен где необходимо
- [ ] Connection pooling настроен
- [ ] Background tasks для тяжелых операций

---

📚 **Документация**: [FastAPI Guide](mdc:https:/fastapi.tiangolo.com) | [Pydantic v2](mdc:https:/docs.pydantic.dev/latest) | [OpenAPI 3.1](mdc:https:/spec.openapis.org/oas/v3.1.0)

