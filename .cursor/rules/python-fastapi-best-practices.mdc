---
description: Modern FastAPI development patterns with async/await and dependency injection
globs: **/*.py, **/requirements*.txt, **/pyproject.toml, **/poetry.lock
alwaysApply: false
---

---
description: "Modern Python FastAPI development patterns with async/await and best practices"
globs: ["**/*.py", "**/main.py", "**/app.py", "**/api/**/*.py", "**/routers/**/*.py"]
alwaysApply: false
---

# Python FastAPI Best Practices

Современные практики разработки на Python с FastAPI для высокопроизводительных приложений.

## Project Structure & Organization 📁

### 1. Modern Python Project Layout
```
app/
├── __init__.py
├── main.py                    # FastAPI application
├── config.py                  # Settings with Pydantic
├── database.py                # DB connection & session
├── models/                    # SQLAlchemy models
│   ├── __init__.py
│   ├── base.py               # Base model class
│   ├── user.py
│   └── mixins.py             # Common model mixins
├── schemas/                   # Pydantic schemas
│   ├── __init__.py
│   ├── base.py               # Base schema
│   ├── user.py
│   └── responses.py          # Response schemas
├── api/                       # API routes
│   ├── __init__.py
│   ├── deps.py               # Dependencies
│   └── v1/                   # API version
│       ├── __init__.py
│       ├── auth.py
│       └── users.py
├── core/                      # Business logic
│   ├── __init__.py
│   ├── security.py           # Auth & JWT
│   ├── exceptions.py         # Custom exceptions
│   └── utils.py
├── services/                  # Service layer
│   ├── __init__.py
│   └── user_service.py
└── workers/                   # Background tasks
    ├── __init__.py
    ├── celery_app.py
    └── tasks.py
```

### 2. Configuration Management
```python
# config.py
from pydantic import BaseSettings, validator
from typing import Optional, List

class Settings(BaseSettings):
    # App
    APP_NAME: str = "FastAPI App"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = False
    
    # Security
    SECRET_KEY: str
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30
    
    # Database
    DATABASE_URL: str
    DATABASE_ECHO: bool = False
    
    # Redis
    REDIS_URL: str = "redis://localhost:6379"
    
    # API
    API_V1_STR: str = "/api/v1"
    
    # CORS
    BACKEND_CORS_ORIGINS: List[str] = []
    
    @validator("BACKEND_CORS_ORIGINS", pre=True)
    def assemble_cors_origins(cls, v):
        if isinstance(v, str) and not v.startswith("["):
            return [i.strip() for i in v.split(",")]
        elif isinstance(v, (list, str)):
            return v
        raise ValueError(v)
    
    class Config:
        env_file = ".env"
        case_sensitive = True

settings = Settings()
```

## FastAPI Application Setup 🚀

### 3. Main Application Structure
```python
# main.py
from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
import time

from app.config import settings
from app.api.v1.api import api_router
from app.core.exceptions import CustomException

def create_app() -> FastAPI:
    app = FastAPI(
        title=settings.APP_NAME,
        version=settings.APP_VERSION,
        openapi_url=f"{settings.API_V1_STR}/openapi.json",
        docs_url="/docs" if settings.DEBUG else None,
        redoc_url="/redoc" if settings.DEBUG else None,
    )
    
    # Middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.BACKEND_CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["localhost", "127.0.0.1", "*.yourdomain.com"]
    )
    
    # Custom middleware
    @app.middleware("http")
    async def add_process_time_header(request: Request, call_next):
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        response.headers["X-Process-Time"] = str(process_time)
        return response
    
    # Exception handlers
    @app.exception_handler(CustomException)
    async def custom_exception_handler(request: Request, exc: CustomException):
        return JSONResponse(
            status_code=exc.status_code,
            content={"detail": exc.detail, "error_code": exc.error_code}
        )
    
    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(request: Request, exc: RequestValidationError):
        return JSONResponse(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            content={"detail": exc.errors(), "body": exc.body}
        )
    
    # Health check
    @app.get("/health")
    async def health_check():
        return {"status": "healthy", "version": settings.APP_VERSION}
    
    # Include routers
    app.include_router(api_router, prefix=settings.API_V1_STR)
    
    return app

app = create_app()
```

### 4. Database Configuration
```python
# database.py
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase
from app.config import settings

# Create async engine
engine = create_async_engine(
    settings.DATABASE_URL,
    echo=settings.DATABASE_ECHO,
    pool_pre_ping=True,
    pool_recycle=300,
)

# Create session maker
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
)

# Base model
class Base(DeclarativeBase):
    pass

# Dependency
async def get_db() -> AsyncSession:
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()
```

## Models & Schemas 🗃️

### 5. SQLAlchemy Models
```python
# models/base.py
from sqlalchemy import DateTime, func
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from datetime import datetime

class TimestampMixin:
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), 
        server_default=func.now()
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), 
        server_default=func.now(),
        onupdate=func.now()
    )

# models/user.py
from sqlalchemy import String, Boolean, Integer
from sqlalchemy.orm import Mapped, mapped_column
from app.database import Base
from app.models.base import TimestampMixin

class User(Base, TimestampMixin):
    __tablename__ = "users"
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    email: Mapped[str] = mapped_column(String(255), unique=True, index=True)
    username: Mapped[str] = mapped_column(String(100), unique=True, index=True)
    hashed_password: Mapped[str] = mapped_column(String(255))
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    is_superuser: Mapped[bool] = mapped_column(Boolean, default=False)
```

### 6. Pydantic Schemas
```python
# schemas/base.py
from pydantic import BaseModel, ConfigDict
from datetime import datetime
from typing import Optional

class BaseSchema(BaseModel):
    model_config = ConfigDict(from_attributes=True)

class TimestampSchema(BaseSchema):
    created_at: datetime
    updated_at: datetime

# schemas/user.py
from pydantic import EmailStr, Field
from typing import Optional

class UserBase(BaseSchema):
    email: EmailStr
    username: str = Field(..., min_length=3, max_length=50)
    is_active: bool = True

class UserCreate(UserBase):
    password: str = Field(..., min_length=8)

class UserUpdate(BaseSchema):
    email: Optional[EmailStr] = None
    username: Optional[str] = Field(None, min_length=3, max_length=50)
    password: Optional[str] = Field(None, min_length=8)
    is_active: Optional[bool] = None

class UserInDB(UserBase, TimestampSchema):
    id: int
    hashed_password: str

class User(UserBase, TimestampSchema):
    id: int
```

## API Routes & Dependencies 🛣️

### 7. Dependency Injection
```python
# api/deps.py
from typing import Generator, Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer
from sqlalchemy.ext.asyncio import AsyncSession
from jose import jwt, JWTError

from app.database import get_db
from app.config import settings
from app.models.user import User
from app.services.user_service import UserService

security = HTTPBearer()

async def get_current_user(
    db: AsyncSession = Depends(get_db),
    token: str = Depends(security)
) -> User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(token.credentials, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        user_id: int = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user_service = UserService(db)
    user = await user_service.get_by_id(user_id)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(
    current_user: User = Depends(get_current_user),
) -> User:
    if not current_user.is_active:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user
```

### 8. Route Organization
```python
# api/v1/users.py
from typing import List
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.api.deps import get_db, get_current_active_user
from app.schemas.user import User, UserCreate, UserUpdate
from app.services.user_service import UserService

router = APIRouter()

@router.get("/", response_model=List[User])
async def read_users(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get all users with pagination."""
    user_service = UserService(db)
    users = await user_service.get_multi(skip=skip, limit=limit)
    return users

@router.post("/", response_model=User, status_code=status.HTTP_201_CREATED)
async def create_user(
    user_in: UserCreate,
    db: AsyncSession = Depends(get_db)
):
    """Create new user."""
    user_service = UserService(db)
    
    # Check if user exists
    if await user_service.get_by_email(user_in.email):
        raise HTTPException(
            status_code=400,
            detail="User with this email already exists"
        )
    
    user = await user_service.create(user_in)
    return user

@router.get("/{user_id}", response_model=User)
async def read_user(
    user_id: int,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Get user by ID."""
    user_service = UserService(db)
    user = await user_service.get_by_id(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user
```

## Service Layer & Business Logic 💼

### 9. Service Pattern
```python
# services/base.py
from typing import Any, Dict, Generic, List, Optional, Type, TypeVar, Union
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete
from sqlalchemy.orm import DeclarativeBase

ModelType = TypeVar("ModelType", bound=DeclarativeBase)
CreateSchemaType = TypeVar("CreateSchemaType", bound=BaseModel)
UpdateSchemaType = TypeVar("UpdateSchemaType", bound=BaseModel)

class BaseService(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):
    def __init__(self, model: Type[ModelType], db: AsyncSession):
        self.model = model
        self.db = db

    async def get_by_id(self, id: Any) -> Optional[ModelType]:
        result = await self.db.execute(select(self.model).where(self.model.id == id))
        return result.scalar_one_or_none()

    async def get_multi(
        self, *, skip: int = 0, limit: int = 100
    ) -> List[ModelType]:
        result = await self.db.execute(
            select(self.model).offset(skip).limit(limit)
        )
        return result.scalars().all()

    async def create(self, *, obj_in: CreateSchemaType) -> ModelType:
        obj_data = obj_in.model_dump()
        db_obj = self.model(**obj_data)
        self.db.add(db_obj)
        await self.db.commit()
        await self.db.refresh(db_obj)
        return db_obj

    async def update(
        self, *, db_obj: ModelType, obj_in: Union[UpdateSchemaType, Dict[str, Any]]
    ) -> ModelType:
        if isinstance(obj_in, dict):
            update_data = obj_in
        else:
            update_data = obj_in.model_dump(exclude_unset=True)
        
        for field, value in update_data.items():
            setattr(db_obj, field, value)
        
        await self.db.commit()
        await self.db.refresh(db_obj)
        return db_obj

    async def remove(self, *, id: int) -> ModelType:
        obj = await self.get_by_id(id)
        await self.db.delete(obj)
        await self.db.commit()
        return obj
```

### 10. Specific Service Implementation
```python
# services/user_service.py
from typing import Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from passlib.context import CryptContext

from app.models.user import User
from app.schemas.user import UserCreate, UserUpdate
from app.services.base import BaseService

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class UserService(BaseService[User, UserCreate, UserUpdate]):
    def __init__(self, db: AsyncSession):
        super().__init__(User, db)

    async def get_by_email(self, email: str) -> Optional[User]:
        result = await self.db.execute(select(User).where(User.email == email))
        return result.scalar_one_or_none()

    async def get_by_username(self, username: str) -> Optional[User]:
        result = await self.db.execute(select(User).where(User.username == username))
        return result.scalar_one_or_none()

    async def create(self, obj_in: UserCreate) -> User:
        hashed_password = pwd_context.hash(obj_in.password)
        db_obj = User(
            email=obj_in.email,
            username=obj_in.username,
            hashed_password=hashed_password,
            is_active=obj_in.is_active,
        )
        self.db.add(db_obj)
        await self.db.commit()
        await self.db.refresh(db_obj)
        return db_obj

    async def authenticate(self, email: str, password: str) -> Optional[User]:
        user = await self.get_by_email(email)
        if not user:
            return None
        if not pwd_context.verify(password, user.hashed_password):
            return None
        return user
```

## Error Handling & Validation 🚨

### 11. Custom Exceptions
```python
# core/exceptions.py
from fastapi import HTTPException
from typing import Any, Dict, Optional

class CustomException(HTTPException):
    def __init__(
        self,
        status_code: int,
        detail: Any = None,
        error_code: str = None,
        headers: Optional[Dict[str, Any]] = None,
    ):
        super().__init__(status_code=status_code, detail=detail, headers=headers)
        self.error_code = error_code

class UserNotFoundError(CustomException):
    def __init__(self):
        super().__init__(
            status_code=404,
            detail="User not found",
            error_code="USER_NOT_FOUND"
        )

class UserAlreadyExistsError(CustomException):
    def __init__(self):
        super().__init__(
            status_code=400,
            detail="User already exists",
            error_code="USER_ALREADY_EXISTS"
        )

class InvalidCredentialsError(CustomException):
    def __init__(self):
        super().__init__(
            status_code=401,
            detail="Invalid credentials",
            error_code="INVALID_CREDENTIALS"
        )
```

### 12. Input Validation
```python
# schemas/validators.py
from pydantic import validator, Field
from typing import List
import re

class StrictValidationSchema(BaseModel):
    email: EmailStr = Field(..., description="Valid email address")
    username: str = Field(..., min_length=3, max_length=50, regex="^[a-zA-Z0-9_]+$")
    password: str = Field(..., min_length=8)
    
    @validator('password')
    def validate_password_strength(cls, v):
        if not re.search(r"[A-Z]", v):
            raise ValueError('Password must contain at least one uppercase letter')
        if not re.search(r"[a-z]", v):
            raise ValueError('Password must contain at least one lowercase letter')
        if not re.search(r"\d", v):
            raise ValueError('Password must contain at least one digit')
        if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", v):
            raise ValueError('Password must contain at least one special character')
        return v
    
    @validator('username')
    def validate_username(cls, v):
        if v.lower() in ['admin', 'root', 'user', 'test']:
            raise ValueError('Username not allowed')
        return v
```

## Testing Patterns 🧪

### 13. Test Configuration
```python
# tests/conftest.py
import pytest
import asyncio
from typing import Generator, AsyncGenerator
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.pool import StaticPool

from app.main import app
from app.database import get_db, Base
from app.config import settings

# Test database URL
TEST_DATABASE_URL = "sqlite+aiosqlite:///./test.db"

engine = create_async_engine(
    TEST_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)

TestingSessionLocal = async_sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

@pytest.fixture(scope="session")
def event_loop():
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture(scope="function")
async def db_session() -> AsyncGenerator[AsyncSession, None]:
    async with engine.begin() as connection:
        await connection.run_sync(Base.metadata.create_all)
        
    async with TestingSessionLocal() as session:
        yield session
    
    async with engine.begin() as connection:
        await connection.run_sync(Base.metadata.drop_all)

@pytest.fixture(scope="function")
def client(db_session: AsyncSession) -> Generator[TestClient, None, None]:
    def get_test_db():
        yield db_session
    
    app.dependency_overrides[get_db] = get_test_db
    with TestClient(app) as test_client:
        yield test_client
    app.dependency_overrides.clear()
```

### 14. API Testing
```python
# tests/test_api.py
import pytest
from fastapi.testclient import TestClient
from sqlalchemy.ext.asyncio import AsyncSession

from app.schemas.user import UserCreate

class TestUserAPI:
    @pytest.mark.asyncio
    async def test_create_user(self, client: TestClient):
        user_data = {
            "email": "test@example.com",
            "username": "testuser",
            "password": "TestPassword123!"
        }
        response = client.post("/api/v1/users/", json=user_data)
        assert response.status_code == 201
        data = response.json()
        assert data["email"] == user_data["email"]
        assert data["username"] == user_data["username"]
        assert "password" not in data

    @pytest.mark.asyncio
    async def test_get_users(self, client: TestClient, db_session: AsyncSession):
        # Create test user first
        user_data = {
            "email": "test@example.com", 
            "username": "testuser",
            "password": "TestPassword123!"
        }
        client.post("/api/v1/users/", json=user_data)
        
        response = client.get("/api/v1/users/")
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)
        assert len(data) >= 1
```

## Security Best Practices 🔒

### 15. Authentication & Authorization
```python
# core/security.py
from datetime import datetime, timedelta
from typing import Optional
from jose import JWTError, jwt
from passlib.context import CryptContext
from app.config import settings

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
    return encoded_jwt

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)
```

### 16. Rate Limiting
```python
# core/rate_limiting.py
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from fastapi import Request

limiter = Limiter(key_func=get_remote_address)

# In main.py
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Usage in routes
@router.post("/login")
@limiter.limit("5/minute")
async def login(request: Request, user_credentials: UserLogin):
    # Login logic
    pass
```

## Performance Optimization ⚡

### 17. Database Optimization
```python
# Efficient queries with relationships
from sqlalchemy.orm import selectinload, joinedload

async def get_user_with_posts(user_id: int) -> Optional[User]:
    result = await db.execute(
        select(User)
        .options(selectinload(User.posts))
        .where(User.id == user_id)
    )
    return result.scalar_one_or_none()

# Bulk operations
async def create_multiple_users(users_data: List[UserCreate]) -> List[User]:
    users = [User(**user.dict()) for user in users_data]
    db.add_all(users)
    await db.commit()
    return users
```

### 18. Caching with Redis
```python
# core/cache.py
import json
from typing import Optional, Any
import redis.asyncio as redis
from app.config import settings

redis_client = redis.from_url(settings.REDIS_URL)

async def get_cache(key: str) -> Optional[Any]:
    value = await redis_client.get(key)
    if value:
        return json.loads(value)
    return None

async def set_cache(key: str, value: Any, expire: int = 3600):
    await redis_client.set(key, json.dumps(value), ex=expire)

async def delete_cache(key: str):
    await redis_client.delete(key)

# Cache decorator
from functools import wraps

def cache_result(expire: int = 3600):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            cache_key = f"{func.__name__}:{hash(str(args) + str(kwargs))}"
            cached = await get_cache(cache_key)
            if cached:
                return cached
            
            result = await func(*args, **kwargs)
            await set_cache(cache_key, result, expire)
            return result
        return wrapper
    return decorator
```

## Deployment Best Practices 🚀

### 19. Production Configuration
```python
# pyproject.toml
[tool.poetry]
name = "fastapi-app"
version = "1.0.0"
description = ""
authors = ["Your Name <email@example.com>"]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.34.0"}
sqlalchemy = "^2.0.0"
alembic = "^1.14.0"
pydantic = {extras = ["email"], version = "^2.10.0"}
pydantic-settings = "^2.7.0"
asyncpg = "^0.30.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.9"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.25.0"
httpx = "^0.28.0"
pytest-cov = "^6.0.0"
black = "^24.0.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
```

### 20. Health Checks & Monitoring
```python
# api/health.py
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_db
from app.core.cache import redis_client

router = APIRouter()

@router.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.utcnow()}

@router.get("/health/db")
async def health_check_db(db: AsyncSession = Depends(get_db)):
    try:
        await db.execute(text("SELECT 1"))
        return {"status": "healthy", "service": "database"}
    except Exception as e:
        raise HTTPException(status_code=503, detail="Database unhealthy")

@router.get("/health/redis")
async def health_check_redis():
    try:
        await redis_client.ping()
        return {"status": "healthy", "service": "redis"}
    except Exception as e:
        raise HTTPException(status_code=503, detail="Redis unhealthy")
```

## Development Checklist ✅

### Code Quality:
- [ ] Type hints используются везде
- [ ] Pydantic schemas для валидации
- [ ] Async/await для I/O операций
- [ ] Service layer для бизнес-логики
- [ ] Custom exceptions для ошибок
- [ ] Dependency injection

### Security:
- [ ] JWT authentication
- [ ] Password hashing (bcrypt)
- [ ] Input validation
- [ ] Rate limiting
- [ ] CORS настроен
- [ ] Secrets в environment variables

### Performance:
- [ ] Database connection pooling
- [ ] Query optimization
- [ ] Redis caching
- [ ] Async operations
- [ ] Proper indexing

### Testing:
- [ ] Unit tests для services
- [ ] API tests для endpoints
- [ ] Database tests
- [ ] Test coverage > 80%
- [ ] Fixtures для test data

### Production:
- [ ] Health checks
- [ ] Logging configuration
- [ ] Error monitoring
- [ ] Database migrations
- [ ] Environment configuration
