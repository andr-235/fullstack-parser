---
description: Docker и Docker Compose best practices
alwaysApply: false
---
# ==== Общие правила ====

- Используй Docker Compose v2.4+ и Docker Engine 20.10+.
- Всегда применяй multi-stage builds для минимизации образов.
- Всегда включай BuildKit.
- Один контейнер = одна служба (не смешивай).
- Никогда не запускай контейнеры от root.
- Используй только минимальные базовые образы (alpine, slim).
- Образы должны быть неизменяемыми после сборки.

# ==== Dockerfile ====

- Используй multi-stage build (deps → builder → runner).
- Пинни версии базовых образов через sha256.
- Всегда создавай непривилегированного пользователя.
- Всегда настраивай HEALTHCHECK.
- Добавляй LABEL (maintainer, version, description).
- Очищай кеши после установки зависимостей (npm, pip, apt).
- Используй ENTRYPOINT для инициализации, CMD для запуска.

# ==== Docker Compose ====

- Версия файла: "3.8".
- Всегда разделяй сервисы: app, db, redis, proxy.
- Обязательно:
  - restart: unless-stopped
  - healthcheck для каждого сервиса
  - ограничение ресурсов (cpus, memory)
  - restart_policy
  - именованные тома
  - изолированные сети
- Всегда используй secrets для паролей и API-ключей.
- Никогда не хардкодь креды в environment.

# ==== Переменные окружения ====

- Все секреты хранятся в Docker secrets.
- В .env допускаются только некритичные переменные (NODE_ENV, PORT, LOG_LEVEL).
- Никогда не клади пароли и ключи в образ или .env.

# ==== Сети и тома ====

- Используй отдельные сети для app, db, monitoring.
- Для db сети — internal: true.
- Всегда используй именованные тома с driver_opts.
- Для временных данных используй tmpfs.

# ==== Безопасность ====

- Никогда не используй privileged: true.
- security_opt:
  - no-new-privileges:true
- Всегда drop всех capabilities и добавляй только нужные (CHOWN, SETUID, SETGID).
- Устанавливай read_only: true, tmpfs для /tmp.
- Используй ulimits для защиты от resource exhaustion.

# ==== Логирование и мониторинг ====

- Логирование: json-file с max-size=10m, max-file=3.
- Для production подключай ELK или Loki + Grafana.
- Для метрик используй Prometheus + Grafana.

# ==== CI/CD ====

- В CI/CD всегда выполняй docker buildx build с cache и push.
- Пинни версии образов по sha256.
- Сканируй образы на уязвимости (docker scout cves).
- Не деплой без прохождения healthchecks.

# ==== Production ====

- Используй docker-compose.prod.yml с:
  - replicas: 3
  - update_config и rollback_config
  - restart_policy
  - healthcheck
- Для масштабирования: docker compose up --scale app=N
- Для бэкапов БД — отдельный контейнер с pg_dump.

# ==== DON'T ====

- Не используй :latest теги.
- Не запускай процессы от root.
- Не храни пароли в Dockerfile, compose или .env.
- Не используй анонимные тома.
- Не игнорируй healthchecks.
- Не оставляй открытый доступ в db-сеть.
