---
description: Backend Python/FastAPI best practices
alwaysApply: false
---

# ==== Общие принципы ====

- Используй FastAPI как основной web framework.
- Весь код должен быть асинхронным (async/await).
- Следуй принципам SOLID, DRY, KISS.
- Используй типизацию Python 3.11+.
- Всегда добавляй docstring к публичным функциям и классам.
- Не храни секреты и ключи в коде — только в .env или pydantic-settings.

# ==== Структура проекта ====

- Делай четкое разделение слоев:
  - `routers/` — обработчики запросов
  - `services/` — бизнес-логика
  - `repositories/` — доступ к БД
  - `models/` — Pydantic и SQLAlchemy модели
  - `core/` — конфиги, middleware, utils
- Не смешивай синхронный и асинхронный код.
- Все HTTP-запросы должны идти через httpx (async).

# ==== Зависимости ====

- Фиксируй версии production-зависимостей (fastapi, sqlalchemy, redis).
- Используй poetry для управления зависимостями.
- Для dev-зависимостей разрешено указывать диапазоны версий.
- Регулярно выполняй:
  - `poetry run pip-audit` (уязвимости)
  - `poetry update` (обновления)
  - `poetry run pytest` (совместимость)

# ==== База данных ====

- Используй SQLAlchemy 2.x + asyncpg.
- Для миграций — alembic.
- Все SQL-запросы асинхронные.
- Репозитории инкапсулируют работу с БД, не смешивай с бизнес-логикой.

# ==== Кеширование и задачи ====

- Для кеширования используй Redis.
- Для фоновых задач — arq.
- Все операции с Redis должны быть асинхронными.

# ==== Аутентификация и безопасность ====

- Для JWT используй python-jose.
- Для паролей — passlib (bcrypt).
- Все чувствительные данные хранить в .env (pydantic-settings).
- Валидация входных данных только через Pydantic.

# ==== Тестирование ====

- Unit-тесты обязательны для сервисов.
- Интеграционные тесты для API.
- Минимальное покрытие — 70%.
- Используй pytest + pytest-asyncio.
- Для моков — pytest-mock.

# ==== Стиль кода ====

- Форматирование: black (79 символов в строке).
- Импорты: isort (profile=black).
- Линтинг: ruff (правила E,W,F,I,C,B).
- Типизация: mypy (Python 3.11, ignore_missing_imports=true).
- Не используй `*` импорты.
- Не используй "magic numbers", выноси в константы.

# ==== Безопасность ====

- Перед коммитами проверяй:
  - `poetry run pip-audit`
  - `poetry run bandit -r app/`
  - `poetry run mypy app/`
- Не оставляй закомментированный код.
- Не отключай линтеры без причины.

# ==== Оптимизация ====

- Все сетевые запросы делать через httpx.AsyncClient.
- Для тяжёлых операций — кеширование в Redis.
- Не выполняй блокирующие операции в event loop.

# ==== Документация ====

- Всегда добавляй README с инструкцией запуска.
- Автогенерация OpenAPI через FastAPI должна быть доступна.
- Для новых модулей указывай usage-примеры.
