---
description: Comprehensive git workflow and automation rules for daily development
globs: .git/**, .gitignore, .gitattributes, *.md
alwaysApply: false
---

# Git Workflow & Automation

Этот файл автоматически применяется при работе с git-связанными файлами.

## Quick Commands Reference

### Ежедневные команды:
```bash
# Проверить статус
git status -s

# Посмотреть изменения
git diff
git diff --staged

# Добавить файлы
git add .
git add -p  # интерактивно

# Коммит
git commit -m "type(scope): описание"
git commit --amend  # изменить последний

# Синхронизация
git fetch origin
git pull origin main
git push origin feature-branch
```

### Работа с ветками:
```bash
# Список веток
git branch -a
git branch -vv  # с upstream info

# Переключение
git checkout main
git checkout -b feature/new-feature

# Удаление
git branch -d old-feature
git push origin --delete old-feature
```

## Pre-commit Automation

Всегда выполняйте перед коммитом:

### Автоматические проверки:
- [ ] `git status` - проверить что включено в коммит
- [ ] Запустить линтер/форматтер
- [ ] Запустить тесты
- [ ] Проверить commit message format
- [ ] Убедиться что нет TODO/FIXME без issue

### Git Hooks (рекомендуется настроить):

**pre-commit hook**:
```bash
#!/bin/sh
# Запустить линтер
npm run lint
# Запустить тесты
npm test
# Проверить commit message
npm run commitlint
```

**commit-msg hook**:
```bash
#!/bin/sh
# Проверить формат commit message
commitlint --edit $1
```

## Release Workflow

### Подготовка к релизу:
1. Создать release ветку: `git checkout -b release/v1.2.0`
2. Обновить версию в package.json/версионных файлах
3. Обновить CHANGELOG.md
4. Создать PR в main
5. После merge создать tag: `git tag -a v1.2.0 -m "Release v1.2.0"`
6. Push tag: `git push origin v1.2.0`

### Hotfix workflow:
1. Создать от main: `git checkout -b hotfix/critical-fix`
2. Исправить проблему
3. Коммит: `git commit -m "hotfix: исправить критическую ошибку"`
4. Merge в main и develop
5. Создать tag патч-версии

## Git Configuration

### Рекомендуемые настройки:
```bash
# Базовая конфигурация
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Улучшения UX
git config --global init.defaultBranch main
git config --global pull.rebase true
git config --global rebase.autoStash true
git config --global fetch.prune true

# Алиасы
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'
git config --global alias.visual '!gitk'
```

## Troubleshooting Checklist

### Если что-то пошло не так:

1. **Остановиться и подумать** - не паниковать
2. **Проверить статус**: `git status`
3. **Посмотреть историю**: `git log --oneline -10`
4. **Проверить reflog**: `git reflog` (если потеряли коммиты)
5. **Сделать backup**: `git stash` или создать ветку

### Частые проблемы:
- **Случайный commit в main**: использовать `git reset --soft HEAD~1`
- **Потерян коммит**: найти в `git reflog`
- **Неправильный merge**: `git reset --hard HEAD~1` (если локально)
- **Конфликты**: разрешить вручную, потом `git add` и continue

## Integration с Cursor

### При работе в Cursor:
- Используйте встроенный git интерфейс для visual diff
- Применяйте эти правила через команду `@git-commit-standards` 
- Используйте `@git-branching-strategy` для guidance по веткам
- Обращайтесь к `@git-conflict-resolution` при конфликтах

### Полезные команды в context:
- `git log --oneline --graph` - визуальная история
- `git diff HEAD~1` - сравнить с предыдущим коммитом  
- `git show commit-hash` - детали конкретного коммита
