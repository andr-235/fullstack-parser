---
description: Daily Docker commands and workflow automation
globs: **/Dockerfile*, docker-compose*.yml, docker-compose*.yaml, .dockerignore
alwaysApply: false
---

---
description: "Docker workflow automation and daily commands"
globs: ["Dockerfile*", "docker-compose*.yml", "docker-compose*.yaml", ".dockerignore"]
alwaysApply: false
---

# Docker Workflow & Automation

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Docker workflow –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

## Quick Commands Reference üöÄ

### Daily Docker Commands
```bash
# Build & Run
docker build -t myapp:latest .
docker run -d --name myapp -p 8080:80 myapp:latest

# Inspect & Debug
docker ps -a
docker logs -f myapp
docker exec -it myapp /bin/sh

# Cleanup
docker system prune -af
docker volume prune -f
docker image prune -af
```

### Compose Workflow
```bash
# Development
docker-compose up --build
docker-compose logs -f service-name
docker-compose exec service-name sh

# Production
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
docker-compose down --volumes
```

## Development Best Practices üíª

### 1. Hot Reload Setup
```yaml
# docker-compose.dev.yml
services:
  web:
    build:
      context: .
      target: development
    volumes:
      - ./src:/app/src:ro
      - /app/node_modules
    environment:
      - NODE_ENV=development
```

### 2. Multi-target Dockerfile
```dockerfile
# Development stage
FROM node:18-alpine AS development
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "run", "dev"]

# Production stage
FROM node:18-alpine AS production
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

## Build Optimization üì¶

### 3. BuildKit Features
```dockerfile
# syntax=docker/dockerfile:1.6

# Cache mounts
RUN --mount=type=cache,target=/root/.npm \
    npm install

# Bind mounts
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    npm ci --omit=dev

# Secrets
RUN --mount=type=secret,id=mypassword \
    cat /run/secrets/mypassword
```

### 4. Layer Caching Strategy
```dockerfile
# Copy dependency files first (less likely to change)
COPY package*.json ./
RUN npm ci

# Copy source code last (more likely to change)
COPY src/ ./src/
COPY public/ ./public/
```

## Testing & Quality Assurance üß™

### 5. Test Configuration
```yaml
# docker-compose.test.yml
version: "3.9"
services:
  test:
    build:
      context: .
      target: test
    environment:
      - NODE_ENV=test
    command: npm test
    
  test-integration:
    build: .
    depends_on:
      - db-test
    environment:
      - DATABASE_URL=postgresql://test:test@db-test:5432/test
    command: npm run test:integration

  db-test:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    tmpfs:
      - /var/lib/postgresql/data
```

### 6. Linting & Security
```bash
# Dockerfile linting
hadolint Dockerfile

# Security scanning
trivy image myapp:latest
docker scout quickview myapp:latest

# Best practices check
docker run --rm -it -v $(pwd):/project docker/dockerfile-linter
```

## Image Registry & Distribution üì°

### 7. Image Tagging Strategy
```bash
# Semantic versioning
docker tag myapp:latest myapp:1.2.3
docker tag myapp:latest myapp:1.2
docker tag myapp:latest myapp:1

# Environment tagging
docker tag myapp:latest myapp:dev
docker tag myapp:latest myapp:staging
docker tag myapp:latest myapp:prod

# Git-based tagging
docker tag myapp:latest myapp:$(git rev-parse --short HEAD)
docker tag myapp:latest myapp:$(git describe --tags)
```

### 8. Registry Operations
```bash
# Login to registries
docker login
docker login ghcr.io
docker login registry.gitlab.com

# Push/Pull strategies
docker push myapp:latest
docker pull myapp:1.2.3

# Multi-arch builds
docker buildx create --use
docker buildx build --platform linux/amd64,linux/arm64 -t myapp:latest --push .
```

## Environment Management üåç

### 9. Configuration Management
```bash
# .env file structure
NODE_ENV=production
PORT=3000
DATABASE_URL=postgresql://user:pass@db:5432/app
REDIS_URL=redis://redis:6379
LOG_LEVEL=info

# Environment validation
docker-compose config
docker-compose config --services
```

### 10. Secrets Handling
```yaml
# Development secrets
version: "3.9"
services:
  app:
    environment:
      - DB_PASSWORD=${DB_PASSWORD:-defaultpass}
    env_file:
      - .env.local
      - .env

# Production secrets (Swarm)
services:
  app:
    secrets:
      - db_password
    environment:
      - DB_PASSWORD_FILE=/run/secrets/db_password

secrets:
  db_password:
    external: true
```

## Performance Monitoring üìä

### 11. Resource Monitoring
```bash
# Container stats
docker stats
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"

# System information
docker system df
docker system info

# Event monitoring
docker events --filter container=myapp
```

### 12. Performance Metrics
```yaml
services:
  app:
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
```

## Debugging & Troubleshooting üîç

### 13. Debug Tools
```bash
# Container inspection
docker inspect myapp
docker exec -it myapp ps aux
docker exec -it myapp netstat -tulpn

# Network debugging
docker network ls
docker network inspect bridge
docker run --rm -it --network container:myapp nicolaka/netshoot

# Volume inspection
docker volume ls
docker volume inspect myapp_data
```

### 14. Log Management
```yaml
services:
  app:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=app,environment=prod"

  # Centralized logging
  fluentd:
    image: fluent/fluentd:v1.16
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf
    ports:
      - "24224:24224"
```

## Backup & Maintenance üíæ

### 15. Backup Strategies
```bash
# Volume backup
docker run --rm -v myapp_data:/data -v $(pwd):/backup alpine \
  tar czf /backup/backup.tar.gz -C /data .

# Database backup
docker-compose exec postgres pg_dump -U postgres myapp > backup.sql

# Automated backup
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
docker-compose exec -T postgres pg_dump -U postgres myapp | gzip > backup_${DATE}.sql.gz
```

### 16. Maintenance Tasks
```bash
# Cleanup old images
docker image prune -af --filter "until=24h"

# Remove unused networks
docker network prune -f

# Health check scripts
#!/bin/bash
if ! docker exec myapp curl -f http://localhost:8080/health; then
  echo "Health check failed, restarting container..."
  docker-compose restart myapp
fi
```

## Automation Scripts ü§ñ

### 17. Common Automation
```bash
#!/bin/bash
# deploy.sh
set -e

echo "Building application..."
docker-compose build

echo "Running tests..."
docker-compose -f docker-compose.test.yml up --abort-on-container-exit

echo "Deploying to production..."
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

echo "Checking health..."
sleep 30
curl -f http://localhost/health || exit 1

echo "Deployment successful!"
```

### 18. Development Scripts
```bash
#!/bin/bash
# dev-setup.sh

# Create .env from template
if [ ! -f .env ]; then
  cp .env.example .env
  echo "Created .env file from template"
fi

# Start development environment
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build

# cleanup.sh
docker-compose down --volumes
docker system prune -af
```

## CI/CD Integration üîÑ

### 19. Pipeline Templates
```yaml
# .github/workflows/docker.yml
name: Docker Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Build test image
        run: docker-compose -f docker-compose.test.yml build
      
      - name: Run tests
        run: docker-compose -f docker-compose.test.yml up --abort-on-container-exit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

### 20. Quality Gates
```bash
# quality-check.sh
#!/bin/bash

echo "Running security scan..."
trivy image myapp:latest --exit-code 1

echo "Checking Dockerfile best practices..."
hadolint Dockerfile

echo "Running integration tests..."
docker-compose -f docker-compose.test.yml up --abort-on-container-exit

echo "All quality checks passed!"
```

## Useful Aliases & Functions üõ†Ô∏è

### 21. Shell Aliases
```bash
# ~/.bashrc or ~/.zshrc
alias dc='docker-compose'
alias dcu='docker-compose up'
alias dcd='docker-compose down'
alias dcb='docker-compose build'
alias dcl='docker-compose logs -f'

# Docker aliases
alias di='docker images'
alias dps='docker ps'
alias dpsa='docker ps -a'
alias drm='docker rm'
alias drmi='docker rmi'
```

### 22. Helper Functions
```bash
# Docker helper functions
dexec() {
  docker exec -it $1 /bin/sh
}

dlogs() {
  docker logs -f $1
}

dcleanup() {
  docker system prune -af
  docker volume prune -f
}

# Compose helpers
dcexec() {
  docker-compose exec $1 sh
}

dcrestart() {
  docker-compose restart $1
}
```

## Troubleshooting Guide üö®

### Common Issues & Solutions
```bash
# Port already in use
docker ps -a | grep :8080
lsof -ti:8080 | xargs kill -9

# Permission denied
sudo chown -R $USER:$USER .

# Out of disk space
docker system prune -af --volumes
docker builder prune -af

# Network issues
docker network prune
docker-compose down && docker-compose up

# Build cache issues
docker builder prune -af
docker-compose build --no-cache
```

## Best Practices Checklist ‚úÖ

### Development:
- [ ] Use .dockerignore file
- [ ] Implement hot reload for development
- [ ] Separate dev/prod configurations
- [ ] Include health checks
- [ ] Use multi-stage builds

### Security:
- [ ] Run containers as non-root
- [ ] Scan images for vulnerabilities
- [ ] Use secrets management
- [ ] Pin dependency versions
- [ ] Apply security contexts

### Performance:
- [ ] Optimize layer caching
- [ ] Use appropriate base images
- [ ] Set resource limits
- [ ] Implement monitoring
- [ ] Regular cleanup procedures

### Production:
- [ ] Environment-specific configurations
- [ ] Backup strategies in place
- [ ] Health checks configured
- [ ] Logging centralized
- [ ] Rollback procedures defined
