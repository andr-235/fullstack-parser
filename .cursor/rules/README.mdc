---
description:
globs:
alwaysApply: false
---
---
description: "Overview of all available Cursor rules for the project"
alwaysApply: true
---

# üìö Cursor Rules Overview

## üéØ –û–±–∑–æ—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª

–≠—Ç–æ—Ç –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Python/FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–¥–∞.

### üîß Git & Version Control (6 –ø—Ä–∞–≤–∏–ª)
- **git-commit-standards** - –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤ (Conventional Commits)
- **git-branching-strategy** - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ç–≤–ª–µ–Ω–∏—è (Git Flow)
- **git-conflict-resolution** - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π
- **git-workflow** - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π Git workflow –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
- **github-workflow** - GitHub workflow –∏ pull requests
- **github-actions-security** - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å GitHub Actions

### üêç Python Development (4 –ø—Ä–∞–≤–∏–ª–∞)
- **python-code-style** - –°—Ç–∏–ª—å –∫–æ–¥–∞ (Black, isort, flake8, mypy)
- **python-fastapi-best-practices** - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ FastAPI –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- **api-design-guidelines** - –î–∏–∑–∞–π–Ω REST API
- **testing-pytest-best-practices** - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å pytest

### üê≥ Docker & Infrastructure (4 –ø—Ä–∞–≤–∏–ª–∞)
- **dockerfile-best-practices** - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ Dockerfile
- **docker-compose-best-practices** - Multi-environment deployments
- **docker-production-deployment** - Production deployment —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- **docker-workflow** - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π Docker workflow

### üóÑÔ∏è Database & Background Tasks (2 –ø—Ä–∞–≤–∏–ª–∞)
- **database-postgresql-best-practices** - PostgreSQL –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- **celery-redis-background-tasks** - Celery + Redis –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á

### üîí Security & Configuration (2 –ø—Ä–∞–≤–∏–ª–∞)
- **github-security-best-practices** - GitHub security hardening
- **environment-configuration** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏

### üìä Monitoring & Operations (2 –ø—Ä–∞–≤–∏–ª–∞)
- **logging-monitoring** - Loguru –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- **github-organization-management** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GitHub –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π

## üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞

### –í Cursor Editor

#### 1. –í—ã–∑–æ–≤ –ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ @
```
@api-design-guidelines —Å–æ–∑–¥–∞–π FastAPI endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
@python-code-style –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
@docker-compose-best-practices —Å–æ–∑–¥–∞–π docker-compose –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```

#### 2. Auto-attached –ø—Ä–∞–≤–∏–ª–∞
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏:
- `git-workflow` - –¥–ª—è .git, *.md —Ñ–∞–π–ª–æ–≤
- `docker-production-deployment` - –¥–ª—è Dockerfile, docker-compose.yml
- `python-code-style` - –¥–ª—è *.py —Ñ–∞–π–ª–æ–≤
- `logging-monitoring` - –¥–ª—è logging.py, logs/**
- `environment-configuration` - –¥–ª—è .env*, config.py

#### 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
```
@python-fastapi-best-practices @api-design-guidelines —Å–æ–∑–¥–∞–π CRUD endpoints –¥–ª—è –º–æ–¥–µ–ª–∏ User
@docker-compose-best-practices @environment-configuration –Ω–∞—Å—Ç—Ä–æ–π multi-stage development environment
```

### –í –∫–æ–º–∞–Ω–¥-–ª–∞–π–Ω workflow

#### Git Workflow
```bash
# –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª–∞ git-commit-standards
git commit -m "feat: –¥–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"

# –°–ª–µ–¥—É–π git-branching-strategy
git checkout -b feature/comments-api
git checkout -b hotfix/security-fix
```

#### Docker Workflow
```bash
# –°–ª–µ–¥—É–π dockerfile-best-practices
docker build --target production -t app:latest .

# –ò—Å–ø–æ–ª—å–∑—É–π docker-compose-best-practices
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
```

#### Code Quality
```bash
# –°–ª–µ–¥—É–π python-code-style
black .
isort .
flake8 .
mypy .
```

## üìã Checklists –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á

### üÜï –ù–æ–≤—ã–π feature
1. **–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏** (@git-branching-strategy)
   ```bash
   git checkout -b feature/new-feature
   ```

2. **–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞** (@python-fastapi-best-practices, @api-design-guidelines)
   - –°–æ–∑–¥–∞—Ç—å Pydantic —Å—Ö–µ–º—ã
   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
   - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å error handling

3. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** (@testing-pytest-best-practices)
   ```bash
   pytest tests/ -v --cov=app
   ```

4. **Code Quality** (@python-code-style)
   ```bash
   black .
   isort .
   flake8 .
   mypy .
   ```

5. **–ö–æ–º–º–∏—Ç** (@git-commit-standards)
   ```bash
   git add .
   git commit -m "feat: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
   ```

6. **Pull Request** (@github-workflow)
   - –°–æ–∑–¥–∞—Ç—å PR —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ CI/CD –ø—Ä–æ—Ö–æ–¥–∏—Ç
   - –ó–∞–ø—Ä–æ—Å–∏—Ç—å code review

### üöÄ Production Deployment
1. **Environment Configuration** (@environment-configuration)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env.production
   - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å database URLs

2. **Docker Build** (@dockerfile-best-practices)
   ```bash
   docker build --target production -t app:latest .
   ```

3. **Security Check** (@github-security-best-practices)
   - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Dockerfile security
   - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å GitHub Actions

4. **Monitoring Setup** (@logging-monitoring)
   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å structured logging
   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å health checks
   - –í–∫–ª—é—á–∏—Ç—å metrics collection

5. **Database Migration** (@database-postgresql-best-practices)
   ```bash
   alembic upgrade head
   ```

### üêõ Bug Fix
1. **Hotfix Branch** (@git-branching-strategy)
   ```bash
   git checkout -b hotfix/critical-bug-fix
   ```

2. **Investigation** (@logging-monitoring)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤ structured —Ñ–æ—Ä–º–∞—Ç–µ
   - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å metrics
   - –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É

3. **Fix & Test** (@testing-pytest-best-practices)
   - –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è bug
   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç

4. **Fast Deploy** (@docker-production-deployment)
   - Hot-fix deployment –±–µ–∑ –¥–∞—É–Ω—Ç–∞–π–º–∞
   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è

## üîÑ Automation Integration

### GitHub Actions Workflow
```yaml
# .github/workflows/ci.yml
name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # –ò—Å–ø–æ–ª—å–∑—É–π github-actions-security –ø—Ä–∞–≤–∏–ª–∞
      - uses: actions/checkout@v4
      
      # –°–ª–µ–¥—É–π python-code-style
      - name: Code Quality
        run: |
          black --check .
          isort --check .
          flake8 .
          mypy .
      
      # –ò—Å–ø–æ–ª—å–∑—É–π testing-pytest-best-practices  
      - name: Run Tests
        run: pytest --cov=app --cov-report=xml
      
      # –°–ª–µ–¥—É–π dockerfile-best-practices
      - name: Build Docker Image
        run: docker build --target production .
```

### Pre-commit Hooks
```yaml
# .pre-commit-config.yaml - –∏—Å–ø–æ–ª—å–∑—É–π python-code-style
repos:
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black

  - repo: https://github.com/pycqa/isort  
    rev: 5.13.2
    hooks:
      - id: isort
```

## üí° Best Practices Summary

### üéØ Development
- –ò—Å–ø–æ–ª—å–∑—É–π **Type Annotations** –≤–µ–∑–¥–µ (@python-code-style)
- –°–ª–µ–¥—É–π **Conventional Commits** (@git-commit-standards)
- –ü–∏—à–∏ **Comprehensive Tests** (@testing-pytest-best-practices)
- –í–∞–ª–∏–¥–∏—Ä—É–π **API Contracts** (@api-design-guidelines)

### üîí Security
- **Never commit secrets** (@environment-configuration)
- **Security-first Dockerfiles** (@dockerfile-best-practices)
- **GitHub security hardening** (@github-security-best-practices)
- **Dependency scanning** (@github-actions-security)

### üöÄ Operations
- **Structured Logging** –≤–µ–∑–¥–µ (@logging-monitoring)
- **Health Checks** –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (@docker-production-deployment)
- **Database Optimization** (@database-postgresql-best-practices)
- **Graceful Deployments** (@docker-compose-best-practices)

### üìä Monitoring
- **Metrics Collection** (@logging-monitoring)
- **Error Tracking** —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
- **Performance Monitoring** –¥–ª—è –ë–î –∏ API
- **Alerting** –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–±–æ–µ–≤

## üÜò Troubleshooting

### –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∞–≤–∏–ª
–ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
1. **Security** - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
2. **Production Stability** - –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç  
3. **Development Speed** - —Ç—Ä–µ—Ç–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

### –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è. –ß—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ best practices:
1. –û–±–Ω–æ–≤–∏—Ç—å .cursor/rules/ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
2. –ü—Ä–æ–π—Ç–∏ security checklist –∑–∞–Ω–æ–≤–æ
3. –û–±–Ω–æ–≤–∏—Ç—å CI/CD pipeline –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

### –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è
–î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞:
1. –°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤ .cursor/rules/custom/
2. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
3. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ README –ø—Ä–æ–µ–∫—Ç–∞

---

üéâ **–ì–æ—Ç–æ–≤–æ!** –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `@rule-name` –≤ Cursor –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏ —Å–ª–µ–¥—É–π—Ç–µ checklists –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!

