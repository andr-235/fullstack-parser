---
description: Интеграция Feature-Sliced Design с Next.js App Router
alwaysApply: false
---
# FSD + Next.js App Router

## **Структура проекта**

### **Рекомендуемая структура**

```bash
├── app/                    # Next.js App Router
│   ├── layout.tsx
│   ├── page.tsx
│   ├── globals.css
│   └── (routes)/
│       ├── dashboard/
│       │   └── page.tsx
│       └── settings/
│           └── page.tsx
├── src/
│   ├── app/               # FSD app layer
│   │   ├── providers/
│   │   ├── styles/
│   │   └── index.ts
│   ├── pages/             # FSD pages layer
│   ├── widgets/
│   ├── features/
│   ├── entities/
│   └── shared/
└── pages/                 # Stub для Next.js
    └── README.md
```

## **Интеграция слоев**

### **Next.js App Router + FSD Pages**

```typescript
// app/page.tsx (Next.js)
import { HomePage } from "@/pages/home";

export default function Page() {
  return <HomePage />;
}

// app/dashboard/page.tsx (Next.js)
import { DashboardPage } from "@/pages/dashboard";

export default function Page() {
  return <DashboardPage />;
}

// src/pages/home/ui/HomePage.tsx (FSD)
import { HomeWidget } from "@/widgets/home";
import { UserGreeting } from "@/entities/user";

export const HomePage = () => (
  <div>
    <UserGreeting />
    <HomeWidget />
  </div>
);
```

### **Провайдеры и контекст**

```typescript
// src/app/providers/index.tsx
"use client";

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "@/shared/ui/theme";

const queryClient = new QueryClient();

export const AppProvider = ({ children }: { children: React.ReactNode }) => (
  <QueryClientProvider client={queryClient}>
    <ThemeProvider>{children}</ThemeProvider>
  </QueryClientProvider>
);

// app/layout.tsx (Next.js)
import { AppProvider } from "@/app/providers";
import "@/app/styles/globals.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="ru">
      <body>
        <AppProvider>{children}</AppProvider>
      </body>
    </html>
  );
}
```

## **API роуты**

### **Next.js API + FSD API**

```typescript
// app/api/users/route.ts (Next.js)
import { NextRequest, NextResponse } from "next/server";
import { getUserList, createUser } from "@/entities/user/api";

export async function GET() {
  try {
    const users = await getUserList();
    return NextResponse.json(users);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch users" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    const user = await createUser(data);
    return NextResponse.json(user, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to create user" },
      { status: 500 }
    );
  }
}

// src/entities/user/api/user-api.ts (FSD)
import { apiClient } from "@/shared/lib/api";

export const getUserList = async (): Promise<User[]> => {
  const response = await apiClient.get("/users");
  return response.data;
};

export const createUser = async (data: CreateUserData): Promise<User> => {
  const response = await apiClient.post("/users", data);
  return response.data;
};
```

## **Серверные компоненты**

### **Серверные и клиентские компоненты**

```typescript
// src/pages/dashboard/ui/DashboardPage.tsx (Server Component)
import { DashboardWidget } from "@/widgets/dashboard";
import { UserProfile } from "@/entities/user";

// Серверный компонент по умолчанию
export const DashboardPage = async () => {
  // Серверная логика
  const user = await getUserFromServer();

  return (
    <div>
      <UserProfile user={user} />
      <DashboardWidget />
    </div>
  );
};

// src/widgets/dashboard/ui/DashboardWidget.tsx (Client Component)
("use client");

import { useState } from "react";
import { useDashboardStore } from "../model/store";

export const DashboardWidget = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { data, fetchData } = useDashboardStore();

  // Клиентская логика
  return <div>{/* UI компонент */}</div>;
};
```

## **Метаданные и SEO**

### **Динамические метаданные**

```typescript
// app/dashboard/page.tsx
import { DashboardPage } from "@/pages/dashboard";
import { getDashboardMetadata } from "@/pages/dashboard/api";

export async function generateMetadata() {
  return getDashboardMetadata();
}

export default function Page() {
  return <DashboardPage />;
}

// src/pages/dashboard/api/metadata.ts
export const getDashboardMetadata = async () => {
  const user = await getUserFromServer();

  return {
    title: `Дашборд - ${user.name}`,
    description: "Персональный дашборд пользователя",
    openGraph: {
      title: `Дашборд - ${user.name}`,
      description: "Персональный дашборд пользователя",
    },
  };
};
```

## **Маршрутизация**

### **Динамические роуты**

```typescript
// app/users/[id]/page.tsx
import { UserPage } from "@/pages/user";
import { getUser } from "@/entities/user/api";

interface Props {
  params: { id: string };
}

export default async function Page({ params }: Props) {
  const user = await getUser(params.id);
  return <UserPage user={user} />;
}

// src/pages/user/ui/UserPage.tsx
import { UserCard } from "@/entities/user";
import { UserPosts } from "@/widgets/user-posts";

interface UserPageProps {
  user: User;
}

export const UserPage = ({ user }: UserPageProps) => (
  <div>
    <UserCard user={user} />
    <UserPosts userId={user.id} />
  </div>
);
```

## **Загрузка данных**

### **Server Components + FSD API**

```typescript
// app/posts/page.tsx
import { PostsPage } from "@/pages/posts";
import { getPosts } from "@/entities/post/api";

export default async function Page() {
  const posts = await getPosts();
  return <PostsPage initialPosts={posts} />;
}

// src/pages/posts/ui/PostsPage.tsx
import { PostList } from "@/widgets/post-list";
import { PostFilters } from "@/features/post-filters";

interface PostsPageProps {
  initialPosts: Post[];
}

export const PostsPage = ({ initialPosts }: PostsPageProps) => (
  <div>
    <PostFilters />
    <PostList initialPosts={initialPosts} />
  </div>
);
```

## **Кеширование**

### **Next.js Cache + FSD**

```typescript
// src/entities/post/api/post-api.ts
import { unstable_cache } from "next/cache";
import { apiClient } from "@/shared/lib/api";

export const getPosts = unstable_cache(
  async (): Promise<Post[]> => {
    const response = await apiClient.get("/posts");
    return response.data;
  },
  ["posts"],
  {
    revalidate: 3600, // 1 час
    tags: ["posts"],
  }
);

export const getPost = unstable_cache(
  async (id: string): Promise<Post> => {
    const response = await apiClient.get(`/posts/${id}`);
    return response.data;
  },
  ["post"],
  {
    revalidate: 1800, // 30 минут
    tags: ["post"],
  }
);
```

## **Обработка ошибок**

### **Error Boundaries + FSD**

```typescript
// app/error.tsx (Next.js)
"use client";

import { ErrorBoundary } from "@/shared/lib/error-boundary";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <ErrorBoundary>
      <div>
        <h2>Что-то пошло не так!</h2>
        <button onClick={reset}>Попробовать снова</button>
      </div>
    </ErrorBoundary>
  );
}

// src/shared/lib/error-boundary.tsx
("use client");

import { Component, ReactNode } from "react";
import { logger } from "./logger";

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    logger.error("Ошибка в компоненте", { error, errorInfo });
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="error-boundary">
          <h2>Произошла ошибка</h2>
          <button onClick={() => this.setState({ hasError: false })}>
            Попробовать снова
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

## **Оптимизация**

### **Ленивая загрузка компонентов**

```typescript
// src/pages/dashboard/ui/DashboardPage.tsx
import { lazy, Suspense } from "react";
import { DashboardSkeleton } from "@/shared/ui/skeleton";

const DashboardWidget = lazy(() => import("@/widgets/dashboard"));
const AnalyticsWidget = lazy(() => import("@/widgets/analytics"));

export const DashboardPage = () => (
  <div>
    <Suspense fallback={<DashboardSkeleton />}>
      <DashboardWidget />
    </Suspense>
    <Suspense fallback={<DashboardSkeleton />}>
      <AnalyticsWidget />
    </Suspense>
  </div>
);
```

### **Предзагрузка данных**

```typescript
// app/dashboard/page.tsx
import { DashboardPage } from "@/pages/dashboard";
import { getDashboardData } from "@/pages/dashboard/api";

export default async function Page() {
  // Предзагрузка данных на сервере
  const data = await getDashboardData();

  return <DashboardPage initialData={data} />;
}

// src/pages/dashboard/api/loader.ts
import { getPosts } from "@/entities/post/api";
import { getUserStats } from "@/entities/user/api";

export const getDashboardData = async () => {
  const [posts, stats] = await Promise.all([getPosts(), getUserStats()]);

  return { posts, stats };
};
```

## **Конфигурация**

### **Next.js Config**

```typescript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  webpack: (config) => {
    config.resolve.alias = {
      ...config.resolve.alias,
      "@": path.resolve(__dirname, "src"),
    };
    return config;
  },
};

module.exports = nextConfig;
```

### **TypeScript Config**

```json
// tsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/app/*": ["./src/app/*"],
      "@/pages/*": ["./src/pages/*"],
      "@/widgets/*": ["./src/widgets/*"],
      "@/features/*": ["./src/features/*"],
      "@/entities/*": ["./src/entities/*"],
      "@/shared/*": ["./src/shared/*"]
    }
  }
}
```

## **Лучшие практики**

### **✅ DO:**

- **Разделяйте серверные и клиентские компоненты**: используйте 'use client' только когда необходимо
- **Используйте Server Components по умолчанию**: для лучшей производительности
- **Кешируйте данные на сервере**: используйте Next.js cache механизмы
- **Предзагружайте данные**: в Server Components для лучшего UX
- **Обрабатывайте ошибки**: используйте error.tsx и Error Boundaries

### **❌ DON'T:**

- **Не смешивайте серверную и клиентскую логику**: в одном компоненте
- **Не используйте клиентские хуки**: в Server Components
- **Не забывайте про SEO**: всегда добавляйте метаданные
- **Не игнорируйте кеширование**: используйте доступные механизмы
- **Не создавайте циклические зависимости**: между FSD слоями

## **Ссылки**

- [Next.js App Router](https://nextjs.org/docs/app)
- [Server Components](https://nextjs.org/docs/getting-started/react-essentials#server-components)
- [FSD + Next.js Guide](https://feature-sliced.design/docs/guides/tech/with-nextjs)
