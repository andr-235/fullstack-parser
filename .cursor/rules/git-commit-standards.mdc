---
description: "Git commit message standards and best practices with Russian support"
globs: [".git/**/*", "**/COMMIT_EDITMSG", ".gitmessage"]
alwaysApply: false
---

# Git Commit Message Standards

When helping with git commits, follow these standards:

## Commit Message Format

Use the Conventional Commits specification:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types:
- `feat`: новая функциональность
- `fix`: исправление ошибки
- `docs`: изменения в документации
- `style`: изменения форматирования (не влияющие на логику)
- `refactor`: рефакторинг кода
- `perf`: улучшение производительности
- `test`: добавление или изменение тестов
- `chore`: изменения в сборке или вспомогательных инструментах
- `ci`: изменения в CI/CD
- `build`: изменения в системе сборки

### Examples:
- `feat(auth): добавить аутентификацию через OAuth`
- `fix(parser): исправить ошибку парсинга JSON`
- `docs: обновить README с примерами использования`
- `refactor(api): упростить обработку ошибок`

## Commit Message Guidelines:

1. **Заголовок** (первая строка):
   - Максимум 50 символов
   - Используйте повелительное наклонение ("добавить", а не "добавлен")
   - Не ставьте точку в конце
   - Начинайте с маленькой буквы после двоеточия

2. **Тело сообщения**:
   - Отделяйте пустой строкой от заголовка
   - Максимум 72 символа в строке
   - Объясните "что" и "почему", а не "как"

3. **Подвал**:
   - Используйте для breaking changes, ссылок на issues
   - Формат: `BREAKING CHANGE: описание`
   - Или: `Closes #123`

## Pre-commit Checklist:

Перед коммитом всегда проверяйте:
- [ ] Код прошел линтинг
- [ ] Тесты проходят
- [ ] Нет debug statements
- [ ] Файлы добавлены в git add
- [ ] Commit message соответствует стандартам
- [ ] Изменения логически связаны
