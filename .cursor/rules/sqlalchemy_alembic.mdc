---
description: SQLAlchemy и Alembic best practices для профессиональных проектов
globs: **/*.py, **/alembic.ini, **/env.py, **/migrations/**/*.py
alwaysApply: true
---

# SQLAlchemy и Alembic Best Practices

## **Основные принципы**

### **Версии и совместимость**

- **SQLAlchemy 2.0+**: Используйте современный декларативный стиль
- **Alembic**: Обязательно для управления миграциями
- **Python 3.8+**: Для поддержки typing и современных возможностей

### **Архитектурные принципы**

- **Разделение ответственности**: Модели только для структуры данных
- **Типизация**: Обязательное использование type hints
- **Документация**: Docstrings для всех публичных методов
- **Безопасность**: Валидация входных данных и обработка ошибок

---

## **Архитектура моделей**

### **✅ DO: Современный декларативный стиль (SQLAlchemy 2.0+)**

```python
from __future__ import annotations
from typing import List, Optional
from datetime import datetime
from sqlalchemy import ForeignKey, String, Text, func
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship

class Base(DeclarativeBase):
    """Базовый класс для всех моделей."""
    pass

class User(Base):
    __tablename__ = "user_account"

    # Первичный ключ
    id: Mapped[int] = mapped_column(primary_key=True)

    # Обязательные поля
    name: Mapped[str] = mapped_column(String(30), nullable=False)
    email: Mapped[str] = mapped_column(String(100), unique=True, nullable=False)

    # Опциональные поля
    fullname: Mapped[Optional[str]] = mapped_column(String(100))

    # Поля с значениями по умолчанию
    created_at: Mapped[datetime] = mapped_column(
        default=func.now(),
        server_default=func.now()
    )
    is_active: Mapped[bool] = mapped_column(default=True)

    # Связи
    addresses: Mapped[List["Address"]] = relationship(
        back_populates="user",
        cascade="all, delete-orphan"
    )
    posts: Mapped[List["Post"]] = relationship(back_populates="author")

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, email={self.email!r})"
```

### **❌ DON'T: Устаревший стиль (SQLAlchemy 1.x)**

```python
# Не используйте старый стиль
class User(Base):
    __tablename__ = "user_account"

    id = Column(Integer, primary_key=True)
    name = Column(String(30), nullable=False)
    # Отсутствие типизации
```

### **✅ DO: Правильные связи**

```python
class User(Base):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30), nullable=False)

    # One-to-Many: один пользователь - много постов
    posts: Mapped[List["Post"]] = relationship(
        back_populates="author",
        cascade="all, delete-orphan",
        lazy="selectin"  # Оптимизация загрузки
    )

    # Many-to-Many: пользователи и роли
    roles: Mapped[List["Role"]] = relationship(
        secondary="user_roles",
        back_populates="users"
    )

class Post(Base):
    __tablename__ = "post"

    id: Mapped[int] = mapped_column(primary_key=True)
    title: Mapped[str] = mapped_column(String(200), nullable=False)
    content: Mapped[str] = mapped_column(Text)
    author_id: Mapped[int] = mapped_column(ForeignKey("user_account.id"))

    # Many-to-One: пост принадлежит автору
    author: Mapped["User"] = relationship(back_populates="posts")
```

### **❌ DON'T: Неправильные связи**

```python
# Не используйте backref (устарел в пользу back_populates)
class User(Base):
    posts = relationship("Post", backref="author")

# Не забывайте указывать типы для Mapped
class Post(Base):
    author = relationship("User")  # Отсутствует Mapped
```

### **✅ DO: Миксины для общих полей**

```python
# models/mixins.py
from datetime import datetime
from sqlalchemy import func
from sqlalchemy.orm import Mapped, mapped_column

class TimestampMixin:
    """Миксин для полей времени создания и обновления."""

    created_at: Mapped[datetime] = mapped_column(
        default=func.now(),
        server_default=func.now(),
        nullable=False
    )
    updated_at: Mapped[datetime] = mapped_column(
        default=func.now(),
        onupdate=func.now(),
        server_default=func.now(),
        nullable=False
    )

class SoftDeleteMixin:
    """Миксин для мягкого удаления."""

    deleted_at: Mapped[Optional[datetime]] = mapped_column(default=None)
    is_deleted: Mapped[bool] = mapped_column(default=False)

# Использование в моделях
class User(Base, TimestampMixin, SoftDeleteMixin):
    __tablename__ = "user_account"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30), nullable=False)
    # Автоматически получаем created_at, updated_at, deleted_at, is_deleted
```

## **Организация и управление миграциями**

### **✅ DO: Правильная настройка env.py**

```python
# alembic/env.py
from logging.config import fileConfig
from sqlalchemy import engine_from_config
from sqlalchemy import pool
from alembic import context

# Импорт моделей для autogenerate
from app.models import Base
from app.core.config import settings

# this is the Alembic Config object
config = context.config

# Interpret the config file for Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Target metadata для autogenerate
target_metadata = Base.metadata

def get_url():
    """Получение URL базы данных из настроек."""
    return settings.DATABASE_URL

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_url()

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            # Включение схем
            include_schemas=True,
            # Фильтрация объектов
            include_name=include_name,
            # Генерация batch операций для SQLite
            render_as_batch=True,
        )

        with context.begin_transaction():
            context.run_migrations()

def include_name(name, type_, parent_names):
    """Фильтрация объектов для autogenerate."""
    if type_ == "schema":
        # Включаем только нужные схемы
        return name in [None, "public", "auth"]
    elif type_ == "table":
        # Включаем только таблицы из наших моделей
        return name in target_metadata.tables
    return True

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
```

### **✅ DO: Безопасные миграции**

```python
"""Safe migration with validation

Revision ID: 003
Revises: 002
Create Date: 2024-01-03 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

revision = '003'
down_revision = '002'

def upgrade() -> None:
    # Проверка существования данных перед изменением
    connection = op.get_bind()

    # Проверяем, есть ли пользователи с пустыми email
    result = connection.execute(
        text("SELECT COUNT(*) FROM user_account WHERE email IS NULL OR email = ''")
    ).scalar()

    if result > 0:
        raise Exception(f"Found {result} users with empty email. Please fix data first.")

    # Безопасное изменение колонки
    op.alter_column('user_account', 'email',
        existing_type=sa.String(length=100),
        type_=sa.String(length=200),
        existing_nullable=False,
        nullable=False
    )

def downgrade() -> None:
    op.alter_column('user_account', 'email',
        existing_type=sa.String(length=200),
        type_=sa.String(length=100),
        existing_nullable=False,
        nullable=False
    )
```

## **Стиль написания кода**

### **✅ DO: Строгая типизация**

```python
from typing import List, Optional, Dict, Any
from datetime import datetime
from sqlalchemy import String, Integer, Boolean, DateTime, Text
from sqlalchemy.orm import Mapped, mapped_column, relationship

class User(Base):
    __tablename__ = "user_account"

    # Первичный ключ
    id: Mapped[int] = mapped_column(primary_key=True)

    # Строки с ограничениями
    name: Mapped[str] = mapped_column(String(30), nullable=False)
    email: Mapped[str] = mapped_column(String(100), unique=True, nullable=False)

    # Опциональные поля
    bio: Mapped[Optional[str]] = mapped_column(Text)
    avatar_url: Mapped[Optional[str]] = mapped_column(String(500))

    # Булевы значения
    is_active: Mapped[bool] = mapped_column(Boolean, default=True, nullable=False)
    is_verified: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)

    # Даты
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        nullable=False
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        default=func.now(),
        onupdate=func.now(),
        nullable=False
    )

    # Связи с типизацией
    posts: Mapped[List["Post"]] = relationship(
        back_populates="author",
        cascade="all, delete-orphan"
    )

    def __repr__(self) -> str:
        return f"User(id={self.id}, name={self.name}, email={self.email})"

    def to_dict(self) -> Dict[str, Any]:
        """Преобразование в словарь для API."""
        return {
            "id": self.id,
            "name": self.name,
            "email": self.email,
            "is_active": self.is_active,
            "created_at": self.created_at.isoformat() if self.created_at else None
        }
```

### **✅ DO: Сервисный слой**

```python
# services/user_service.py
from typing import List, Optional
from sqlalchemy.orm import Session
from sqlalchemy import select
from app.models import User
from app.schemas import UserCreate, UserUpdate

class UserService:
    """Сервис для работы с пользователями."""

    def __init__(self, db: Session):
        self.db = db

    def create_user(self, user_data: UserCreate) -> User:
        """Создание нового пользователя."""
        user = User(
            name=user_data.name,
            email=user_data.email,
            bio=user_data.bio
        )
        self.db.add(user)
        self.db.commit()
        self.db.refresh(user)
        return user

    def get_user_by_id(self, user_id: int) -> Optional[User]:
        """Получение пользователя по ID."""
        stmt = select(User).where(User.id == user_id)
        return self.db.execute(stmt).scalar_one_or_none()

    def get_user_by_email(self, email: str) -> Optional[User]:
        """Получение пользователя по email."""
        stmt = select(User).where(User.email == email)
        return self.db.execute(stmt).scalar_one_or_none()

    def get_active_users(self) -> List[User]:
        """Получение всех активных пользователей."""
        stmt = select(User).where(User.is_active == True)
        return list(self.db.execute(stmt).scalars().all())

    def update_user(self, user_id: int, user_data: UserUpdate) -> Optional[User]:
        """Обновление пользователя."""
        user = self.get_user_by_id(user_id)
        if not user:
            return None

        for field, value in user_data.dict(exclude_unset=True).items():
            setattr(user, field, value)

        self.db.commit()
        self.db.refresh(user)
        return user

    def delete_user(self, user_id: int) -> bool:
        """Удаление пользователя."""
        user = self.get_user_by_id(user_id)
        if not user:
            return False

        self.db.delete(user)
        self.db.commit()
        return True
```

## **Работа с транзакциями**

### **✅ DO: Контекстные менеджеры**

```python
from contextlib import contextmanager
from typing import Generator
from sqlalchemy.orm import Session, sessionmaker
from sqlalchemy import create_engine

# Создание engine и session factory
engine = create_engine(
    "postgresql://user:password@localhost/dbname",
    pool_pre_ping=True,
    pool_recycle=3600
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@contextmanager
def get_db() -> Generator[Session, None, None]:
    """Контекстный менеджер для работы с БД."""
    db = SessionLocal()
    try:
        yield db
        db.commit()
    except Exception:
        db.rollback()
        raise
    finally:
        db.close()

# Использование
def create_user(name: str, email: str) -> User:
    with get_db() as db:
        user = User(name=name, email=email)
        db.add(user)
        db.flush()  # Получаем ID без коммита
        return user
```

### **✅ DO: Правильная обработка исключений**

```python
from sqlalchemy.exc import IntegrityError, SQLAlchemyError
from typing import Optional

class UserService:
    def __init__(self, db: Session):
        self.db = db

    def create_user_safe(self, name: str, email: str) -> Optional[User]:
        """Безопасное создание пользователя с обработкой ошибок."""
        try:
            user = User(name=name, email=email)
            self.db.add(user)
            self.db.commit()
            self.db.refresh(user)
            return user

        except IntegrityError as e:
            self.db.rollback()
            if "unique constraint" in str(e).lower():
                raise ValueError(f"User with email {email} already exists")
            raise

        except SQLAlchemyError as e:
            self.db.rollback()
            logger.error(f"Database error while creating user: {e}")
            raise RuntimeError("Failed to create user due to database error")

        except Exception as e:
            self.db.rollback()
            logger.error(f"Unexpected error while creating user: {e}")
            raise
```

## **Настройка подключений**

### **✅ DO: Оптимизированная конфигурация Engine**

```python
from sqlalchemy import create_engine
from sqlalchemy.pool import QueuePool
from sqlalchemy.engine import Engine
from contextlib import contextmanager
import logging

logger = logging.getLogger(__name__)

def create_database_engine(
    database_url: str,
    echo: bool = False,
    pool_size: int = 20,
    max_overflow: int = 30,
    pool_timeout: int = 30,
    pool_recycle: int = 3600,
    pool_pre_ping: bool = True
) -> Engine:
    """Создание оптимизированного engine для БД."""

    engine = create_engine(
        database_url,
        echo=echo,  # Логирование SQL запросов
        poolclass=QueuePool,
        pool_size=pool_size,  # Размер пула соединений
        max_overflow=max_overflow,  # Максимальное количество дополнительных соединений
        pool_timeout=pool_timeout,  # Таймаут ожидания соединения
        pool_recycle=pool_recycle,  # Пересоздание соединений через час
        pool_pre_ping=pool_pre_ping,  # Проверка соединений перед использованием
        # Дополнительные параметры для PostgreSQL
        connect_args={
            "connect_timeout": 10,
            "application_name": "myapp"
        } if "postgresql" in database_url else {}
    )

    return engine

# Создание engine
engine = create_database_engine(
    database_url="postgresql://user:password@localhost/dbname",
    echo=False,  # В продакшене False
    pool_size=20,
    max_overflow=30
)

# Проверка подключения
@contextmanager
def test_connection(engine: Engine):
    """Тестирование подключения к БД."""
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
            logger.info("Database connection successful")
            yield
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        raise
```

## **Управление версиями схемы БД**

### **✅ DO: Проверка состояния БД**

```python
# scripts/check_db_version.py
import sys
from alembic import command, config
from alembic.script import ScriptDirectory
from alembic.runtime import migration

def check_database_version(alembic_cfg_path: str) -> bool:
    """Проверка соответствия версии БД и миграций."""
    try:
        alembic_cfg = config.Config(alembic_cfg_path)
        script_dir = ScriptDirectory.from_config(alembic_cfg)

        # Получение текущих heads
        heads = script_dir.get_heads()

        # Проверка БД
        with alembic_cfg.connect() as connection:
            context = migration.MigrationContext.configure(connection)
            current_heads = context.get_current_heads()

            # Сравнение версий
            if set(current_heads) != set(heads):
                print(f"Database version mismatch!")
                print(f"Expected heads: {heads}")
                print(f"Current heads: {current_heads}")
                return False

            print("Database version is up to date")
            return True

    except Exception as e:
        print(f"Error checking database version: {e}")
        return False

if __name__ == "__main__":
    if not check_database_version("alembic.ini"):
        sys.exit(1)
```

## **Ключевые принципы:**

1. **Используйте современный декларативный стиль** SQLAlchemy 2.0+
2. **Строго типизируйте** все модели и связи
3. **Организуйте миграции** логично и безопасно
4. **Разделяйте ответственность** между слоями приложения
5. **Мониторьте и оптимизируйте** подключения к БД
6. **Автоматизируйте** процессы развертывания и бэкапов

## **Полезные ссылки:**

- [SQLAlchemy Documentation](https://docs.sqlalchemy.org/)
- [Alembic Documentation](https://alembic.sqlalchemy.org/)
- [SQLAlchemy 2.0 Migration Guide](https://docs.sqlalchemy.org/en/20/changelog/migration_20.html)
- [FastAPI SQLAlchemy Integration](https://fastapi.tiangolo.com/tutorial/sql-databases/)
  description:
  globs:
  alwaysApply: false

---
