name: Test and Coverage (Reusable)

on:
  workflow_call:
    inputs:
      target:
        description: "backend или frontend"
        required: true
        type: string
      python-version:
        description: "Python version (для backend)"
        required: false
        default: "3.11"
        type: string
      node-version:
        description: "Node.js version (для frontend)"
        required: false
        default: "20"
        type: string
      upload-coverage:
        description: "Загружать coverage в Codecov и как artifact"
        required: false
        default: "true"
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend
      - name: Set up Python
        if: inputs.target == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install Poetry
        if: inputs.target == 'backend'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        if: inputs.target == 'backend'
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies (backend)
        if: inputs.target == 'backend'
        working-directory: ./backend
        run: poetry install --no-interaction --no-root
      - name: Run tests (backend)
        if: inputs.target == 'backend'
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-fail-under=0
      - name: Upload coverage artifact (backend)
        if: inputs.target == 'backend' && inputs.upload-coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: ./backend/coverage.xml
      - name: Upload coverage to Codecov (backend)
        if: inputs.target == 'backend' && inputs.upload-coverage == 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

      # Frontend
      - name: Setup pnpm
        if: inputs.target == 'frontend'
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
      - name: Set up Node.js
        if: inputs.target == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - name: Install dependencies (frontend)
        if: inputs.target == 'frontend'
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile
      - name: Build application (frontend)
        if: inputs.target == 'frontend'
        working-directory: ./frontend
        run: pnpm run build
      - name: Run tests (frontend)
        if: inputs.target == 'frontend'
        working-directory: ./frontend
        run: pnpm test --passWithNoTests --watchAll=false
      - name: Upload coverage artifact (frontend)
        if: inputs.target == 'frontend' && inputs.upload-coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-lcov
          path: ./frontend/coverage/lcov.info
      - name: Upload coverage to Codecov (frontend)
        if: inputs.target == 'frontend' && inputs.upload-coverage == 'true'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./frontend/coverage/lcov.info
          flags: frontend
          fail_ci_if_error: false
