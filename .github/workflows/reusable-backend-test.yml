# Reusable Backend Tests Workflow
# Best practices: pin actions, timeouts, minimal permissions, concurrency, matrix, cache, upload coverage, DRY, comments

on:
  workflow_call:
    inputs:
      python-versions:
        description: 'Python versions to test against'
        required: false
        default: '["3.11", "3.12"]'
        type: string                                                                                            
      upload-coverage:
        description: 'Upload coverage to Codecov and as artifact'
        required: false
        default: '"true"'
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false

concurrency:
  group: backend-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-lint:
    name:  Backend Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write # write нужен только если пушим автоформат
    steps:
      - name: Get branch name
        id: get_branch
        run: echo "branch_name=${{ github.head_ref || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_branch.outputs.branch_name }}

      - name: Set up Python ${{ env.PYTHON_VERSION_DEFAULT }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION_DEFAULT }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction --no-root

      - name: Run linting and apply fixes
        working-directory: ./backend
        id: lint
        run: |
          source .venv/bin/activate
          
          # Store initial state
          git status --porcelain > before.txt
          
          # Apply formatters
          ruff check . --fix
          black .
          isort .
          
          # Check for mypy errors but don't fail the step
          mypy app/ || true
          
          # Check for changes
          git status --porcelain > after.txt
          
          # Compare states and set output
          if ! cmp -s before.txt after.txt; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        working-directory: ./backend
        if: steps.lint.outputs.changes_detected == 'true'
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "style: auto-format backend code" || true
          git pull --rebase origin "${{ steps.get_branch.outputs.branch_name }}" || true
          git push --force-with-lease origin HEAD:"${{ steps.get_branch.outputs.branch_name }}" || true

  backend-test:
    name:  Backend Tests (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: backend-lint
    timeout-minutes: 20
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}
    env:
      PYTHON_VERSION_DEFAULT: '3.11'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction --no-root

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-fail-under=0

      - name: Upload coverage artifact
        if: inputs.upload-coverage == '"true"' && matrix.python-version == env.PYTHON_VERSION_DEFAULT
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: ./backend/coverage.xml
      - name: Upload coverage to Codecov
        if: inputs.upload-coverage == '"true"' && matrix.python-version == env.PYTHON_VERSION_DEFAULT && (secrets.CODECOV_TOKEN != null && secrets.CODECOV_TOKEN != '')
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false 