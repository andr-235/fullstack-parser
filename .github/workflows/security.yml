name: üõ°Ô∏è Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '**/Dockerfile'
      - 'docker-compose*.yml'
      - 'pyproject.toml'
      - 'package.json'
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '30 5 * * 1' # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 5:30 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # ================================
  # CODEQL ANALYSIS
  # ================================
  codeql:
    name: üîí CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        if: matrix.language == 'python'
        run: |
          cd backend
          poetry install --no-interaction
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ================================
  # TRIVY SCAN
  # ================================
  trivy:
    name: üî¨ Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: codeql
    strategy:
      fail-fast: false
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build an image from Dockerfile
        run: |
          docker build -t ${{ matrix.service }}:test ./${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:test'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ================================
  # DEPENDENCY CHECK
  # ================================
  dependency-check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Python Dependency Scan
        run: |
          pip install safety
          cd backend
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          safety check -r requirements.txt || true
          
      - name: Node.js Dependency Scan
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
      - run: |
          cd frontend
          pnpm audit || true

  # ================================
  # SECRET SCANNING
  # ================================
  secret-scan:
    name: üîê Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ================================
  # DOCKER IMAGE SCANNING
  # ================================
  docker-scan:
    name: üê≥ Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          tags: ${{ matrix.service }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:security-scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ matrix.service }}:security-scan
          only-severities: critical,high
          write-comment: false

  # ================================
  # SBOM GENERATION
  # ================================
  sbom:
    name: üìÑ SBOM Generation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@v0
        with:
          path: ./backend
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@v0
        with:
          path: ./frontend
          format: spdx-json
          output-file: frontend-sbom.spdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            backend-sbom.spdx.json
            frontend-sbom.spdx.json

  # ================================
  # SECURITY SUMMARY
  # ================================
  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, trivy, dependency-check, secret-scan, docker-scan, sbom]
    if: always()

    steps:
      - name: Download security artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Generate security summary
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## üìä Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          echo "| Scan Type | Status | Details |" >> security-summary.md
          echo "|-----------|--------|---------|" >> security-summary.md
          echo "| CodeQL | ${{ needs.codeql.result }} | Static analysis for Python and JavaScript |" >> security-summary.md
          echo "| Trivy | ${{ needs.trivy.result }} | Vulnerability scanning |" >> security-summary.md
          echo "| Dependencies | ${{ needs.dependency-check.result }} | Dependency vulnerability check |" >> security-summary.md
          echo "| Secrets | ${{ needs.secret-scan.result }} | Secret scanning with TruffleHog |" >> security-summary.md
          echo "| Docker | ${{ needs.docker-scan.result }} | Container security scanning |" >> security-summary.md
          echo "| SBOM | ${{ needs.sbom.result }} | Software Bill of Materials |" >> security-summary.md
          echo "" >> security-summary.md
          echo "## üéØ Overall Status" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check overall status
          if [[ "${{ needs.codeql.result }}" == "success" && 
                "${{ needs.trivy.result }}" == "success" && 
                "${{ needs.dependency-check.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" && 
                "${{ needs.docker-scan.result }}" == "success" && 
                "${{ needs.sbom.result }}" == "success" ]]; then
            echo "‚úÖ **All security scans passed successfully!**" >> security-summary.md
            echo "overall_status=success" >> $GITHUB_ENV
          else
            echo "‚ùå **Some security scans failed or have warnings**" >> security-summary.md
            echo "overall_status=failure" >> $GITHUB_ENV
          fi
          
          echo "" >> security-summary.md
          echo "---" >> security-summary.md
          echo "*Generated on: $(date)*" >> security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Fail job if security issues found
        if: env.overall_status == 'failure'
        run: |
          echo "‚ùå Security scans detected issues. Please review the security reports."
          exit 1 