name: 🛡️ Security Audit

on:
  schedule:
    - cron: '0 6 * * 1'  # Каждый понедельник в 6:00 UTC
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - containers
      severity:
        description: 'Minimum severity level'
        required: true
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

jobs:
  # =============================================================================
  # DEPENDENCY SCANNING
  # =============================================================================
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout код
        uses: actions/checkout@v4

      - name: 🐍 Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Настройка Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 🔍 Python Dependencies Audit (Safety)
        working-directory: ./backend
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: 🔍 Python Dependencies Audit (pip-audit)
        working-directory: ./backend
        run: |
          pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx --output=sbom.xml || true

      - name: 🔍 Node.js Dependencies Audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate

      - name: 📊 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: ${{ github.event.inputs.severity || 'medium' }}

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-reports
          path: |
            backend/safety-report.json
            backend/pip-audit-report.json
            backend/sbom.xml
            frontend/npm-audit-report.json

  # =============================================================================
  # CODE SECURITY SCANNING
  # =============================================================================
  code-security-scan:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule'
    
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout код
        uses: actions/checkout@v4

      - name: 🔍 CodeQL Security Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python,javascript"

      - name: 🐍 Bandit Security Linter (Python)
        working-directory: ./backend
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -f txt

      - name: ⚛️ ESLint Security Plugin (JavaScript)
        working-directory: ./frontend
        run: |
          npm ci
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json > eslint-security-report.json || true
          npx eslint . --ext .js,.jsx,.ts,.tsx

      - name: 🔒 Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          generateSarif: "1"

      - name: 📋 Upload SAST Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-security-reports
          path: |
            backend/bandit-report.json
            frontend/eslint-security-report.json
            semgrep.sarif

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================
  container-security-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout код
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          tags: backend:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          tags: frontend:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Trivy Container Scan - Backend
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          trivy image --format json --output backend-trivy-report.json backend:security-scan || true
          trivy image --format table backend:security-scan

      - name: 🔍 Trivy Container Scan - Frontend
        run: |
          trivy image --format json --output frontend-trivy-report.json frontend:security-scan || true
          trivy image --format table frontend:security-scan

      - name: 🔍 Docker Scout Analysis
        if: github.repository_owner == github.actor
        run: |
          # Install Docker Scout
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
          
          # Analyze images
          docker scout cves backend:security-scan --format sarif --output backend-scout.sarif || true
          docker scout cves frontend:security-scan --format sarif --output frontend-scout.sarif || true

      - name: 📋 Upload Container Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-reports
          path: |
            backend-trivy-report.json
            frontend-trivy-report.json
            backend-scout.sarif
            frontend-scout.sarif

  # =============================================================================
  # INFRASTRUCTURE SECURITY
  # =============================================================================
  infrastructure-scan:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout код
        uses: actions/checkout@v4

      - name: 🔍 Checkov IaC Security Scan
        run: |
          pip install checkov
          checkov -d . --framework dockerfile,yaml,secrets --output json --output-file checkov-report.json || true
          checkov -d . --framework dockerfile,yaml,secrets

      - name: 🔒 GitLeaks Secrets Scan
        run: |
          # Install gitleaks
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          
          # Scan for secrets
          ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json || true
          ./gitleaks detect --source . --report-format table

      - name: 📋 Upload Infrastructure Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-security-reports
          path: |
            checkov-report.json
            gitleaks-report.json

  # =============================================================================
  # SECURITY SUMMARY & NOTIFICATIONS
  # =============================================================================
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security-scan, infrastructure-scan]
    if: always()

    steps:
      - name: 📥 Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: 📊 Generate Security Summary
        run: |
          echo "## 🛡️ Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Security: ${{ needs.code-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Scan: ${{ needs.container-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure: ${{ needs.infrastructure-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for any failures
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ **CRITICAL:** Обнаружены проблемы безопасности!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **SUCCESS:** Критические проблемы не обнаружены" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Create Security Issue
        if: contains(needs.*.result, 'failure') && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,automated',
              state: 'open'
            });
            
            // Don't create duplicate issues
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🛡️ Security Audit Failed - ' + new Date().toISOString().split('T')[0],
                body: `
                ## 🚨 Automated Security Scan Failed
                
                **Scan Date:** ${new Date().toISOString()}
                **Workflow:** [Security Audit](${context.payload.repository.html_url}/actions/runs/${context.runId})
                
                ### ❌ Failed Scans:
                ${{ toJSON(needs.*.result) }}
                
                ### 📋 Next Steps:
                1. Review the workflow logs for detailed findings
                2. Download security reports from the workflow artifacts
                3. Address critical and high severity issues
                4. Re-run the security workflow to verify fixes
                
                ### 🔗 Resources:
                - [Security Reports Artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})
                - [Security Documentation](./docs/SECURITY.md)
                
                > This issue was automatically created by the Security Audit workflow.
                `,
                labels: ['security', 'automated', 'bug']
              });
            }

      - name: 📢 Security Notification
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          text: |
            🚨 **Security Audit Failed!**
            
            Repository: ${{ github.repository }}
            Workflow: [Security Audit](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            Failed scans require immediate attention.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }} 