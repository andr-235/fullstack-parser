name: Security Audit

# Recommended: restrict permissions by default (principle of least privilege)
permissions:
  contents: read

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      audit_type:
        description: "Type of audit to run"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - quick
          - dependencies-only

env:
  AUDIT_TYPE: ${{ github.event.inputs.audit_type || 'full' }}

jobs:
  # Frontend Security Audit
  frontend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security check
        run: |
          echo "Running security check..."
          npm audit --audit-level=moderate --json > audit-results.json || echo '{"vulnerabilities":{}}' > audit-results.json

      - name: Analyze audit results
        run: |
          if [ -f audit-results.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities.total' audit-results.json 2>/dev/null || echo "0")
            CRITICAL=$(jq '.metadata.vulnerabilities.critical' audit-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '.metadata.vulnerabilities.high' audit-results.json 2>/dev/null || echo "0")

            echo "📊 npm Audit Results:"
            echo "Total vulnerabilities: $VULNERABILITIES"
            echo "Critical: $CRITICAL"
            echo "High: $HIGH"

            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "❌ High or critical vulnerabilities found!"
              jq '.vulnerabilities | to_entries[] | select(.value.severity == "critical" or .value.severity == "high") | {package: .key, severity: .value.severity, title: .value.title}' audit-results.json
              exit 1
            else
              echo "✅ No high or critical vulnerabilities found"
            fi
          else
            echo "✅ No vulnerabilities found"
          fi

      - name: Run dependency check
        if: ${{ github.event.inputs.audit_type == 'full' || github.event_name == 'schedule' }}
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "Frontend"
          path: "./frontend"
          format: "ALL"
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24

      - name: Upload dependency check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-report
          path: |
            reports/
            audit-results.json

  # Backend Security Audit
  backend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry==1.8.3

      - name: Install dependencies
        run: poetry install

      - name: Run Bandit security scan
        run: |
          echo "Running Bandit security scan..."
          poetry run bandit -r src/ -f json -o bandit-results.json --verbose || true

      - name: Analyze Bandit results
        run: |
          if [ -f bandit-results.json ]; then
            HIGH_CRITICAL=$(jq '.results | map(select(.issue_confidence == "HIGH" and (.issue_severity == "HIGH" or .issue_severity == "CRITICAL"))) | length' bandit-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '.results | map(select(.issue_severity == "MEDIUM")) | length' bandit-results.json 2>/dev/null || echo "0")

            echo "📊 Bandit Results:"
            echo "High/Critical issues: $HIGH_CRITICAL"
            echo "Medium issues: $MEDIUM"

            if [ "$HIGH_CRITICAL" -gt 0 ]; then
              echo "❌ High or critical security issues found!"
              jq '.results[] | select(.issue_confidence == "HIGH" and (.issue_severity == "HIGH" or .issue_severity == "CRITICAL")) | {filename: .filename, issue: .issue_text, severity: .issue_severity, confidence: .issue_confidence}' bandit-results.json
              exit 1
            elif [ "$MEDIUM" -gt 3 ]; then
              echo "⚠️  More than 3 medium security issues found"
            else
              echo "✅ Security scan passed"
            fi
          fi

      - name: Run pip-audit
        run: |
          echo "Running pip-audit..."
          poetry run pip-audit --format json > pip-audit-results.json 2>/dev/null || echo '{"vulnerabilities": []}' > pip-audit-results.json

      - name: Analyze pip-audit results
        run: |
          VULNS=$(jq '. | length' pip-audit-results.json 2>/dev/null || echo "0")
          echo "📊 pip-audit found $VULNS vulnerabilities"

          if [ "$VULNS" -gt 0 ]; then
            echo "❌ Python package vulnerabilities found:"
            jq '.[] | {package: .name, version: .version, vulnerability: .vulnerability_id, description: .description}' pip-audit-results.json
            exit 1
          else
            echo "✅ No Python package vulnerabilities found"
          fi

      - name: Run Safety (alternative vulnerability scanner)
        run: |
          echo "Running Safety scan..."
          pip install safety
          safety check --json > safety-results.json 2>/dev/null || echo '{"issues": []}' > safety-results.json

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-report
          path: |
            bandit-results.json
            pip-audit-results.json
            safety-results.json

  # Container Security Scan
  container-security:
    runs-on: ubuntu-latest
    # yamllint disable-line rule:truthy
    if: ${{ github.event.inputs.audit_type == 'full' || github.event_name == 'schedule' }}
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          echo "Building Docker images for scanning..."
          docker build -t frontend-scan ./frontend
          docker build -t backend-scan ./backend
          docker build -t nginx-scan ./nginx

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          scan-ref: "frontend-scan,backend-scan,nginx-scan"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Analyze Trivy results
        run: |
          CRITICAL=$(grep -c '"severity":"CRITICAL"' trivy-results.sarif 2>/dev/null || echo "0")
          HIGH=$(grep -c '"severity":"HIGH"' trivy-results.sarif 2>/dev/null || echo "0")

          echo "📊 Trivy Container Scan Results:"
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 5 ]; then
            echo "❌ Too many high/critical container vulnerabilities!"
            exit 1
          else
            echo "✅ Container security scan passed"
          fi

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-security-report
          path: trivy-results.sarif

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: trivy-results.sarif

  # Infrastructure Security Scan
  infrastructure-security:
    runs-on: ubuntu-latest
    # yamllint disable-line rule:truthy
    if: ${{ github.event.inputs.audit_type == 'full' || github.event_name == 'schedule' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Compose security check
        run: |
          echo "Checking Docker Compose security..."
          # Check for security issues in docker-compose files
          if grep -r "root" docker-compose*.yml 2>/dev/null; then
            echo "⚠️  Found 'root' user in Docker Compose files"
          fi

          # Check for exposed ports that shouldn't be
          if grep -r "5432:5432\|6379:6379" docker-compose*.yml 2>/dev/null; then
            echo "⚠️  Database ports exposed to host"
          fi

          # Check for security best practices
          if grep -r "image:.*:latest" docker-compose*.yml 2>/dev/null; then
            echo "⚠️  Using 'latest' tag - consider using specific versions"
          fi

  # Report Generation
  generate-report:
    runs-on: ubuntu-latest
    needs:
      [
        frontend-security,
        backend-security,
        container-security,
        infrastructure-security,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Generate comprehensive security report
        run: |
          echo "# 🔒 Security Audit Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "Generated on: $(date)" >> SECURITY_REPORT.md
          echo "Repository: ${{ github.repository }}" >> SECURITY_REPORT.md
          echo "Commit: ${{ github.sha }}" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md

          # Frontend results
          if [ -f "./security-reports/frontend-security-report/audit-results.json" ]; then
            echo "## Frontend Security" >> SECURITY_REPORT.md
            echo "\`\`\`json" >> SECURITY_REPORT.md
            cat "./security-reports/frontend-security-report/audit-results.json" >> SECURITY_REPORT.md
            echo "\`\`\`" >> SECURITY_REPORT.md
            echo "" >> SECURITY_REPORT.md
          fi

          # Backend results
          if [ -f "./security-reports/backend-security-report/bandit-results.json" ]; then
            echo "## Backend Security (Bandit)" >> SECURITY_REPORT.md
            echo "\`\`\`json" >> SECURITY_REPORT.md
            cat "./security-reports/backend-security-report/bandit-results.json" >> SECURITY_REPORT.md
            echo "\`\`\`" >> SECURITY_REPORT.md
            echo "" >> SECURITY_REPORT.md
          fi

          echo "## 📊 Summary" >> SECURITY_REPORT.md
          echo "- ✅ Frontend audit completed" >> SECURITY_REPORT.md
          echo "- ✅ Backend security scan completed" >> SECURITY_REPORT.md
          echo "- ✅ Container security scan completed" >> SECURITY_REPORT.md
          echo "- ✅ Infrastructure security check completed" >> SECURITY_REPORT.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: SECURITY_REPORT.md
