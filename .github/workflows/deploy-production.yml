---
# üöÄ Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

concurrency:
  group: production
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: andr-235/fullstack-backend
  IMAGE_NAME_FRONTEND: andr-235/fullstack-frontend
  IMAGE_NAME_ARQ_WORKER: andr-235/fullstack-arq-worker

jobs:
  build:
    name: Build and Push Docker Images
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: ‚¨áÔ∏è Check out code
        uses: actions/checkout@v4

      - name: üßÆ Set reusable variables
        id: vars
        run: |
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üèóÔ∏è Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: üèóÔ∏è Build and push arq-worker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:${{ github.sha }}

      - name: Generate .env.local for frontend
        working-directory: ./frontend
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env.local

      - name: üèóÔ∏è Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

  deploy:
    name: Deploy to Production Server
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    timeout-minutes: 15
    environment:
      name: production
      url: https://192.168.88.12 # –£–∫–∞–∂–∏ —Å–≤–æ–π production URL
    permissions:
      contents: read
    steps:
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ secrets
        run: |
          test -n "${{ secrets.PRODUCTION_HOST }}" || \
            (echo "–ù–µ—Ç PRODUCTION_HOST" && exit 1)
          test -n "${{ secrets.PRODUCTION_USER }}" || \
            (echo "–ù–µ—Ç PRODUCTION_USER" && exit 1)
          test -n "${{ secrets.PRODUCTION_SSH_KEY }}" || \
            (echo "–ù–µ—Ç PRODUCTION_SSH_KEY" && exit 1)
          test -n "${{ secrets.PRODUCTION_PORT }}" || \
            (echo "–ù–µ—Ç PRODUCTION_PORT" && exit 1)
          test -n "${{ secrets.PRODUCTION_APP_DIR }}" || \
            (echo "–ù–µ—Ç PRODUCTION_APP_DIR" && exit 1)
          test -n "${{ secrets.GHCR_USERNAME }}" || \
            (echo "–ù–µ—Ç GHCR_USERNAME" && exit 1)
          test -n "${{ secrets.GHCR_TOKEN }}" || \
            (echo "–ù–µ—Ç GHCR_TOKEN" && exit 1)

      - name: üöÄ Deploy to Production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            cd ${{ secrets.PRODUCTION_APP_DIR }}
            echo "üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin
            echo "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
            docker-compose -f docker-compose.prod.ip.yml pull
            echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            docker-compose -f docker-compose.prod.ip.yml up -d --build
            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"

      - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR }}
            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
            docker-compose -f docker-compose.prod.ip.yml ps
            echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks:"
            docker-compose -f docker-compose.prod.ip.yml ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"

      # - name: Slack/Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' \
      #       --data '{"text":"Production deploy –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"}' \
      #       $SLACK_WEBHOOK_URL

      # - name: –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (manual workflow, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ README)
      #   run: |
      #     # docker-compose -f docker-compose.prod.ip.yml up -d --remove-orphans <PREVIOUS_TAG>

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è README:
# ![Deploy to Production](https://github.com/<owner>/<repo>/actions/workflows/deploy-production.yml/badge.svg?branch=main)
