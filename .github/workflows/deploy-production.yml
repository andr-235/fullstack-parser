---
# üöÄ Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: andr-235/fullstack-backend
  IMAGE_NAME_FRONTEND: andr-235/fullstack-frontend
  IMAGE_NAME_ARQ_WORKER: andr-235/fullstack-arq-worker

jobs:
  test-backend:
    name: Backend Tests
    permissions:
      contents: write
    uses: ./.github/workflows/reusable-backend-test.yml
    with:
      python-versions: '["3.11", "3.12"]'
      upload-coverage: "false"
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: Frontend Tests
    permissions:
      contents: write
    uses: ./.github/workflows/reusable-frontend-test.yml
    with:
      node-versions: '["20"]'
      upload-coverage: "false"
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    permissions:
      contents: read
      actions: read
      security-events: write
    uses: ./.github/workflows/security.yml

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    needs: [test-backend, test-frontend, security]
    outputs:
      short_sha: ${{ steps.vars.outputs.sha }}
    steps:
      - name: ‚¨áÔ∏è Check out code
        uses: actions/checkout@v4

      - name: üßÆ Set reusable variables
        id: vars
        run: |
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üèóÔ∏è Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: üèóÔ∏è Build and push arq-worker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:${{ github.sha }}

      - name: Generate .env.local for frontend
        working-directory: ./frontend
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env.local

      - name: üèóÔ∏è Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}

  deploy:
    name: Deploy to Production Server
    needs: build
    runs-on: self-hosted
    timeout-minutes: 15
    environment:
      name: production
      url: https://192.168.88.12  # –£–∫–∞–∂–∏ —Å–≤–æ–π production URL
    permissions:
      contents: read
    steps:
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ secrets
        run: |
          test -n "${{ secrets.PRODUCTION_HOST }}" || \
            (echo "–ù–µ—Ç PRODUCTION_HOST" && exit 1)
          test -n "${{ secrets.PRODUCTION_USER }}" || \
            (echo "–ù–µ—Ç PRODUCTION_USER" && exit 1)
          test -n "${{ secrets.PRODUCTION_SSH_KEY }}" || \
            (echo "–ù–µ—Ç PRODUCTION_SSH_KEY" && exit 1)
          test -n "${{ secrets.PRODUCTION_PORT }}" || \
            (echo "–ù–µ—Ç PRODUCTION_PORT" && exit 1)
          test -n "${{ secrets.PRODUCTION_APP_DIR }}" || \
            (echo "–ù–µ—Ç PRODUCTION_APP_DIR" && exit 1)

      - name: üöÄ Deploy to Production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR }} && \
              docker-compose -f docker-compose.prod.ip.yml pull && \
              docker-compose -f docker-compose.prod.ip.yml up -d --build

      - name: Healthcheck backend
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            for i in {1..10}; do
              if curl -fsSL http://localhost:8000/health; then
                echo "‚úÖ Backend is healthy"
                exit 0
              fi
              echo "Attempt $i: Backend not ready yet, waiting 5 seconds..."
              sleep 5
            done
            echo "‚ùå Backend healthcheck failed after 10 attempts"
            exit 1

      - name: Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø–ª–æ–µ
        if: success()
        env:
          TELEGRAM_WEBHOOK_URL: ${{ secrets.TELEGRAM_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -d '{"text":"üöÄ Production deploy –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"}' \
            "$TELEGRAM_WEBHOOK_URL"

      # - name: Slack/Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' \
      #       --data '{"text":"Production deploy –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"}' \
      #       $SLACK_WEBHOOK_URL

      # - name: –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (manual workflow, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ README)
      #   run: |
      #     # docker-compose -f docker-compose.prod.ip.yml up -d --remove-orphans <PREVIOUS_TAG>

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è README:
# ![Deploy to Production](https://github.com/<owner>/<repo>/actions/workflows/deploy-production.yml/badge.svg?branch=main)
