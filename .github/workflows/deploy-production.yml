# üöÄ Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: production
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test-backend:
    name: Backend Tests
    uses: ./.github/workflows/reusable-backend-test.yml
    with:
      python-versions: '["3.11", "3.12"]'
      upload-coverage: 'false'

  test-frontend:
    name: Frontend Tests
    uses: ./.github/workflows/reusable-frontend-test.yml
    with:
      node-versions: '["20"]'
      upload-coverage: 'false'

  security:
    name: Security Scan
    uses: ./.github/workflows/security.yml

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    needs: [test-backend, test-frontend, security]
    outputs:
      short_sha: ${{ steps.vars.outputs.sha }}
    steps:
      - name: ‚¨áÔ∏è Check out code
        uses: actions/checkout@v4.1.1

      - name: üßÆ Set reusable variables
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build and push backend image
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.vars.outputs.sha }}

      - name: üèóÔ∏è Build and push frontend image
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.vars.outputs.sha }}

  deploy:
    name: Deploy to Production Server
    needs: build
    runs-on: self-hosted
    timeout-minutes: 15
    environment:
      name: production
      url: https://your-app.com # –£–∫–∞–∂–∏ —Å–≤–æ–π production URL
    permissions:
      contents: read
    steps:
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ secrets
        run: |
          test -n "${{ secrets.PRODUCTION_HOST }}" || (echo "–ù–µ—Ç PRODUCTION_HOST" && exit 1)
          test -n "${{ secrets.PRODUCTION_USER }}" || (echo "–ù–µ—Ç PRODUCTION_USER" && exit 1)
          test -n "${{ secrets.PRODUCTION_SSH_KEY }}" || (echo "–ù–µ—Ç PRODUCTION_SSH_KEY" && exit 1)
          test -n "${{ secrets.PRODUCTION_PORT }}" || (echo "–ù–µ—Ç PRODUCTION_PORT" && exit 1)
          test -n "${{ secrets.PRODUCTION_APP_DIR }}" || (echo "–ù–µ—Ç PRODUCTION_APP_DIR" && exit 1)

      - name: üöÄ Deploy to Production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            set -euo pipefail
            echo "Changing to app directory..."
            cd ${{ secrets.PRODUCTION_APP_DIR }}
            echo "Configuring git safe.directory..."
            git config --global --add safe.directory ${{ secrets.PRODUCTION_APP_DIR }}
            echo "Pulling latest changes from main branch..."
            git pull origin main
            echo "Copying .env to .env.prod..."
            cp .env .env.prod
            if [ -z "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}" ] || [ -z "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}" ]; then
              echo "‚ùå DOCKER_IMAGE_BACKEND –∏–ª–∏ DOCKER_IMAGE_FRONTEND –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã! –û—Å—Ç–∞–Ω–æ–≤ –¥–µ–ø–ª–æ—è." && exit 1
            fi
            echo "DOCKER_IMAGE_BACKEND=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ needs.build.outputs.short_sha }}" >> .env.prod
            echo "DOCKER_IMAGE_FRONTEND=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.build.outputs.short_sha }}" >> .env.prod
            echo "–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å..."
            docker rm -f fullstack_postgres_prod fullstack_redis_prod fullstack_backend_prod fullstack_arq_worker_prod fullstack_frontend_prod fullstack_nginx || true
            echo "Pulling images and starting containers..."
            docker-compose -f docker-compose.prod.ip.yml pull
            docker-compose -f docker-compose.prod.ip.yml up -d --remove-orphans
            echo "–ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic..."
            docker-compose -f docker-compose.prod.ip.yml exec backend alembic upgrade head
            echo "Cleaning up old Docker images..."
            docker image prune -af
            echo "‚úÖ Deployment successful!"

      - name: Healthcheck backend
        run: |
          for i in {1..10}; do
            if curl -fsSL http://localhost:8000/health; then
              echo "‚úÖ Backend is healthy"
              exit 0
            fi
            sleep 5
          done
          echo "‚ùå Backend healthcheck failed"
          exit 1

      # - name: Slack/Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      #   run: |
      #     curl -X POST -H 'Content-type: application/json' --data '{"text":"Production deploy –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!"}' $SLACK_WEBHOOK_URL

      # - name: –û—Ç–∫–∞—Ç –¥–µ–ø–ª–æ—è (manual workflow, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ README)
      #   run: |
      #     # docker-compose -f docker-compose.prod.ip.yml up -d --remove-orphans <PREVIOUS_TAG>

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è README:
# ![Deploy to Production](https://github.com/<owner>/<repo>/actions/workflows/deploy-production.yml/badge.svg?branch=main)
