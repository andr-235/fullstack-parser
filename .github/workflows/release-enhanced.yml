---
name: üöÄ Enhanced Release & Publish

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "–í–µ—Ä—Å–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2.3)"
        required: true
        type: string
      force:
        description: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: andr-235/fullstack-backend
  IMAGE_NAME_FRONTEND: andr-235/fullstack-frontend
  IMAGE_NAME_ARQ_WORKER: andr-235/fullstack-arq-worker

jobs:
  validate:
    name: üõ°Ô∏è Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
      is_forced: ${{ steps.get_version.outputs.is_forced }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="v${{ github.event.inputs.version }}"
            FORCED="${{ github.event.inputs.force }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
            FORCED="false"
          fi

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_forced=$FORCED" >> $GITHUB_OUTPUT

          if [[ $TAG == *"beta"* || $TAG == *"alpha"* || $TAG == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "üéØ –†–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏: $VERSION"
          echo "üè∑Ô∏è  –¢–µ–≥: $TAG"
          echo "üß™ Pre-release: ${{ steps.get_version.outputs.is_prerelease }}"
          echo "‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π: $FORCED"

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate
    if: needs.validate.outputs.is_forced != 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  dependency-check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: needs.validate.outputs.is_forced != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Check backend dependencies
        working-directory: ./backend
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
          if command -v poetry &> /dev/null; then
            poetry show --outdated
            poetry audit
          else
            echo "‚ö†Ô∏è Poetry –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É"
          fi

      - name: Check frontend dependencies
        working-directory: ./frontend
        run: |
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
          if command -v pnpm &> /dev/null; then
            pnpm audit
            pnpm outdated
          else
            echo "‚ö†Ô∏è pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É"
          fi

  backend-test:
    name: üêç Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validate
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction
      - name: Run tests with coverage
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          REDIS_URL: "redis://localhost:6379"
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-report=term-missing
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-test:
    name: ‚öõÔ∏è Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - run: pnpm test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build-and-push:
    name: üê≥ Build and Push Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate, backend-test, frontend-test]
    if: always() && (needs.backend-test.result == 'success' || needs.validate.outputs.is_forced == 'true') && (needs.frontend-test.result == 'success' || needs.validate.outputs.is_forced == 'true')
    strategy:
      matrix:
        service: [backend, frontend, arq-worker]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5.3.0
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate, build-and-push]
    if: always() && needs.build-and-push.result == 'success'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configurationJson: ${{ fromJson('{"categories":[{"title":"üöÄ Features","labels":["feature","enhancement"]},{"title":"üêõ Bug Fixes","labels":["bug","fix"]},{"title":"üìÑ Documentation","labels":["docs","documentation"]},{"title":"üß™ Testing","labels":["test","tests"]},{"title":"‚öôÔ∏è Miscellaneous","labels":["chore","style","refactor","perf","ci","build"]}],"ignore_labels":["ignore"],"sort":"ASC","template":{"issue":"- {{name}} [{{text}}]({{url}})","pr":"- {{name}} [{{text}}]({{url}})","contributor":"- Thanks @{{name}} for your contribution! ([{{text}}]({{url}}))"}}') }}

      - uses: softprops/action-gh-release@v2
        with:
          body: |
            ## üéâ Release v${{ needs.validate.outputs.version }}

            ### üìã Changes
            ${{ steps.changelog.outputs.changelog }}

            ### üê≥ Docker Images
            - Backend: `ghcr.io/${{ github.repository_owner }}/backend:${{ needs.validate.outputs.version }}`
            - Frontend: `ghcr.io/${{ github.repository_owner }}/frontend:${{ needs.validate.outputs.version }}`
            - ARQ Worker: `ghcr.io/${{ github.repository_owner }}/arq-worker:${{ needs.validate.outputs.version }}`

            ### üì¶ Installation
            ```bash
            # Pull latest images
            docker pull ghcr.io/${{ github.repository_owner }}/backend:${{ needs.validate.outputs.version }}
            docker pull ghcr.io/${{ github.repository_owner }}/frontend:${{ needs.validate.outputs.version }}
            docker pull ghcr.io/${{ github.repository_owner }}/arq-worker:${{ needs.validate.outputs.version }}
            ```

            ### üîó Links
            - [Docker Hub](https://github.com/${{ github.repository_owner }}/${{ github.repository }}/pkgs/container/backend)
            - [Full Changelog](https://github.com/${{ github.repository_owner }}/${{ github.repository }}/compare/v${{ needs.validate.outputs.previous_tag }}...v${{ needs.validate.outputs.version }})
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          fail_on_unmatched_files: false
          generate_release_notes: false

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate, create-release]
    if: always() && needs.create-release.result == 'success'
    environment:
      name: staging
      url: https://staging.yourdomain.com
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying version ${{ needs.validate.outputs.version }} to staging"
          # –ó–¥–µ—Å—å –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–ø–ª–æ—è –Ω–∞ staging
          echo "‚úÖ Deployment to staging completed"

      - name: Run deployment tests
        run: |
          echo "üß™ Running deployment tests on staging"
          # –ó–¥–µ—Å—å –≤–∞—à–∏ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
          echo "‚úÖ Deployment tests passed"

  notify:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, create-release, deploy-staging]
    permissions:
      contents: read
    if: always()
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success' && needs.deploy-staging.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "üì¶ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"
          echo "üöÄ Staging deployment: successful"
          echo "üê≥ Docker Images:"
          echo "  - Backend: ghcr.io/${{ github.repository_owner }}/backend:${{ needs.validate.outputs.version }}"
          echo "  - Frontend: ghcr.io/${{ github.repository_owner }}/frontend:${{ needs.validate.outputs.version }}"
          echo "  - ARQ Worker: ghcr.io/${{ github.repository_owner }}/arq-worker:${{ needs.validate.outputs.version }}"

          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Slack/Discord/Telegram
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üéâ Release '${{ needs.validate.outputs.version }}' completed successfully!"}' \
          #   $SLACK_WEBHOOK_URL

      - name: Notify on failure
        if: needs.create-release.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.validate.outputs.version }} failed!"
          echo "üîç Check the logs for details"
          echo "üìã Release status: ${{ needs.create-release.result }}"
          echo "üöÄ Staging deployment: ${{ needs.deploy-staging.result }}"

          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"‚ùå Release '${{ needs.validate.outputs.version }}' failed!"}' \
          #   $SLACK_WEBHOOK_URL

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [notify]
    permissions:
      contents: read
    if: always()
    steps:
      - name: Cleanup artifacts
        run: |
          echo "üßπ Cleaning up temporary artifacts"

      - name: Summary
        run: |
          echo "## üìä Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Forced**: ${{ needs.validate.outputs.is_forced }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üê≥ Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`ghcr.io/${{ github.repository_owner }}/backend:${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`ghcr.io/${{ github.repository_owner }}/frontend:${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- ARQ Worker: \`ghcr.io/${{ github.repository_owner }}/arq-worker:${{ needs.validate.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
