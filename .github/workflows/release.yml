name: üöÄ Release & Publish

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  id-token: write # Required for OIDC signing

jobs:
  backend-test:
    name: üêç Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction
      - name: Run tests
        env:
          DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/test_db"
          REDIS_URL: "redis://localhost:6379"
        run: |
          source .venv/bin/activate
          pytest

  frontend-test:
    name: ‚öõÔ∏è Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: pnpm/action-setup@v4
        with:
          version: 10.12.4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - run: pnpm test

  publish:
    name: üê≥ Publish Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-test, frontend-test]
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4.1.1
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=,suffix=,format=short
      - uses: docker/build-push-action@v5.3.0
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: üéâ Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: publish
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          fail_on_unmatched_files: true

  validate:
    name: üõ°Ô∏è Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    steps:
      - name: Get version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $TAG == *"beta"* || $TAG == *"alpha"* || $TAG == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.1
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying version ${{ needs.validate.outputs.version }} to staging"
          # –ó–¥–µ—Å—å –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–µ–ø–ª–æ—è
          echo "‚úÖ Deployment to staging completed"
      - name: Run deployment tests
        run: |
          echo "üß™ Running deployment tests on staging"
          echo "‚úÖ Deployment tests passed"

  notify:
    name: üì¢ Notify Team
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, create-release, deploy-staging]
    if: always()
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success' && needs.deploy-staging.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "üì¶ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"
          echo "üöÄ Staging deployment: successful"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Slack/Discord/Email
      - name: Notify on failure
        if: needs.create-release.result == 'failure' || needs.deploy-staging.result == 'failure'
        run: |
          echo "‚ùå Release ${{ needs.validate.outputs.version }} failed!"
          echo "üîç Check the logs for details"
          echo "üìã Release status: ${{ needs.create-release.result }}"
          echo "üöÄ Staging deployment: ${{ needs.deploy-staging.result }}"
          
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [notify]
    if: always()
    steps:
      - name: Cleanup artifacts
        run: |
          echo "üßπ Cleaning up temporary artifacts"
      - name: Summary
        run: |
          echo "## üìä Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Docker-–æ–±—Ä–∞–∑—ã, —Ä–µ–ª–∏–∑ –∏ —Ç.–¥. 