name: üöÄ Simple CI (Single Developer)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: andr-235/fullstack-backend
  IMAGE_NAME_FRONTEND: andr-235/fullstack-frontend
  IMAGE_NAME_ARQ_WORKER: andr-235/fullstack-arq-worker

jobs:
  quick-test:
    name: üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Backend - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: üì¶ Backend - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: üß™ Backend - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        working-directory: ./backend
        run: |
          poetry install --no-interaction --no-root
          poetry run pytest tests/ -v --tb=short --maxfail=3

      - name: üü¢ Frontend - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.4

      - name: üì¶ Frontend - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "frontend/pnpm-lock.yaml"

      - name: üß™ Frontend - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm test --passWithNoTests --watchAll=false

  build-and-deploy:
    name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π
    needs: quick-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
        id: tag
        run: |
          # –°–æ–∑–¥–∞—ë–º —Ç–µ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∏ –∫–æ–º–º–∏—Ç–∞
          TAG="v$(date +%Y%m%d)-$(git rev-parse --short HEAD)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "–°–æ–∑–¥–∞–Ω —Ç–µ–≥: $TAG"

      - name: üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.tag.outputs.tag }}

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à arq-worker
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.arq
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ARQ_WORKER }}:${{ steps.tag.outputs.tag }}

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.tag.outputs.tag }}

      - name: üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.PRODUCTION_APP_DIR }}

            echo "üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

            echo "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
            docker compose -f docker-compose.prod.ip.yml pull

            echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
            docker compose -f docker-compose.prod.ip.yml up -d --build

            echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
            docker image prune -f || true

            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–µ–≥: ${{ steps.tag.outputs.tag }}"

      - name: üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: |
            üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑

            **–¢–µ–≥:** ${{ steps.tag.outputs.tag }}
            **–ö–æ–º–º–∏—Ç:** ${{ github.sha }}
            **–î–∞—Ç–∞:** $(date)

            –ò–∑–º–µ–Ω–µ–Ω–∏—è:
            - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –≤ production
            - –û–±–Ω–æ–≤–ª–µ–Ω—ã Docker –æ–±—Ä–∞–∑—ã
          draft: false
          prerelease: false
