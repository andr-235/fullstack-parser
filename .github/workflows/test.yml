name: üß™ Tests & Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # =============================================================================
  # BACKEND TESTS & QUALITY
  # =============================================================================
  backend-tests:
    name: üêç Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Black)
        working-directory: ./backend
        run: black --check .

      - name: üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ (isort)
        working-directory: ./backend
        run: isort --check-only .

      - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ (Ruff)
        working-directory: ./backend
        run: ruff check .

      - name: üîí –¢–∏–ø–∏–∑–∞—Ü–∏—è (mypy)
        working-directory: ./backend
        run: mypy .

      - name: üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Bandit)
        working-directory: ./backend
        run: bandit -r app/

      - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          JWT_SECRET_KEY: test-jwt-secret
        run: |
          pytest tests/ -v \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=80

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  # =============================================================================
  # FRONTEND TESTS & QUALITY
  # =============================================================================
  frontend-tests:
    name: ‚öõÔ∏è Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        working-directory: ./frontend
        run: pnpm install

      - name: üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Prettier)
        working-directory: ./frontend
        run: pnpm format:check

      - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ (ESLint)
        working-directory: ./frontend
        run: pnpm lint

      - name: üîí –¢–∏–ø–∏–∑–∞—Ü–∏—è (TypeScript)
        working-directory: ./frontend
        run: pnpm type-check

      - name: üîí –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        working-directory: ./frontend
        run: pnpm audit --prod

      - name: üß™ Unit —Ç–µ—Å—Ç—ã
        working-directory: ./frontend
        run: pnpm test -- --coverage --watchAll=false

      - name: üèóÔ∏è –¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏
        working-directory: ./frontend
        run: pnpm build

      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend

  # =============================================================================
  # INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        run: |
          cp env.example .env
          docker-compose up -d --build

      - name: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: üß™ Integration —Ç–µ—Å—Ç—ã
        run: |
          # API integration tests
          curl -f http://localhost:8000/docs
          curl -f http://localhost:8000/api/v1/health

          # Frontend integration tests
          curl -f http://localhost:3000

      - name: üìä –õ–æ–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if: failure()
        run: |
          docker-compose logs backend
          docker-compose logs frontend

      - name: üßπ –û—á–∏—Å—Ç–∫–∞
        if: always()
        run: docker-compose down -v

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üîç CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üìä CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: üê≥ Docker Security Scan
        run: |
          # Install trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Scan Dockerfiles
          trivy fs --format table ./backend/Dockerfile
          trivy fs --format table ./frontend/Dockerfile

  # =============================================================================
  # SUMMARY JOB
  # =============================================================================
  tests-summary:
    name: üìã Tests Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: always()

    steps:
      - name: üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        run: |
          echo "## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.security-scan.result == 'success' }}
        run: echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"

      - name: ‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã
        if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!"
          exit 1
