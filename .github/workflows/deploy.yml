name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deploy (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # BUILD DOCKER IMAGES
  # =============================================================================
  build:
    name: üèóÔ∏è Build Images
    runs-on: ubuntu-latest
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}
    
    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê –í—Ö–æ–¥ –≤ Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Backend –æ–±—Ä–∞–∑–∞
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Frontend –æ–±—Ä–∞–∑–∞
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
        run: |
          # Install trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Scan images
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.meta-backend.outputs.tags }}
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ steps.meta-frontend.outputs.tags }}

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: üì¶ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://staging.yourdomain.com
    
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    
    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üöÄ Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || '22' }}
          script: |
            cd ${{ secrets.STAGING_APP_DIR || '/opt/app-staging' }}
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Update environment
            export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
            
            # Deploy using script
            ./scripts/deploy.sh main --force
            
            # Health check
            timeout 60 bash -c 'until curl -f https://staging.yourdomain.com/health; do sleep 5; done'

      - name: üß™ Staging Tests
        run: |
          # Smoke tests –¥–ª—è staging
          curl -f https://staging.yourdomain.com/health
          curl -f https://staging.yourdomain.com/api/v1/health
          
      - name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ staging
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üéâ –î–µ–ø–ª–æ–π –≤ staging —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # DEPLOY TO PRODUCTION  
  # =============================================================================
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment:
      name: production
      url: https://yourdomain.com
    
    if: github.ref == 'refs/heads/main' && (github.event.inputs.environment == 'production' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üìã Pre-deploy checklist
        run: |
          echo "## üöÄ Production Deployment Checklist" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Staging –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Manual approval –ø–æ–ª—É—á–µ–Ω" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Image:** ${{ needs.build.outputs.backend-image }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Image:** ${{ needs.build.outputs.frontend-image }}" >> $GITHUB_STEP_SUMMARY

      - name: üíæ Backup Production Database
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || '22' }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR || '/opt/app' }}
            ./scripts/backup.sh auto

      - name: üöÄ Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || '22' }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR || '/opt/app' }}
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Update environment
            export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
            
            # Deploy
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              ./scripts/deploy.sh main --force
            else
              ./scripts/deploy.sh main
            fi

      - name: üß™ Production Health Check
        run: |
          # Extended health checks –¥–ª—è production
          echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          timeout 120 bash -c 'until curl -f https://yourdomain.com/health; do sleep 10; done'
          timeout 60 bash -c 'until curl -f https://yourdomain.com/api/v1/health; do sleep 5; done'
          
          # Performance check
          response_time=$(curl -o /dev/null -s -w '%{time_total}\n' https://yourdomain.com)
          echo "Response time: ${response_time}s"
          
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥"
          fi

      - name: üìä Post-deployment Monitoring
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || '22' }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR || '/opt/app' }}
            
            # Check container status
            docker-compose -f docker-compose.prod.yml ps
            
            # Check resource usage
            docker stats --no-stream
            
            # Check disk space
            df -h

      - name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ production
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üéâ **Production –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!**
            
            üìã **–î–µ—Ç–∞–ª–∏:**
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}
            - Author: ${{ github.actor }}
            - Images: 
              - Backend: ${{ needs.build.outputs.backend-image }}
              - Frontend: ${{ needs.build.outputs.frontend-image }}
            
            üîó **–°—Å—ã–ª–∫–∏:**
            - Site: https://yourdomain.com
            - API Docs: https://yourdomain.com/docs
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # ROLLBACK CAPABILITY
  # =============================================================================
  rollback:
    name: üîÑ Rollback
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production
    
    steps:
      - name: üì• Checkout –∫–æ–¥
        uses: actions/checkout@v4

      - name: üîÑ Rollback Production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || '22' }}
          script: |
            cd ${{ secrets.PRODUCTION_APP_DIR || '/opt/app' }}
            
            # Get previous commit
            previous_commit=$(git rev-parse HEAD~1)
            
            # Rollback to previous version
            git checkout $previous_commit
            ./scripts/deploy.sh main --force
            
            # Verify rollback
            timeout 60 bash -c 'until curl -f https://yourdomain.com/health; do sleep 5; done'

      - name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#deployments'
          text: |
            ‚ö†Ô∏è **–í—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π rollback production!**
            
            –ü—Ä–∏—á–∏–Ω–∞: –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ
            Commit: ${{ github.sha }}
            –û—Ç–∫–∞—á–µ–Ω –∫: –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–æ–º–º–∏—Ç—É
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 