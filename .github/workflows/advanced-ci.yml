name: üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}
      - name: üêç Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: üì¶ –ö—ç—à poetry (Backend)
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: üêç Install Poetry (Backend)
        if: matrix.component == 'backend'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥ Python (Backend)
        if: matrix.component == 'backend' && contains(github.event.pull_request.files.*.path, 'backend/')
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction

          echo "üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è Python..."

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å black..."
          poetry run black . || echo "‚ö†Ô∏è black –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üìù –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort..."
          poetry run isort . || echo "‚ö†Ô∏è isort –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å ruff --fix..."
          poetry run ruff check --fix . || echo "‚ö†Ô∏è ruff –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            echo "üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ–º–º–∏—Ç–∏–º..."
            git add .
            git commit -m "style: –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è backend
            
            - black: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
            - isort: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤  
            - ruff: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–æ–º
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ GitHub Actions"
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
            echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –∑–∞–ø—É—à–µ–Ω—ã"
          fi

          # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
          poetry run ruff check . || exit 1
          poetry run black --check . || exit 1
          poetry run isort --check-only . || exit 1
          poetry run mypy . || echo "‚ö†Ô∏è mypy –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏"

      - name: ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Backend
        if: matrix.component == 'backend' && !contains(github.event.pull_request.files.*.path, 'backend/')
        run: |
          echo "‚è≠Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ backend, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"

      - name: üü¢ Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: üì¶ –ö—ç—à pnpm store (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: üü¢ Install pnpm (Frontend)
        if: matrix.component == 'frontend'
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥ JavaScript/TypeScript (Frontend)
        if: matrix.component == 'frontend' && contains(github.event.pull_request.files.*.path, 'frontend/')
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile

          echo "üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è Frontend..."

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å ESLint --fix..."
          pnpm lint --fix || echo "‚ö†Ô∏è ESLint –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å Prettier..."
          pnpm format || echo "‚ö†Ô∏è Prettier –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            echo "üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ–º–º–∏—Ç–∏–º..."
            git add .
            git commit -m "style: –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è frontend
            
            - ESLint: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–æ–º
            - Prettier: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ GitHub Actions"
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
            echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –∑–∞–ø—É—à–µ–Ω—ã"
          fi

          # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
          pnpm lint || exit 1
          pnpm type-check || echo "‚ö†Ô∏è TypeScript –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏"

  lint-check:
    name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true
    permissions:
      contents: write
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: üêç Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: üì¶ –ö—ç—à poetry (Backend)
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: üêç Install Poetry (Backend)
        if: matrix.component == 'backend'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥ Python (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction

          echo "üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è Python..."

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å black..."
          poetry run black . || echo "‚ö†Ô∏è black –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üìù –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort..."
          poetry run isort . || echo "‚ö†Ô∏è isort –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å ruff --fix..."
          poetry run ruff check --fix . || echo "‚ö†Ô∏è ruff –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            echo "üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ–º–º–∏—Ç–∏–º..."
            git add .
            git commit -m "style: –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è backend (main)
            
            - black: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
            - isort: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤  
            - ruff: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–æ–º
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ GitHub Actions"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—à–∏—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            echo "üöÄ –ü—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ main..."
            if git push origin HEAD:main; then
              echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—à–µ–Ω—ã"
            else
              echo "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –ø—É—à–µ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å..."
              git pull --rebase origin main
              if git push origin HEAD:main; then
                echo "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã"
              else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—à"
              fi
            fi
          fi

          # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
          poetry run ruff check . || exit 1
          poetry run black --check . || exit 1
          poetry run isort --check-only . || exit 1
          poetry run mypy . || echo "‚ö†Ô∏è mypy –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏"

      - name: üü¢ Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: üì¶ –ö—ç—à pnpm store (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: üü¢ Install pnpm (Frontend)
        if: matrix.component == 'frontend'
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥ JavaScript/TypeScript (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile

          echo "üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è Frontend..."

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å ESLint --fix..."
          pnpm lint --fix || echo "‚ö†Ô∏è ESLint –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          echo "üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å Prettier..."
          pnpm format || echo "‚ö†Ô∏è Prettier –Ω–µ —Å–º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git diff --quiet; then
            echo "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            echo "üìù –ù–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ–º–º–∏—Ç–∏–º..."
            git add .
            git commit -m "style: –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è frontend (main)
            
            - ESLint: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–æ–º
            - Prettier: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
            
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ GitHub Actions"
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—à–∏—Ç—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            echo "üöÄ –ü—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ main..."
            if git push origin HEAD:main; then
              echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—à–µ–Ω—ã"
            else
              echo "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –ø—É—à–µ, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å..."
              git pull --rebase origin main
              if git push origin HEAD:main; then
                echo "‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã"
              else
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—à"
              fi
            fi
          fi

          # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–Ω—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
          pnpm lint || exit 1
          pnpm type-check || echo "‚ö†Ô∏è TypeScript –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏"

  test:
    name: üß™ –¢–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, lint-check]
    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            working-dir: ./backend
            cache-key: poetry-backend
          - component: frontend
            working-dir: ./frontend
            cache-key: pnpm-frontend
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
      - name: üêç Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: üì¶ –ö—ç—à poetry (Backend)
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ matrix.cache-key }}
          restore-keys: |
            poetry-
      - name: üêç Install Poetry (Backend)
        if: matrix.component == 'backend'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: üêç Poetry install & backend —Ç–µ—Å—Ç—ã
        if: matrix.component == 'backend'
        working-directory: ${{ matrix.working-dir }}
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction
          poetry run pytest tests/ -v --tb=short --cov=app --cov-report=xml
      - name: üü¢ Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: üì¶ –ö—ç—à pnpm store (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ matrix.cache-key }}
          restore-keys: |
            pnpm-store-
      - name: üü¢ Install pnpm (Frontend)
        if: matrix.component == 'frontend'
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: üü¢ pnpm install & frontend —Ç–µ—Å—Ç—ã
        if: matrix.component == 'frontend'
        working-directory: ${{ matrix.working-dir }}
        run: |
          pnpm install --frozen-lockfile
          pnpm test --passWithNoTests --watchAll=false --coverage
      - name: üìä Upload coverage (Backend)
        if: matrix.component == 'backend'
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: codecov-backend
      - name: üìä Upload coverage (Frontend)
        if: matrix.component == 'frontend'
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: codecov-frontend

  security:
    name: üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint, lint-check]
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
      - name: üêç Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: üì¶ –ö—ç—à poetry (Backend)
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: üêç Install Poetry (Backend)
        if: matrix.component == 'backend'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: üêç Poetry install & bandit (Backend)
        if: matrix.component == 'backend'
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction
          poetry run bandit -r app/ -f json -o bandit-report.json || true
      - name: üü¢ Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: üì¶ –ö—ç—à pnpm store (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: üü¢ Install pnpm (Frontend)
        if: matrix.component == 'frontend'
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: üü¢ pnpm install & npm audit (Frontend)
        if: matrix.component == 'frontend'
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm audit --audit-level moderate || true

  deploy:
    name: üöÄ –î–µ–ø–ª–æ–π
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    timeout-minutes: 30
    environment: production
    permissions:
      contents: read
      packages: read
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
      - name: üì¶ Restore Docker cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-cache-${{ runner.os }}-
      - name: üèóÔ∏è Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      - name: üèóÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        run: |
          set -e
          echo "üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–æ–≤..."

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
          echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏..."

          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
          BACKEND_CHANGED=false
          FRONTEND_CHANGED=false
          ARQ_WORKER_CHANGED=false

          if [[ -n "$CHANGED_FILES" ]]; then
            echo "üìù –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
            echo "$CHANGED_FILES"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ backend
            if echo "$CHANGED_FILES" | grep -q "^backend/"; then
              BACKEND_CHANGED=true
              echo "üêç Backend –∏–∑–º–µ–Ω–µ–Ω - –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend
            if echo "$CHANGED_FILES" | grep -q "^frontend/"; then
              FRONTEND_CHANGED=true
              echo "üü¢ Frontend –∏–∑–º–µ–Ω–µ–Ω - –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω"
            fi
            
            # ARQ worker –∑–∞–≤–∏—Å–∏—Ç –æ—Ç backend
            if [[ "$BACKEND_CHANGED" == "true" ]]; then
              ARQ_WORKER_CHANGED=true
              echo "‚öôÔ∏è ARQ Worker –∏–∑–º–µ–Ω–µ–Ω - –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω"
            fi
          else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–∑—ã"
            BACKEND_CHANGED=true
            FRONTEND_CHANGED=true
            ARQ_WORKER_CHANGED=true
          fi

          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
          echo "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞..."
          mkdir -p /tmp/.buildx-cache

          # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã
          if [[ "$BACKEND_CHANGED" == "true" ]]; then
            echo "üêç –°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
            docker buildx build \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --tag fullstack-backend:latest \
              --load \
              --parallel \
              ./backend &
          else
            echo "‚è≠Ô∏è Backend –Ω–µ –∏–∑–º–µ–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
          fi

          if [[ "$FRONTEND_CHANGED" == "true" ]]; then
            echo "üü¢ –°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
            docker buildx build \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --tag fullstack-frontend:latest \
              --load \
              --parallel \
              ./frontend &
          else
            echo "‚è≠Ô∏è Frontend –Ω–µ –∏–∑–º–µ–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
          fi

          if [[ "$ARQ_WORKER_CHANGED" == "true" ]]; then
            echo "‚öôÔ∏è –°–±–æ—Ä–∫–∞ arq-worker –æ–±—Ä–∞–∑–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
            docker buildx build \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --tag fullstack-arq-worker:latest \
              --file ./backend/Dockerfile.arq \
              --load \
              --parallel \
              ./backend &
          else
            echo "‚è≠Ô∏è ARQ Worker –Ω–µ –∏–∑–º–µ–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É"
          fi

          # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–±–æ—Ä–æ–∫
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤..."
          wait

          # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞..."
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

          echo "‚úÖ –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
          echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏:"
          echo "   Backend: $BACKEND_CHANGED"
          echo "   Frontend: $FRONTEND_CHANGED"
          echo "   ARQ Worker: $ARQ_WORKER_CHANGED"

      - name: üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        run: |
          set -e
          echo "üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ self-hosted —Ä–∞–Ω–Ω–µ—Ä–µ..."

          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          cd /opt/app

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          if [[ ! -f "docker-compose.prod.ip.yml" ]]; then
            echo "‚ùå –û—à–∏–±–∫–∞: docker-compose.prod.ip.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.prod
          if [[ ! -f ".env.prod" ]]; then
            echo "‚ùå –û—à–∏–±–∫–∞: .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 80
          echo "üõë –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ 80..."
          sudo fuser -k 80/tcp || true
          sudo fuser -k 443/tcp || true

          # –ñ–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
          echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ 80..."
          while sudo netstat -tlnp | grep -q ":80 "; do
            echo "–ü–æ—Ä—Ç 80 –≤—Å—ë –µ—â—ë –∑–∞–Ω—è—Ç, –∂–¥—ë–º..."
            sleep 2
          done
          echo "‚úÖ –ü–æ—Ä—Ç 80 —Å–≤–æ–±–æ–¥–µ–Ω"

          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker compose -f docker-compose.prod.ip.yml down --timeout 30 || true

          # –£–¥–∞–ª—è–µ–º —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker ps -a --filter "name=fullstack" --format "table {{.Names}}\t{{.Status}}" | grep -v "fullstack_prod_" | grep "fullstack" | awk '{print $1}' | xargs -r docker stop || true
          docker ps -a --filter "name=fullstack" --format "table {{.Names}}\t{{.Status}}" | grep -v "fullstack_prod_" | grep "fullstack" | awk '{print $1}' | xargs -r docker rm || true

          echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          docker compose -f docker-compose.prod.ip.yml up -d --remove-orphans

          echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
          docker image prune -f || true

          # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –∏–∑ registry, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          docker rmi ghcr.io/andr-235/fullstack-backend:latest || true
          docker rmi ghcr.io/andr-235/fullstack-frontend:latest || true
          docker rmi ghcr.io/andr-235/fullstack-arq-worker:latest || true

          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!"
      - name: üìä Health check
        run: |
          echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
          sleep 30

          # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          cd /opt/app

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –∑–¥–æ—Ä–æ–≤—ã
          echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
          docker compose -f docker-compose.prod.ip.yml ps

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
          services=("postgres" "redis" "backend" "frontend" "nginx")
          for service in "${services[@]}"; do
            if docker compose -f docker-compose.prod.ip.yml ps $service | grep -q "Up"; then
              echo "‚úÖ $service –∑–∞–ø—É—â–µ–Ω"
            else
              echo "‚ùå $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
              docker compose -f docker-compose.prod.ip.yml logs $service --tail=20
              exit 1
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f -k https://localhost/health > /dev/null 2>&1; then
              echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
              break
            else
              echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ..."
              sleep 10
              ((attempt++))
            fi
          done

          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
            echo "üìã –õ–æ–≥–∏ nginx:"
            docker compose -f docker-compose.prod.ip.yml logs nginx --tail=20
            exit 1
          fi
