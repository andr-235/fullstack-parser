name: 🚀 Продвинутый CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: 🔍 Линтинг и проверки
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: 📦 Кэш poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: 🐍 Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: 🐍 Poetry install & линтинг
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction
          poetry run ruff check .
          poetry run black --check .
          poetry run isort --check-only .
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Кэш pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: 🟢 Install pnpm
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: 🟢 pnpm install & TypeScript линтинг
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm lint
          pnpm type-check

  test:
    name: 🧪 Тесты
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: 📦 Кэш poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: 🐍 Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: 🐍 Poetry install & backend тесты
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction
          poetry run pytest tests/ -v --tb=short --cov=app --cov-report=xml
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Кэш pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: 🟢 Install pnpm
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: 🟢 pnpm install & frontend тесты
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm test --passWithNoTests --watchAll=false --coverage
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml,./frontend/coverage/lcov.info
          flags: backend,frontend
          name: codecov-umbrella

  security:
    name: 🔒 Безопасность
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: 📦 Кэш poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            poetry-
      - name: 🐍 Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
      - name: 🐍 Poetry install & bandit
        working-directory: ./backend
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install --no-interaction
          poetry run bandit -r app/ -f json -o bandit-report.json || true
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Кэш pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
      - name: 🟢 Install pnpm
        run: |
          npm install -g pnpm@10.12.4
          pnpm --version
      - name: 🟢 pnpm install & npm audit
        working-directory: ./frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm audit --audit-level moderate || true

  build:
    name: 🏗️ Сборка образов
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
      - name: 🔐 Логин в GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🏗️ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗️ Сборка и пуш backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.run_number }}

      - name: 🏗️ Сборка и пуш frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.run_number }}

      - name: 🏗️ Сборка и пуш arq worker
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.arq
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/arq-worker:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/arq-worker:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/arq-worker:${{ github.run_number }}

  deploy:
    name: 🚀 Деплой
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production
    permissions:
      contents: read
      packages: read
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4
      - name: 🔐 Логин в GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.GHCR_USERNAME }} --password-stdin
      - name: 🔑 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      - name: 🚀 Деплой на сервер
        run: |
          set -e
          echo "🚀 Подключение к серверу..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} <<EOF
          cd ${{ secrets.PRODUCTION_APP_DIR }}
          echo "🚀 Запуск сервисов..."
          docker compose -f docker-compose.prod.ip.yml up -d --build --pull always
          echo "🧹 Очистка..."
          docker image prune -f || true
          echo "✅ Деплой завершён!"
          EOF
      - name: 📊 Health check
        run: |
          sleep 30
          curl -f ${{ secrets.HEALTH_CHECK_URL }} || exit 1
