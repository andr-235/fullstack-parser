name: üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üêç Python –ª–∏–Ω—Ç–∏–Ω–≥
        working-directory: ./backend
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
          poetry run ruff check .
          poetry run black --check .
          poetry run isort --check-only .

      - name: üü¢ Setup Node.js, pnpm and cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üü¢ TypeScript –ª–∏–Ω—Ç–∏–Ω–≥
        working-directory: ./frontend
        run: |
          npm install -g pnpm@10.12.4
          pnpm install --frozen-lockfile
          pnpm lint
          pnpm type-check

  test:
    name: üß™ –¢–µ—Å—Ç—ã
    runs-on: self-hosted
    timeout-minutes: 15
    needs: lint

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js, pnpm and cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üêç Backend —Ç–µ—Å—Ç—ã
        working-directory: ./backend
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
          poetry run pytest tests/ -v --tb=short --cov=app --cov-report=xml

      - name: üü¢ Frontend —Ç–µ—Å—Ç—ã
        working-directory: ./frontend
        run: |
          npm install -g pnpm@10.12.4
          pnpm install --frozen-lockfile
          pnpm test --passWithNoTests --watchAll=false --coverage

      - name: üìä Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml,./frontend/coverage/lcov.info
          flags: backend,frontend
          name: codecov-umbrella

  security:
    name: üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    runs-on: self-hosted
    timeout-minutes: 10
    needs: lint

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js, pnpm and cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: üêç Python security (bandit)
        working-directory: ./backend
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry install --no-interaction
          poetry run bandit -r app/ -f json -o bandit-report.json || true

      - name: üü¢ JavaScript security (npm audit)
        working-directory: ./frontend
        run: |
          npm install -g pnpm@10.12.4
          pnpm install --frozen-lockfile
          pnpm audit --audit-level moderate || true

  build:
    name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –ø—É—à frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: üöÄ –î–µ–ø–ª–æ–π
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: self-hosted
    timeout-minutes: 15
    environment: production

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîê –õ–æ–≥–∏–Ω –≤ GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: üöÄ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        run: |
          set -e
          cd ${{ secrets.PRODUCTION_APP_DIR }}

          echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
          docker compose -f docker-compose.prod.ip.yml up -d --build --pull always

          echo "üßπ –û—á–∏—Å—Ç–∫–∞..."
          docker image prune -f || true

          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω!"

      - name: üìä Health check
        run: |
          sleep 30
          curl -f ${{ secrets.HEALTH_CHECK_URL }} || exit 1

  notify:
    name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    needs: [deploy]
    if: always()
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: üì¢ Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#deployments"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
