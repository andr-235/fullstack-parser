.PHONY: feature release hotfix cleanup sync release-create release-deploy release-rollback dev test build deploy status logs clean branch commit push pr

# üöÄ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
dev: ## –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
	docker compose up -d
	@echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã! Frontend: http://localhost:3000, Backend: http://localhost:8000"

test: ## –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
	@echo "üß™ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	@cd backend && poetry run pytest tests/ -v --tb=short --maxfail=3
	@cd frontend && pnpm test --passWithNoTests --watchAll=false
	@echo "‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!"

build: ## –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
	@echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
	docker compose build
	@echo "‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã!"

deploy: ## –î–µ–ø–ª–æ–π –≤ production
	@echo "üöÄ –î–µ–ø–ª–æ–π –≤ production..."
	@read -p "–¢—ã —É–≤–µ—Ä–µ–Ω? –≠—Ç–æ –∑–∞–¥–µ–ø–ª–æ–∏—Ç –≤ production! (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		git push origin main; \
		echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω! –°–ª–µ–¥–∏ –∑–∞ CI/CD pipeline"; \
	else \
		echo "‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω—ë–Ω"; \
	fi

status: ## –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
	docker compose ps
	@echo ""
	@echo "üîç –õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫:"
	docker compose logs --tail=10 --no-color | grep -i error || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
	@echo "üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
	docker compose logs -f

clean: ## –û—á–∏—Å—Ç–∫–∞
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
	docker compose down
	docker system prune -f
	docker image prune -f
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

# üîß Git –∫–æ–º–∞–Ω–¥—ã
branch: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
	@read -p "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–±–µ–∑ feature/): " name; \
	git checkout -b feature/$$name
	@echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ç–∫–∞ feature/$$name"

commit: ## –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
	@read -p "–¢–∏–ø –∫–æ–º–º–∏—Ç–∞ (feat/fix/docs/style/refactor/test/chore): " type; \
	read -p "–û–ø–∏—Å–∞–Ω–∏–µ: " desc; \
	git add . && git commit -m "$$type: $$desc"
	@echo "‚úÖ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω!"

push: ## –ü—É—à –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	@git push origin HEAD
	@echo "‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"

pr: ## –°–æ–∑–¥–∞—Ç—å Pull Request
	@echo "üîó –°–æ–∑–¥–∞–Ω–∏–µ Pull Request..."
	@gh pr create --fill
	@echo "‚úÖ Pull Request —Å–æ–∑–¥–∞–Ω!"



# üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
feature:
	@read -p "Feature name: " name; \
	git checkout develop && \
	git pull origin develop && \
	git checkout -b feature/$$name && \
	echo "‚úÖ Created feature/$$name from develop"

release:
	@read -p "Version (e.g., 1.1.0): " version; \
	git checkout develop && \
	git pull origin develop && \
	git checkout -b release/v$$version && \
	echo "‚úÖ Created release/v$$version from develop"

hotfix:
	@read -p "Hotfix name: " name; \
	git checkout main && \
	git pull origin main && \
	git checkout -b hotfix/$$name && \
	echo "‚úÖ Created hotfix/$$name from main"

cleanup:
	@git branch --merged | grep -v "\*\|main\|develop" | xargs -n 1 git branch -d
	@git remote prune origin
	@echo "‚úÖ Cleaned up merged branches"

sync:
	@git checkout main && git pull origin main
	@git checkout develop && git pull origin develop
	@echo "‚úÖ Synced main and develop"

# üöÄ Release commands
release-create:
	@echo "üöÄ Creating new release..."
	@./scripts/create-release.sh

release-deploy:
	@read -p "Version to deploy (e.g., 1.2.3): " version; \
	echo "üöÄ Deploying version $$version..."; \
	docker-compose -f docker-compose.prod.ip.yml pull && \
	docker-compose -f docker-compose.prod.ip.yml up -d --build

release-rollback:
	@echo "üîÑ Rolling back release..."
	@./scripts/rollback-release.sh

release-status:
	@echo "üìä Current release status:"; \
	echo "Backend version: $$(grep '^version = ' backend/pyproject.toml | sed 's/version = "\(.*\)"/\1/')"; \
	echo "Frontend version: $$(grep '"version":' frontend/package.json | sed 's/.*"version": "\(.*\)".*/\1/')"; \
	echo "Latest tag: $$(git describe --tags --abbrev=0 2>/dev/null || echo 'No tags found')"

# üìã –°–ø—Ä–∞–≤–∫–∞
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "üöÄ Fullstack Parser - Makefile –∫–æ–º–∞–Ω–¥—ã"
	@echo ""
	@echo "üéØ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ–¥–∏–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫):"
	@echo "  make dev          - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
	@echo "  make test         - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"
	@echo "  make build        - –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
	@echo "  make deploy       - –î–µ–ø–ª–æ–π –≤ production"
	@echo "  make status       - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make logs         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
	@echo "  make clean        - –û—á–∏—Å—Ç–∫–∞ Docker"
	@echo ""
	@echo "üîß Git –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make branch       - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É"
	@echo "  make commit       - –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"
	@echo "  make push         - –ü—É—à –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
	@echo "  make pr           - –°–æ–∑–¥–∞—Ç—å Pull Request"

	@echo ""
	@echo "üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∫–æ–º–∞–Ω–¥–∞):"
	@echo "  make feature      - –°–æ–∑–¥–∞—Ç—å feature –≤–µ—Ç–∫—É"
	@echo "  make release      - –°–æ–∑–¥–∞—Ç—å release –≤–µ—Ç–∫—É"
	@echo "  make hotfix       - –°–æ–∑–¥–∞—Ç—å hotfix –≤–µ—Ç–∫—É"
	@echo "  make cleanup      - –û—á–∏—Å—Ç–∫–∞ –≤–µ—Ç–æ–∫"
	@echo "  make sync         - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è main/develop"
	@echo ""
	@echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
	@echo "  docs/SINGLE_DEV_CICD.md - –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π CI/CD"
	@echo "  README.md - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è" 