'use client'

import React, { useState } from 'react'
import {
  useKeywords,
  useCreateKeyword,
  useUpdateKeyword,
  useDeleteKeyword,
  useInfiniteKeywords,
  useUpdateKeywordsStats,
  useTotalMatches,
} from '@/entities/keyword'
import {
  PageHeader,
  StatsGrid,
  StatsCard,
  DataTable,
  LoadingState,
  EmptyState,
  ErrorState,
  SearchInput,
  FilterPanel,
  useSearch,
  useFilters,
  PageContainer,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/shared/ui'

import { Button } from '@/shared/ui'
import { Input } from '@/shared/ui'
import { Switch } from '@/shared/ui'
import { Badge } from '@/shared/ui'
import { LoadingSpinner } from '@/shared/ui'
import {
  Plus,
  Trash2,
  Search,
  Check,
  X,
  Hash,
  Target,
  MessageSquare,
  Activity,
} from 'lucide-react'
import { toast } from 'react-hot-toast'
import type { KeywordResponse, KeywordUpdate } from '@/shared/types'
import { useDebounce } from '@/shared/hooks'
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from '@/shared/ui'
import { Label } from '@/shared/ui'
import { useKeywordCategories } from '@/entities/keyword'
import { cn } from '@/shared/lib/utils'
import UploadKeywordsModal from './UploadKeywordsModal'



export default function KeywordsPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [newKeyword, setNewKeyword] = useState('')
  const [newKeywordCategory, setNewKeywordCategory] = useState('')
  const [activeOnly, setActiveOnly] = useState(true)
  const [category, setCategory] = useState<string>('')
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(1000) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è DataTable
  const columns = [
    {
      key: 'word' as keyof KeywordResponse,
      title: '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',
      sortable: true,
      width: '300px',
      render: (value: string, record: KeywordResponse) => (
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
            <Hash className="h-4 w-4 text-white" />
          </div>
          <span className="font-medium text-foreground cursor-pointer hover:text-primary transition-colors">
            {value}
          </span>
        </div>
      ),
    },
    {
      key: 'category' as keyof KeywordResponse,
      title: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      render: (value: string) => (
        <span className="text-muted-foreground text-sm">
          {value || '‚Äî'}
        </span>
      ),
    },
    {
      key: 'total_matches' as keyof KeywordResponse,
      title: '–ù–∞–π–¥–µ–Ω–æ',
      sortable: true,
      render: (value: number) => (
        <div className="flex items-center gap-2">
          <MessageSquare className="h-4 w-4 text-primary" />
          <span className="font-semibold text-primary">
            {value}
          </span>
        </div>
      ),
    },
    {
      key: 'is_active' as keyof KeywordResponse,
      title: '–°—Ç–∞—Ç—É—Å',
      render: (value: boolean) => (
        <Badge
          variant={value ? 'default' : 'secondary'}
        >
          {value ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}
        </Badge>
      ),
    },
    {
      key: 'actions' as keyof KeywordResponse,
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      render: (value: any, record: KeywordResponse) => (
        <Button
          variant="ghost"
          size="icon"
          onClick={() => handleDeleteKeyword(record.id)}
          disabled={deleteKeywordMutation.isPending}
          className="hover:bg-destructive/10 text-destructive hover:text-destructive transition-all duration-200 hover:scale-110"
        >
          <Trash2 className="h-4 w-4" />
        </Button>
      ),
    },
  ]

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const { data, isLoading, error, refetch } = useKeywords({
    q: searchTerm,
    active_only: activeOnly,
    category: category || undefined,
    page: currentPage,
    size: itemsPerPage,
  })

  const keywords = data?.items || []
  const total = data?.total || 0
  const active = keywords.filter((k: any) => k.is_active).length || 0

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const { data: totalMatchesData } = useTotalMatches()
  const totalMatches = totalMatchesData?.total_matches || 0

  // –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  React.useEffect(() => {
    setCurrentPage(1)
  }, [searchTerm, activeOnly, category])

  const totalPages = Math.ceil(total / itemsPerPage)

  const { data: categoriesData } = useKeywordCategories()
  const createKeywordMutation = useCreateKeyword()
  const updateKeywordMutation = useUpdateKeyword()
  const deleteKeywordMutation = useDeleteKeyword()
  const updateStatsMutation = useUpdateKeywordsStats()

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  React.useEffect(() => {
    updateStatsMutation.mutate()
  }, [])

  const handleAddKeyword = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (!newKeyword.trim()) return
    createKeywordMutation.mutate(
      {
        word: newKeyword,
        is_active: true,
        is_case_sensitive: false,
        is_whole_word: false,
        category: newKeywordCategory.trim() || '',
      },
      {
        onSuccess: () => {
          setNewKeyword('')
          setNewKeywordCategory('')
          toast.success('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üéØ')
        },
      }
    )
  }

  const handleDeleteKeyword = (id: number) => {
    if (window.confirm('–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ?')) {
      deleteKeywordMutation.mutate(id, {
        onSuccess: () => toast.success('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ! üóëÔ∏è'),
      })
    }
  }

  const handleUpdateKeyword = (
    id: number,
    data: KeywordUpdate,
    callbacks?: { onSuccess?: () => void; onError?: () => void }
  ) => {
    if (callbacks) {
      updateKeywordMutation.mutate({ keywordId: id, data }, callbacks)
    } else {
      updateKeywordMutation.mutateAsync({ keywordId: id, data })
    }
  }

  return (
    <PageContainer background="gradient">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <PageHeader
        title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
        description="–î–æ–±–∞–≤–ª—è–π—Ç–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"
        icon={Target}
      />

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <StatsGrid
        stats={[
          {
            title: "–í—Å–µ–≥–æ —Å–ª–æ–≤",
            value: total,
            icon: Hash,
            color: "purple"
          },
          {
            title: "–ê–∫—Ç–∏–≤–Ω—ã—Ö",
            value: active,
            icon: Activity,
            color: "green"
          },
          {
            title: "–ù–∞–π–¥–µ–Ω–æ",
            value: totalMatches,
            icon: MessageSquare,
            color: "blue"
          }
        ]}
      />

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <Card className="border-border bg-card shadow-lg">
        <CardHeader className="pb-4">
          <CardTitle className="text-lg font-semibold text-card-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="flex flex-col lg:flex-row gap-4">
            <div className="flex-1">
              <SearchInput
                value={searchTerm}
                onChange={setSearchTerm}
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º..."
              />
            </div>

            <div className="flex items-center space-x-4">
              <label className="flex items-center space-x-2 text-sm text-muted-foreground">
                <Switch
                  checked={activeOnly}
                  onCheckedChange={setActiveOnly}
                  className="data-[state=checked]:bg-primary"
                />
                <span>–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ</span>
              </label>

              <Select
                value={category || 'all'}
                onValueChange={(v) => setCategory(v === 'all' ? '' : v)}
              >
                <SelectTrigger className="w-40 border-input bg-background text-foreground">
                  <SelectValue placeholder="–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" />
                </SelectTrigger>
                <SelectContent className="bg-popover border-border">
                  <SelectItem
                    value="all"
                    className="text-popover-foreground hover:bg-accent"
                  >
                    –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  </SelectItem>
                  {(categoriesData || []).map((cat: string) => (
                    <SelectItem
                      key={cat}
                      value={cat}
                      className="text-popover-foreground hover:bg-accent"
                    >
                      {cat}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <UploadKeywordsModal onSuccess={() => refetch()} />
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          <form onSubmit={handleAddKeyword} className="flex gap-2">
            <Input
              placeholder="–ù–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
              value={newKeyword}
              onChange={(e) => setNewKeyword(e.target.value)}
              disabled={createKeywordMutation.isPending}
              className="flex-1"
            />
            <Input
              placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={newKeywordCategory}
              onChange={(e) => setNewKeywordCategory(e.target.value)}
              disabled={createKeywordMutation.isPending}
              className="w-40"
            />
            <Button
              type="submit"
              disabled={createKeywordMutation.isPending}
              className="px-6 transition-all duration-200 hover:scale-105"
            >
              {createKeywordMutation.isPending ? (
                <LoadingSpinner className="h-4 w-4" />
              ) : (
                <Plus className="h-4 w-4" />
              )}
              <span className="ml-2">–î–æ–±–∞–≤–∏—Ç—å</span>
            </Button>
          </form>
        </CardContent>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ */}
      {error ? (
        <ErrorState
          title="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
          message={(error as Error)?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞'}
          fullHeight={false}
        />
      ) : (
        <DataTable
          data={keywords}
          columns={columns}
          loading={isLoading}
          emptyText="–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
          sortConfig={{
            key: 'total_matches' as keyof KeywordResponse,
            direction: 'desc',
            onSort: (key, direction) => {
              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              console.log('Sort by:', key, direction)
            },
          }}
        />
      )}
    </PageContainer>
  )
}
