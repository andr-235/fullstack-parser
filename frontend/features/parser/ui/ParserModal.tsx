'use client'

import { useState } from 'react'

import { Play, Settings } from 'lucide-react'

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/shared/ui'
import { Button } from '@/shared/ui'
import { Input } from '@/shared/ui'
import { Label } from '@/shared/ui'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui'
import { Switch } from '@/shared/ui'

import type { VKGroup } from '@/entities/groups'
import type { ParserStats } from '@/entities/parser'

interface ParserModalProps {
 groups?: VKGroup[]
 stats?: ParserStats | null
 onStartParsing: (config: {
  groupId?: number | undefined
  parseAllGroups: boolean
  maxPosts: number
  forceReparse: boolean
 }) => void
 isOpen?: boolean
 onOpenChange?: (open: boolean) => void
 trigger?: React.ReactNode
}

export function ParserModal({
 groups = [],
 stats,
 onStartParsing,
 isOpen,
 onOpenChange,
 trigger
}: ParserModalProps) {
 const [selectedGroupId, setSelectedGroupId] = useState<string>('')
 const [maxPosts, setMaxPosts] = useState<number>(100)
 const [forceReparse, setForceReparse] = useState<boolean>(false)
 const [parseAllGroups, setParseAllGroups] = useState<boolean>(false)

 const handleStartParsing = () => {
  if (!parseAllGroups && !selectedGroupId) {
   alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø')
   return
  }

  // –õ–∏–º–∏—Ç—ã –≥—Ä—É–ø–ø —É–±—Ä–∞–Ω—ã - –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø

  onStartParsing({
   groupId: parseAllGroups ? undefined : Number(selectedGroupId),
   parseAllGroups,
   maxPosts,
   forceReparse,
  })

  // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  setSelectedGroupId('')
  setParseAllGroups(false)
  onOpenChange?.(false)
 }

 const activeGroups = groups.filter(group => group.is_active)

 return (
  <Dialog open={isOpen ?? false} onOpenChange={onOpenChange ?? (() => { })}>
   {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}
   <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
    <DialogHeader>
     <DialogTitle className="flex items-center gap-2">
      <Settings className="h-5 w-5" />
      –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
     </DialogTitle>
    </DialogHeader>

    <div className="space-y-6 py-4">
     {/* –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
     <div className="space-y-4">
      <div className="flex items-center justify-between">
       <div className="space-y-1">
        <Label className="text-base font-medium">–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞</Label>
        <p className="text-sm text-muted-foreground">
         –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –∏–ª–∏ –ø–∞—Ä—Å–∏—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        </p>
       </div>
       <div className="flex items-center space-x-2">
        <Label htmlFor="parse-all-modal" className="text-sm">–í—Å–µ –≥—Ä—É–ø–ø—ã</Label>
        <Switch
         id="parse-all-modal"
         checked={parseAllGroups}
         onCheckedChange={(checked) => {
          setParseAllGroups(checked)
          if (checked) {
           setSelectedGroupId('') // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
          }
         }}
        />
       </div>
      </div>

      {/* –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã */}
      <div className="space-y-2">
       <Label htmlFor="group-select-modal" className="text-base font-medium">–ì—Ä—É–ø–ø–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</Label>
       <Select
        value={selectedGroupId}
        onValueChange={setSelectedGroupId}
        disabled={parseAllGroups}
       >
        <SelectTrigger>
         <SelectValue placeholder={parseAllGroups ? "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã" : "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É"} />
        </SelectTrigger>
        <SelectContent>
         {activeGroups.map((group) => (
          <SelectItem key={group.id} value={group.id.toString()}>
           {group.name} ({group.screen_name})
          </SelectItem>
         ))}
        </SelectContent>
       </Select>
       {activeGroups.length === 0 && (
        <p className="text-sm text-muted-foreground">
         –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–∑–¥–µ–ª–µ &quot;–ì—Ä—É–ø–ø—ã&quot;.
        </p>
       )}
       {parseAllGroups && (
        <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-950/50 dark:border-blue-800">
         <p className="text-sm text-blue-800 dark:text-blue-200">
          üìä –ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ <strong>{activeGroups.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø</strong>
         </p>
         {/* –õ–∏–º–∏—Ç—ã –≥—Ä—É–ø–ø —É–±—Ä–∞–Ω—ã - –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø */}
         {/* –õ–∏–º–∏—Ç—ã –≥—Ä—É–ø–ø —É–±—Ä–∞–Ω—ã - –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø */}
        </div>
       )}
      </div>
     </div>

     {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
     <div className="grid gap-4 md:grid-cols-2">
      <div className="space-y-2">
       <Label htmlFor="max-posts-modal" className="text-base font-medium">–ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—É</Label>
       <Input
        id="max-posts-modal"
        type="number"
        min="1"
        max="1000"
        value={maxPosts}
        onChange={(e) => setMaxPosts(Number(e.target.value))}
       />
       <p className="text-xs text-muted-foreground">
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 50-200 –ø–æ—Å—Ç–æ–≤
       </p>
      </div>

      <div className="space-y-2">
       <Label htmlFor="force-reparse-modal" className="text-base font-medium">–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤—Ç–æ—Ä</Label>
       <div className="flex items-center space-x-2 pt-2">
        <Switch
         id="force-reparse-modal"
         checked={forceReparse}
         onCheckedChange={setForceReparse}
        />
        <span className="text-sm text-muted-foreground">
         –ü–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        </span>
       </div>
      </div>
     </div>

     {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö */}
     <div className="grid gap-4 md:grid-cols-2">
      <div className="space-y-2">
       <Label className="text-base font-medium">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å</Label>
       <p className="text-sm text-muted-foreground">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 50-100</p>
      </div>
      <div className="space-y-2">
       <Label className="text-base font-medium">–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏</Label>
       <p className="text-sm text-muted-foreground">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: 1-3 —Å–µ–∫</p>
      </div>
      <div className="space-y-2">
       <Label className="text-base font-medium">–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ</Label>
       <p className="text-sm text-muted-foreground">–ú–∞–∫—Å–∏–º—É–º: 3</p>
      </div>
      <div className="space-y-2">
       <Label className="text-base font-medium">–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞</Label>
       <p className="text-sm text-muted-foreground">–ú–∞–∫—Å–∏–º—É–º: 30 —Å–µ–∫</p>
      </div>
     </div>

     {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ */}
     <div className="pt-4 border-t">
      <Button
       onClick={handleStartParsing}
       disabled={(!parseAllGroups && !selectedGroupId) || activeGroups.length === 0}
       className="w-full gap-2"
       size="lg"
      >
       <Play className="h-4 w-4" />
       {parseAllGroups
        ? `–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –≥—Ä—É–ø–ø (${activeGroups.length})`
        : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã'
       }
      </Button>
     </div>

     {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö */}
     {activeGroups.length > 0 && (
      <div className="text-sm text-muted-foreground">
       <p>–î–æ—Å—Ç—É–ø–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {activeGroups.length}</p>
       <p>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</p>
      </div>
     )}
    </div>
   </DialogContent>
  </Dialog>
 )
}
