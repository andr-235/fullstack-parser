#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const glob = require('glob')

// FSD —Å–ª–æ–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
const FSD_LAYERS = [
  'app',
  'pages',
  'widgets',
  'features',
  'entities',
  'shared',
  'processes',
]

// –ü—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
const IMPORT_RULES = {
  app: ['pages', 'widgets', 'features', 'entities', 'shared', 'processes'],
  pages: ['widgets', 'features', 'entities', 'shared', 'processes'],
  widgets: ['features', 'entities', 'shared', 'processes'],
  features: ['entities', 'shared', 'processes'],
  entities: ['shared', 'processes'],
  shared: ['processes'],
  processes: [],
}

// –ù–∞–π—Ç–∏ –≤—Å–µ TypeScript/JavaScript —Ñ–∞–π–ª—ã
function findFiles(pattern) {
  return glob.sync(pattern, {
    ignore: ['node_modules/**', '.next/**', 'dist/**'],
  })
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–π —Ñ–∞–π–ª–∞
function getFileLayer(filePath) {
  const relativePath = path.relative(process.cwd(), filePath)
  const segments = relativePath.split(path.sep)

  for (const layer of FSD_LAYERS) {
    if (segments.includes(layer)) {
      return layer
    }
  }

  return null
}

// –ò–∑–≤–ª–µ—á—å –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
function extractImports(filePath) {
  const content = fs.readFileSync(filePath, 'utf8')
  const importRegex = /import\s+.*?from\s+['"]([^'"]+)['"]/g
  const imports = []

  let match
  while ((match = importRegex.exec(content)) !== null) {
    const importPath = match[1]

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
    if (
      !importPath.startsWith('@/') &&
      !importPath.startsWith('./') &&
      !importPath.startsWith('../')
    ) {
      continue
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–π –∏–º–ø–æ—Ä—Ç–∞
    let importLayer = null
    if (importPath.startsWith('@/')) {
      const segments = importPath.split('/')
      for (const layer of FSD_LAYERS) {
        if (segments.includes(layer)) {
          importLayer = layer
          break
        }
      }
    }

    imports.push({
      path: importPath,
      layer: importLayer,
    })
  }

  return imports
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
function checkImportRules(filePath, imports) {
  const fileLayer = getFileLayer(filePath)
  if (!fileLayer) return []

  const allowedLayers = IMPORT_RULES[fileLayer] || []
  const violations = []

  for (const importItem of imports) {
    if (importItem.layer && !allowedLayers.includes(importItem.layer)) {
      violations.push({
        file: filePath,
        import: importItem.path,
        fromLayer: fileLayer,
        toLayer: importItem.layer,
        message: `–°–ª–æ–π '${fileLayer}' –Ω–µ –º–æ–∂–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–π '${importItem.layer}'`,
      })
    }
  }

  return violations
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
function checkFolderStructure() {
  const violations = []

  for (const layer of FSD_LAYERS) {
    const layerPath = path.join(process.cwd(), layer)
    if (fs.existsSync(layerPath)) {
      const stats = fs.statSync(layerPath)
      if (!stats.isDirectory()) {
        violations.push({
          type: 'structure',
          message: `'${layer}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞–ø–∫–æ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º`,
        })
      }
    }
  }

  return violations
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ index.ts —Ñ–∞–π–ª–æ–≤
function checkIndexFiles() {
  const violations = []

  for (const layer of FSD_LAYERS) {
    const layerPath = path.join(process.cwd(), layer)
    const indexPath = path.join(layerPath, 'index.ts')

    if (fs.existsSync(layerPath) && !fs.existsSync(indexPath)) {
      violations.push({
        type: 'index',
        layer,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç index.ts –≤ —Å–ª–æ–µ '${layer}'`,
      })
    }
  }

  return violations
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkFSD() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ FSD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...\n')

  const violations = []

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
  const structureViolations = checkFolderStructure()
  violations.push(...structureViolations)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ index —Ñ–∞–π–ª–æ–≤
  const indexViolations = checkIndexFiles()
  violations.push(...indexViolations)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
  const tsFiles = findFiles('**/*.{ts,tsx}')
  let importViolations = []

  for (const file of tsFiles) {
    const imports = extractImports(file)
    const fileViolations = checkImportRules(file, imports)
    importViolations.push(...fileViolations)
  }

  violations.push(...importViolations)

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (violations.length === 0) {
    console.log('‚úÖ FSD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!')
    return true
  } else {
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è FSD –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:\n')

    const structureErrors = violations.filter((v) => v.type === 'structure')
    const indexErrors = violations.filter((v) => v.type === 'index')
    const importErrors = violations.filter((v) => !v.type)

    if (structureErrors.length > 0) {
      console.log('üìÅ –û—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:')
      structureErrors.forEach((v) => console.log(`  - ${v.message}`))
      console.log()
    }

    if (indexErrors.length > 0) {
      console.log('üìÑ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ index.ts —Ñ–∞–π–ª—ã:')
      indexErrors.forEach((v) => console.log(`  - ${v.message}`))
      console.log()
    }

    if (importErrors.length > 0) {
      console.log('üîÑ –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç–æ–≤:')
      importErrors.forEach((v) => {
        console.log(`  - ${v.file}`)
        console.log(`    ${v.message}`)
        console.log(`    –ò–º–ø–æ—Ä—Ç: ${v.import}`)
        console.log()
      })
    }

    return false
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const success = checkFSD()
  process.exit(success ? 0 : 1)
}

module.exports = { checkFSD }
