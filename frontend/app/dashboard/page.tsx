"use client";

// –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
export const dynamic = 'force-dynamic'

import { useState, useEffect } from "react";

import { useRouteAccess } from "@/shared/hooks/useRouteAccess";
import { GlassCard } from "@/shared/ui/glass-card";

interface DashboardStats {
  totalComments: number;
  activeGroups: number;
  keywords: number;
  activeParsers: number;
  commentsGrowth: number;
  groupsGrowth: number;
  keywordsGrowth: number;
  parsersGrowth: number;
}

export default function DashboardPage() {
  useRouteAccess(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

  const [stats, setStats] = useState<DashboardStats>({
    totalComments: 0,
    activeGroups: 0,
    keywords: 0,
    activeParsers: 0,
    commentsGrowth: 0,
    groupsGrowth: 0,
    keywordsGrowth: 0,
    parsersGrowth: 0,
  });

  const [loading, setLoading] = useState(true);

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const statsConfig = [
    {
      key: 'totalComments' as keyof DashboardStats,
      growthKey: 'commentsGrowth' as keyof DashboardStats,
      title: '–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
      icon: 'üí¨',
      color: 'bg-blue-500',
    },
    {
      key: 'activeGroups' as keyof DashboardStats,
      growthKey: 'groupsGrowth' as keyof DashboardStats,
      title: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø',
      icon: 'üë•',
      color: 'bg-green-500',
    },
    {
      key: 'keywords' as keyof DashboardStats,
      growthKey: 'keywordsGrowth' as keyof DashboardStats,
      title: '–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤',
      icon: 'üîç',
      color: 'bg-purple-500',
    },
    {
      key: 'activeParsers' as keyof DashboardStats,
      growthKey: 'parsersGrowth' as keyof DashboardStats,
      title: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤',
      icon: '‚öôÔ∏è',
      color: 'bg-orange-500',
    },
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const quickActions = [
    { label: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', icon: '‚ûï' },
    { label: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', icon: 'üîß' },
    { label: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä', icon: '‚ñ∂Ô∏è' },
  ];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const recentActivity = [
    {
      status: '–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω',
      time: '2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥',
      color: 'bg-green-400',
      pulse: true,
    },
    {
      status: '–ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω—ã',
      time: '15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
      color: 'bg-blue-400',
      pulse: false,
    },
    {
      status: '–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞',
      time: '1 —á–∞—Å –Ω–∞–∑–∞–¥',
      color: 'bg-yellow-400',
      pulse: false,
    },
  ];

  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const timer = setTimeout(() => {
      setStats({
        totalComments: 1247,
        activeGroups: 23,
        keywords: 156,
        activeParsers: 8,
        commentsGrowth: 12.5,
        groupsGrowth: 8.2,
        keywordsGrowth: 15.3,
        parsersGrowth: -2.1,
      });
      setLoading(false);
    }, 1000);

    return () => clearTimeout(timer);
  }, []);

  const StatCard = ({ 
    title, 
    value, 
    growth, 
    icon, 
    color 
  }: {
    title: string;
    value: number;
    growth: number;
    icon: string;
    color: string;
  }) => (
    <div className="group relative overflow-hidden rounded-xl bg-white/5 border border-white/10 p-6 transition-all duration-300 hover:bg-white/10 hover:scale-105">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <div className={`p-3 rounded-xl ${color} bg-opacity-20`}>
            <span className="text-2xl">{icon}</span>
          </div>
          <h3 className="text-sm font-medium text-white/80">{title}</h3>
        </div>
        <div className={`text-xs px-2 py-1 rounded-full ${
          growth >= 0 
            ? 'bg-green-500/20 text-green-400' 
            : 'bg-red-500/20 text-red-400'
        }`}>
          {growth >= 0 ? '+' : ''}{growth}%
        </div>
      </div>
      
      <div className="space-y-1">
        <div className="text-3xl font-bold text-white">
          {loading ? (
            <div className="h-8 w-20 bg-white/20 rounded animate-pulse" />
          ) : (
            value.toLocaleString()
          )}
        </div>
        <p className="text-xs text-white/60">
          {growth >= 0 ? '—Ä–æ—Å—Ç' : '—Å–Ω–∏–∂–µ–Ω–∏–µ'} —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
        </p>
      </div>
    </div>
  );

  return (
    <GlassCard maxWidth="2xl" className="!min-h-screen !py-0">
      <div className="p-6 space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center space-y-4 animate-fade-in-up">
          <h1 className="text-5xl font-bold bg-gradient-to-r from-white via-blue-100 to-cyan-100 bg-clip-text text-transparent">
            –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h1>
          <p className="text-xl text-white/70 max-w-2xl mx-auto">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
          </p>
        </div>
        
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 animate-fade-in-up" style={{ animationDelay: '0.2s' }}>
          {statsConfig.map((config) => (
            <StatCard
              key={config.key}
              title={config.title}
              value={stats[config.key] as number}
              growth={stats[config.growthKey] as number}
              icon={config.icon}
              color={config.color}
            />
          ))}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="grid gap-6 md:grid-cols-2 animate-fade-in-up" style={{ animationDelay: '0.4s' }}>
          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="bg-white/5 rounded-xl border border-white/10 p-6">
            <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
              <span className="mr-2">üöÄ</span>
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </h3>
            <div className="space-y-3">
              {quickActions.map((action, index) => (
                <button 
                  key={index}
                  className="w-full text-left p-3 rounded-lg bg-white/5 hover:bg-white/10 transition-colors duration-200 flex items-center justify-between group"
                >
                  <span className="text-white/80 group-hover:text-white flex items-center">
                    <span className="mr-2">{action.icon}</span>
                    {action.label}
                  </span>
                  <span className="text-white/40 group-hover:text-white/60">‚Üí</span>
                </button>
              ))}
            </div>
          </div>

          {/* –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
          <div className="bg-white/5 rounded-xl border border-white/10 p-6">
            <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
              <span className="mr-2">üìä</span>
              –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            </h3>
            <div className="space-y-3">
              {recentActivity.map((activity, index) => (
                <div key={index} className="flex items-center space-x-3 p-3 rounded-lg bg-white/5">
                  <div className={`w-2 h-2 ${activity.color} rounded-full ${activity.pulse ? 'animate-pulse' : ''}`} />
                  <div className="flex-1">
                    <p className="text-sm text-white/80">{activity.status}</p>
                    <p className="text-xs text-white/60">{activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </GlassCard>
  );
}
