// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-api.js

const API_BASE = 'http://localhost:8000/api/v1'

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n')

  try {
    // –¢–µ—Å—Ç 1: Basic Health check
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ basic health check...')
    const healthResponse = await fetch(`${API_BASE}/health`)
    if (healthResponse.ok) {
      const healthData = await healthResponse.json()
      console.log('‚úÖ Basic health check:', healthData)
    } else {
      console.log('‚ùå Basic health check: FAILED')
    }

    // –¢–µ—Å—Ç 2: Detailed Health check
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ detailed health check...')
    const detailedHealthResponse = await fetch(`${API_BASE}/health/detailed`)
    if (detailedHealthResponse.ok) {
      console.log('‚úÖ Detailed health check: OK')
    } else {
      console.log('‚ùå Detailed health check: FAILED')
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø...')
    const groupsResponse = await fetch(`${API_BASE}/groups`)
    if (groupsResponse.ok) {
      const groups = await groupsResponse.json()
      console.log(`‚úÖ –ì—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω—ã: ${groups.items?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø: FAILED')
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...')
    const keywordsResponse = await fetch(`${API_BASE}/keywords`)
    if (keywordsResponse.ok) {
      const keywords = await keywordsResponse.json()
      console.log(`‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã: ${keywords.items?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: FAILED')
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ parser
    console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ parser...')
    const commentsResponse = await fetch(`${API_BASE}/parser/comments?size=1`)
    if (commentsResponse.ok) {
      const comments = await commentsResponse.json()
      console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã: ${comments.items?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: FAILED')
    }

    // –¢–µ—Å—Ç 6: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
    console.log('\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞...')
    const parserStateResponse = await fetch(`${API_BASE}/parser/state`)
    if (parserStateResponse.ok) {
      const parserState = await parserStateResponse.json()
      console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞:', parserState)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: FAILED')
    }

    // –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞...')
    const parserStatsResponse = await fetch(`${API_BASE}/parser/stats`)
    if (parserStatsResponse.ok) {
      const parserStats = await parserStatsResponse.json()
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:', parserStats)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: FAILED')
    }

    // –¢–µ—Å—Ç 8: –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\n8. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...')
    const systemStatusResponse = await fetch(`${API_BASE}/health/status`)
    if (systemStatusResponse.ok) {
      const systemStatus = await systemStatusResponse.json()
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', systemStatus)
    } else {
      console.log('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: FAILED')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
    console.log('1. Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000')
    console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker')
    console.log('3. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ firewall')
    console.log('4. CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã')
  }

  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAPI()
