#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤
# –ê–≤—Ç–æ—Ä: AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîß $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    if ! command -v git &> /dev/null; then
        log_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi

    if ! command -v gh &> /dev/null; then
        log_warning "Git CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git CLI"
        log_info "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Git UI"
    fi

    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
get_current_version() {
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ backend
    if [ -f "backend/pyproject.toml" ]; then
        grep -E "^version = " backend/pyproject.toml | sed 's/version = "\(.*\)"/\1/'
    elif [ -f "frontend/package.json" ]; then
        grep -E '"version":' frontend/package.json | sed 's/.*"version": "\(.*\)".*/\1/'
    else
        echo "0.1.0"
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
get_release_type() {
    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–ª–∏–∑–∞:${NC}"
    echo "1) üöÄ Major (x.0.0) - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"
    echo "2) ‚ú® Minor (0.x.0) - –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
    echo "3) üêõ Patch (0.0.x) - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤, –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è"
    echo "4) üß™ Pre-release (beta/rc) - –¢–µ—Å—Ç–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏"
    echo "5) ‚ùå –û—Ç–º–µ–Ω–∞"

    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): " choice

    case $choice in
        1) echo "major" ;;
        2) echo "minor" ;;
        3) echo "patch" ;;
        4) echo "prerelease" ;;
        5) log_info "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 0 ;;
        *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; exit 1 ;;
    esac
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
get_release_description() {
    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ):${NC}"
    read -r description

    if [ -z "$description" ]; then
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤
        log_info "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ..."
        description=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD | head -10 | sed 's/^/- /')
    fi

    echo "$description"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
create_new_version() {
    local current_version=$1
    local release_type=$2

    log_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏..."

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    major=${VERSION_PARTS[0]}
    minor=${VERSION_PARTS[1]}
    patch=${VERSION_PARTS[2]}

    case $release_type in
        "major")
            new_version="$((major + 1)).0.0"
            ;;
        "minor")
            new_version="${major}.$((minor + 1)).0"
            ;;
        "patch")
            new_version="${major}.${minor}.$((patch + 1))"
            ;;
        "prerelease")
            echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø pre-release:${NC}"
            echo "1) beta"
            echo "2) rc (release candidate)"
            read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): " prerelease_choice

            case $prerelease_choice in
                1) prerelease_type="beta" ;;
                2) prerelease_type="rc" ;;
                *) log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; exit 1 ;;
            esa

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –¥–ª—è pre-release
            new_version="${major}.${minor}.$((patch + 1))-${prerelease_type}.1"
            ;;
    esa

    echo "$new_version"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ —Ñ–∞–π–ª–∞—Ö
update_versions() {
    local new_version=$1

    log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ —Ñ–∞–π–ª–∞—Ö..."

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ backend –≤–µ—Ä—Å–∏–∏
    if [ -f "backend/pyproject.toml" ]; then
        sed -i "s/^version = \".*\"/version = \"${new_version}\"/" backend/pyproject.toml
        log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ backend/pyproject.toml"
    fi

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ frontend –≤–µ—Ä—Å–∏–∏
    if [ -f "frontend/package.json" ]; then
        sed -i "s/\"version\": \".*\"/\"version\": \"${new_version}\"/" frontend/package.json
        log_success "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –≤ frontend/package.json"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
check_repository_status() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if ! git diff-index --quiet HEAD --; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        git status --short
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            exit 0
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        log_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã uncommitted –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        git status --short
        read -p "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "chore: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–ª–∏–∑—É $new_version"
        fi
    fi

    log_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–µ–ª–∏–∑—É"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –∏ push
create_tag_and_push() {
    local new_version=$1
    local description=$2

    log_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –∏ push..."

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
    git tag -a "v${new_version}" -m "Release v${new_version}

${description}"

    # Push —Ç–µ–≥–∞
    git push origin "v${new_version}"

    log_success "–¢–µ–≥ v${new_version} —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Git Release
create_git_release() {
    local new_version=$1
    local description=$2

    if command -v gh &> /dev/null; then
        log_step "–°–æ–∑–¥–∞–Ω–∏–µ Git Release..."

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
        if [[ $new_version == *"-"* ]]; then
            prerelease_flag="--prerelease"
        else
            prerelease_flag=""
        fi

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Git CLI
        gh release create "v${new_version}" \
            --title "Release v${new_version}" \
            --notes "${description}" \
            ${prerelease_flag}

        log_success "Git Release —Å–æ–∑–¥–∞–Ω"
    else
        log_warning "Git CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ª–∏–∑ –≤—Ä—É—á–Ω—É—é"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${PURPLE}üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞${NC}"
    echo "=================="

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    current_version=$(get_current_version)
    log_info "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–ª–∏–∑–∞
    release_type=$(get_release_type)
    log_info "–¢–∏–ø —Ä–µ–ª–∏–∑–∞: $release_type"

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    new_version=$(create_new_version "$current_version" "$release_type")
    log_info "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $new_version"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    description=$(get_release_description)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    check_repository_status

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    update_versions "$new_version"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
    git add .
    git commit -m "chore: bump version to $new_version"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –∏ push
    create_tag_and_push "$new_version" "$description"

    # –°–æ–∑–¥–∞–Ω–∏–µ Git Release
    create_git_release "$new_version" "$description"

    echo
    log_success "üéâ –†–µ–ª–∏–∑ v${new_version} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
    log_info "CI/CD pipeline –∑–∞–ø—É—Å—Ç–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è"
    log_info "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ CI/CD pipeline"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
