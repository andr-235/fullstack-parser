#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import sys
import os
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "backend"))

from app.core.database import AsyncSessionLocal
from app.services.monitoring_service import MonitoringService
from app.services.vkbottle_service import VKBottleService
from app.core.config import settings


async def test_monitoring_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)

    async with AsyncSessionLocal() as db:
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—ã
        vk_service = VKBottleService(
            token=settings.vk.access_token, api_version=settings.vk.api_version
        )
        monitoring_service = MonitoringService(db=db, vk_service=vk_service)

        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n1. üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        try:
            stats = await monitoring_service.get_monitoring_stats()
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"      - –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {stats.get('total_groups', 0)}")
            print(f"      - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {stats.get('active_groups', 0)}")
            print(f"      - –ì—Ä—É–ø–ø –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {stats.get('monitored_groups', 0)}")
            print(
                f"      - –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {stats.get('ready_for_monitoring', 0)}"
            )
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # 2. –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n2. üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        try:
            groups = await monitoring_service.get_groups_for_monitoring()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(groups)}")
            for group in groups[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(
                    f"      - {group.name} (ID: {group.id}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {group.monitoring_priority})"
                )
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")

        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n3. ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        try:
            stats = await monitoring_service.run_monitoring_cycle()
            print(f"   ‚úÖ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à—ë–Ω:")
            print(f"      - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: {stats.get('monitored_groups', 0)}")
            print(f"      - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: {stats.get('successful_runs', 0)}")
            print(f"      - –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤: {stats.get('failed_runs', 0)}")
            print(
                f"      - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('duration_seconds', 0):.2f} —Å–µ–∫"
            )
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞: {e}")

        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints")
    print("=" * 60)

    import requests

    base_url = "http://localhost:8000/api/v1"

    # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("\n1. üìä GET /monitoring/stats")
    try:
        response = requests.get(f"{base_url}/monitoring/stats")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {data}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # 2. –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    print("\n2. ‚è∞ GET /monitoring/scheduler/status")
    try:
        response = requests.get(f"{base_url}/monitoring/scheduler/status")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {data}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # 3. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞
    print("\n3. üöÄ POST /monitoring/run-cycle")
    try:
        response = requests.post(f"{base_url}/monitoring/run-cycle")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω: {data}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now(timezone.utc).isoformat()}")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await test_monitoring_service()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
        await test_api_endpoints()

        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
