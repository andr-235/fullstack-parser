# =============================================================================
# Optimized Docker Compose for Production Environment
# =============================================================================

version: "3.8"

# Общие настройки логирования
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "production_status"
    env: "os,customer"

# Общие настройки health check
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

# Общие настройки безопасности
x-security: &default-security
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m
    - /var/tmp:noexec,nosuid,size=50m

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c
    container_name: fullstack_prod_postgres
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup:ro
    networks:
      - prod-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "1.0"
          memory: 1G
    <<: *default-security
    user: "999:999"

  # Redis кеш
  redis:
    image: redis:7-alpine@sha256:abcdef1234567890
    container_name: fullstack_prod_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - prod-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    <<: *default-security
    user: "999:999"

  # Backend приложение
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: fullstack_prod_backend
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - ENV=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - VK_ACCESS_TOKEN=${VK_ACCESS_TOKEN}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - MONITORING_MAX_CONCURRENT_GROUPS=${MONITORING_MAX_CONCURRENT_GROUPS:-50}
      - MONITORING_SCHEDULER_INTERVAL_SECONDS=${MONITORING_SCHEDULER_INTERVAL_SECONDS:-300}
      - MONITORING_GROUP_DELAY_SECONDS=${MONITORING_GROUP_DELAY_SECONDS:-1}
      - MONITORING_AUTO_START_SCHEDULER=${MONITORING_AUTO_START_SCHEDULER:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - prod-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    <<: *default-security
    user: "1000:1000"

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: fullstack_prod_frontend
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://localhost
    depends_on:
      - backend
    networks:
      - prod-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    <<: *default-security
    user: "1001:1001"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine@sha256:abcdef1234567890
    container_name: fullstack_prod_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - prod-network
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "curl", "-f", "http://localhost/health"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    <<: *default-security
    user: "101:101"

# Сети
networks:
  prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: prod-bridge
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Тома
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docker/postgres-data
    labels:
      - "com.example.description=Database data"
      - "com.example.department=IT"
  redis_data:
    driver: local
    driver_opts:
      type: tmpfs
      o: size=100m
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/nginx
