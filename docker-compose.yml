# =============================================================================
# Production-Ready Docker Compose for FastAPI Backend + Nginx
# HTTP-Only, No SSL, Best Practices 2025
# =============================================================================

services:
  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: vk_parser_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vk_parser}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    ports:
      - "5433:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vk_parser}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Redis Cache & Message Broker
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: vk_parser_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # FastAPI Backend
  # =============================================================================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: vk_parser_api
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-vk_parser}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_URL: redis://redis:6379/0
      REDIS_CELERY_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      APP_NAME: "VK Parser API"
      APP_VERSION: "1.0.0"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Sentry (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      
    volumes:
      - api_logs:/app/logs
      - postgres_backups:/app/backups
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # Celery Worker
  # =============================================================================
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: vk_parser_celery_worker
    restart: unless-stopped
    command: ["python", "scripts/start_celery_worker.py"]
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-vk_parser}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_URL: redis://redis:6379/0
      REDIS_CELERY_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      APP_NAME: "VK Parser Celery Worker"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      
    volumes:
      - celery_logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "src.common.celery_config.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # =============================================================================
  # Celery Beat (Scheduler)
  # =============================================================================
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: vk_parser_celery_beat
    restart: unless-stopped
    command: ["python", "scripts/start_celery_beat.py"]
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-vk_parser}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_URL: redis://redis:6379/0
      REDIS_CELERY_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      APP_NAME: "VK Parser Celery Beat"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      
    volumes:
      - celery_logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # =============================================================================
  # Flower (Celery Monitoring)
  # =============================================================================
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: vk_parser_flower
    restart: unless-stopped
    command: ["python", "scripts/start_flower.py"]
    environment:
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_URL: redis://redis:6379/0
      REDIS_CELERY_URL: redis://redis:6379/1
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Application
      APP_NAME: "VK Parser Flower"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
    ports:
      - "5555:5555"
    volumes:
      - flower_logs:/app/logs
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: vk_parser_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

# =============================================================================
# Networks
# =============================================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  postgres_backups:
    driver: local
  api_logs:
    driver: local
  celery_logs:
    driver: local
  flower_logs:
    driver: local
  nginx_logs:
    driver: local