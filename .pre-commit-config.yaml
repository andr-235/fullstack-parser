# Pre-commit hooks для автоматической проверки качества кода
# Установка: pip install pre-commit && pre-commit install
# Запуск: pre-commit run --all-files

repos:
  # =============================================================================
  # ОБЩИЕ ПРОВЕРКИ
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace        # Удаляет лишние пробелы в конце строк
      - id: end-of-file-fixer         # Добавляет перенос строки в конец файла
      - id: check-yaml                # Проверяет синтаксис YAML
      - id: check-json                # Проверяет синтаксис JSON
      - id: check-toml                # Проверяет синтаксис TOML
      - id: check-xml                 # Проверяет синтаксис XML
      - id: check-merge-conflict      # Проверяет наличие merge conflicts
      - id: check-case-conflict       # Проверяет конфликты имен файлов
      - id: check-added-large-files   # Предотвращает добавление больших файлов
        args: ['--maxkb=1000']
      - id: check-executables-have-shebangs  # Проверяет shebang в исполняемых файлах
      - id: check-shebang-scripts-are-executable  # Проверяет права на файлы с shebang
      - id: mixed-line-ending         # Проверяет смешанные окончания строк
      - id: requirements-txt-fixer    # Сортирует requirements.txt

  # =============================================================================
  # PYTHON
  # =============================================================================
  # Black - форматирование кода
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        language_version: python3
        files: ^backend/
        args: [--line-length=88]

  # isort - сортировка импортов
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        files: ^backend/
        args: [--profile=black, --line-length=88]

  # Ruff - быстрый линтер для Python
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.0.292
    hooks:
      - id: ruff
        files: ^backend/
        args: [--fix, --exit-non-zero-on-fix]

  # mypy - проверка типов
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        files: ^backend/
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies: [types-all]

  # Bandit - проверка безопасности Python кода
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        files: ^backend/
        args: [-c, backend/pyproject.toml]
        exclude: ^backend/tests/

  # =============================================================================
  # JAVASCRIPT/TYPESCRIPT
  # =============================================================================
  # Prettier - форматирование JS/TS/CSS/HTML
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        files: ^frontend/
        types_or: [javascript, jsx, ts, tsx, css, scss, json, yaml, markdown]

  # ESLint - линтинг JavaScript/TypeScript
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.50.0
    hooks:
      - id: eslint
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        args: [--fix]
        additional_dependencies:
          - eslint@8.50.0
          - eslint-plugin-react@7.33.2
          - eslint-plugin-react-hooks@4.6.0
          - "@typescript-eslint/eslint-plugin@6.7.4"
          - "@typescript-eslint/parser@6.7.4"

  # =============================================================================
  # DOCKER
  # =============================================================================
  # hadolint - линтинг Dockerfile
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # =============================================================================
  # БЕЗОПАСНОСТЬ
  # =============================================================================
  # gitleaks - поиск секретов в коде
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks

  # detect-secrets - поиск потенциальных секретов
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: package.lock.json

  # =============================================================================
  # ДОКУМЕНТАЦИЯ
  # =============================================================================
  # markdownlint - проверка Markdown
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # =============================================================================
  # YAML/JSON
  # =============================================================================
  # yamllint - проверка YAML файлов
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: [--format, parsable, --strict]

  # =============================================================================
  # КОММИТЫ
  # =============================================================================
  # Conventional commits - проверка формата commit messages
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [--types=feat,fix,docs,style,refactor,test,chore,perf,security,revert]

  # =============================================================================
  # ЛОКАЛЬНЫЕ HOOKS
  # =============================================================================
  - repo: local
    hooks:
      # Проверка что env.example актуален
      - id: check-env-example
        name: Check env.example is up to date
        entry: bash -c 'if [ -f .env ]; then diff <(grep -v "^#" .env | grep "=" | cut -d"=" -f1 | sort) <(grep -v "^#" env.example | grep "=" | cut -d"=" -f1 | sort); fi'
        language: system
        pass_filenames: false

      # Проверка requirements.txt безопасности
      - id: safety-check
        name: Safety check Python dependencies
        entry: bash -c 'cd backend && safety check --json || true'
        language: system
        files: ^backend/requirements.*\.txt$
        pass_filenames: false

      # TypeScript проверка
      - id: typescript-check
        name: TypeScript type check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false

# =============================================================================
# КОНФИГУРАЦИЯ
# =============================================================================
default_language_version:
  python: python3.11
  node: 18.17.0

fail_fast: false
minimum_pre_commit_version: 3.0.0

# Exclude patterns
exclude: |
  (?x)^(
    .*\.min\.js|
    .*\.min\.css|
    node_modules/|
    __pycache__/|
    \.git/|
    \.pytest_cache/|
    \.mypy_cache/|
    \.coverage|
    htmlcov/|
    dist/|
    build/|
    .*\.log
  )$ 